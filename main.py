import ccxt
import pandas as pd
import numpy as np
import ta
from datetime import datetime, timedelta
import time
import logging
import json
import os
from collections import defaultdict
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('crypto_futures_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FuturesCryptoTradingBot:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤ Binance
        self.exchange = ccxt.binance({
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future',  # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
                'adjustForTimeDifference': True
            }
        })
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        self.timeframes = ['5m', '15m', '1h', '4h']  # –£–±—Ä–∞–Ω 1d –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        
        # –°–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä (30+ —Ç–æ–∫–µ–Ω–æ–≤)
        self.symbols = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT',
            'ADA/USDT', 'DOGE/USDT', 'DOT/USDT', 'AVAX/USDT', 'LINK/USDT',
            'MATIC/USDT', 'UNI/USDT', 'LTC/USDT', 'ATOM/USDT', 'ETC/USDT',
            'FIL/USDT', 'TRX/USDT', 'VET/USDT', 'XLM/USDT', 'ICP/USDT',
            'FTM/USDT', 'HBAR/USDT', 'NEAR/USDT', 'ALGO/USDT', 'EGLD/USDT',
            'FLOW/USDT', 'SAND/USDT', 'MANA/USDT', 'AXS/USDT', 'GALA/USDT',
            'APE/USDT', 'CHZ/USDT', 'ENJ/USDT', 'THETA/USDT', 'GMT/USDT'
        ]
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        self.active_trades = {}
        self.signal_history = defaultdict(list)
        self.signals_found = []  # –õ–æ–≥ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.analysis_stats = {
            'total_analyzed': 0,
            'signals_generated': 0,
            'start_time': datetime.now().isoformat()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        }
        
        # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.state_file = 'bot_state.json'
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.risk_params = {
            'min_confidence_threshold': 65,  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
            'min_volume_filter': 1000000,
            'min_rr_ratio': 1.8,  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π RR –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
            'use_short_signals': True  # –í–∫–ª—é—á–∞–µ–º SHORT —Å–∏–≥–Ω–∞–ª—ã
        }
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_state()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.load_market_data()
        
    def load_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.state_file):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Ñ–∞–π–ª
                if os.path.getsize(self.state_file) == 0:
                    logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è {self.state_file} –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
                    self.create_default_state_file()
                    return
                    
                with open(self.state_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if not content:
                        logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è {self.state_file} –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
                        self.create_default_state_file()
                        return
                        
                    state = json.loads(content)
                    
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                if 'active_trades' in state:
                    self.active_trades = self.convert_to_serializable(state['active_trades'])
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(self.active_trades)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                    
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
                if 'signal_history' in state:
                    raw_history = state['signal_history']
                    self.signal_history = defaultdict(list)
                    for symbol, signals in raw_history.items():
                        self.signal_history[symbol] = [self.convert_to_serializable(signal) for signal in signals]
                    total_signals = sum(len(signals) for signals in self.signal_history.values())
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
                    
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                if 'signals_found' in state:
                    self.signals_found = [self.convert_to_serializable(signal) for signal in state['signals_found']]
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(self.signals_found)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                    
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if 'analysis_stats' in state:
                    self.analysis_stats = self.convert_to_serializable(state['analysis_stats'])
                    logger.info("üì• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    
                logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            else:
                logger.info("üÜï –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ - —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.create_default_state_file()
                
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ JSON –≤ —Ñ–∞–π–ª–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            logger.warning("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            self.create_default_state_file()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            logger.warning("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            self.create_default_state_file()
            
    def create_default_state_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            default_state = {
                'active_trades': {},
                'signal_history': {},
                'signals_found': [],
                'analysis_stats': {
                    'total_analyzed': 0,
                    'signals_generated': 0,
                    'start_time': datetime.now().isoformat()
                },
                'created_at': datetime.now().isoformat()
            }
            
            with open(self.state_file, 'w', encoding='utf-8') as f:
                json.dump(default_state, f, ensure_ascii=False, indent=2, default=str)
                
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            
    def convert_to_serializable(self, obj):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if isinstance(obj, dict):
            return {key: self.convert_to_serializable(value) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self.convert_to_serializable(item) for item in obj]
        elif isinstance(obj, (np.integer, np.floating)):
            return float(obj)
        elif isinstance(obj, np.bool_):
            return bool(obj)
        elif pd.api.types.is_integer_dtype(type(obj)) or pd.api.types.is_float_dtype(type(obj)):
            return float(obj)
        elif isinstance(obj, pd.Timestamp):
            return obj.isoformat()
        elif isinstance(obj, datetime):
            return obj.isoformat()
        else:
            return obj
            
    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        try:
            state = {
                'active_trades': self.convert_to_serializable(self.active_trades),
                'signal_history': self.convert_to_serializable(dict(self.signal_history)),
                'signals_found': self.convert_to_serializable(self.signals_found),
                'analysis_stats': self.convert_to_serializable(self.analysis_stats),
                'saved_at': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–º–µ—â–∞–µ–º –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
            temp_file = self.state_file + '.tmp'
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(state, f, ensure_ascii=False, indent=2, default=str)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –º–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
            os.replace(temp_file, self.state_file)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            
    def load_market_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–∞—Ö"""
        try:
            markets = self.exchange.load_markets()
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–∞—Ä—ã
            futures_symbols = [symbol for symbol in self.symbols if symbol in markets]
            self.symbols = futures_symbols
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(markets)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤")
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–∞—Ä—ã: {len(self.symbols)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: {e}")
            
    def fetch_ohlcv_multitimeframe(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º"""
        data = {}
        try:
            for tf in self.timeframes:
                # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 5m –∏ 15m
                limit = 200 if tf in ['5m', '15m'] else 100
                ohlcv = self.exchange.fetch_ohlcv(symbol, tf, limit=limit)
                if len(ohlcv) > 0:
                    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                    df.set_index('timestamp', inplace=True)
                    data[tf] = df
                else:
                    data[tf] = None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None
        return data
        
    def calculate_advanced_indicators(self, df, timeframe):
        """–†–∞—Å—á–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if df is None or len(df) < 20:
            return None
            
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)
            df['ema_9'] = ta.trend.EMAIndicator(df['close'], window=9).ema_indicator()
            df['ema_21'] = ta.trend.EMAIndicator(df['close'], window=21).ema_indicator()
            df['ema_50'] = ta.trend.EMAIndicator(df['close'], window=50).ema_indicator()
            
            # MACD (–±—ã—Å—Ç—Ä—ã–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)
            df['macd'] = df['ema_9'] - df['ema_21']
            df['macd_signal'] = df['macd'].rolling(window=9).mean()
            df['macd_histogram'] = df['macd'] - df['macd_signal']
            
            # RSI –∏ –µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
            df['rsi'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi()
            df['rsi_sma'] = df['rsi'].rolling(window=14).mean()
            
            # –°—Ç–æ—Ö–∞—Å—Ç–∏–∫ (–±—ã—Å—Ç—Ä—ã–π)
            stoch = ta.momentum.StochasticOscillator(df['high'], df['low'], df['close'], window=14, smooth_window=3)
            df['stoch_k'] = stoch.stoch()
            df['stoch_d'] = stoch.stoch_signal()
            
            # –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä (–º–µ–Ω—å—à–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)
            bb = ta.volatility.BollingerBands(df['close'], window=20, window_dev=1.5)  # –£–º–µ–Ω—å—à–µ–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            df['bb_upper'] = bb.bollinger_hband()
            df['bb_middle'] = bb.bollinger_mavg()
            df['bb_lower'] = bb.bollinger_lband()
            df['bb_width'] = (df['bb_upper'] - df['bb_lower']) / (df['bb_middle'] + 0.0001)
            df['bb_position'] = (df['close'] - df['bb_lower']) / (df['bb_upper'] - df['bb_lower'] + 0.0001)
            
            # ATR –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            df['atr'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range()
            
            # –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df['volume_ema'] = ta.trend.EMAIndicator(df['volume'], window=20).ema_indicator()
            df['volume_ratio'] = (df['volume'] / (df['volume_ema'] + 0.0001))
            
            # –ú–æ–º–µ–Ω—Ç—É–º (–¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤)
            df['roc_1'] = df['close'].pct_change(1)
            df['roc_3'] = df['close'].pct_change(3)
            df['roc_6'] = df['close'].pct_change(6)  # –î–ª—è 5m —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
            df['candle_body'] = abs(df['close'] - df['open'])
            df['candle_ratio'] = df['candle_body'] / (df['high'] - df['low'] + 0.0001)
            
            # –¢—Ä–µ–Ω–¥ (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π)
            df['price_trend_10'] = (df['close'] - df['close'].shift(10)) / (df['close'].shift(10) + 0.0001)
            df['price_trend_20'] = (df['close'] - df['close'].shift(20)) / (df['close'].shift(20) + 0.0001)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df
            
        return df
        
    def calculate_multitimeframe_analysis(self, data_dict):
        """–ú—É–ª—å—Ç–∏–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑"""
        if not data_dict:
            return {}
            
        analysis = {}
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        for tf, df in data_dict.items():
            if df is not None and len(df) > 0:
                try:
                    last_row = df.iloc[-1]
                    analysis[tf] = {
                        'price': float(last_row['close']) if not pd.isna(last_row['close']) else 0,
                        'trend_ema': 'bullish' if last_row['close'] > last_row.get('ema_21', last_row['close']) else 'bearish',
                        'rsi': float(last_row.get('rsi', 50)) if not pd.isna(last_row.get('rsi', 50)) else 50,
                        'macd_trend': 'bullish' if (last_row.get('macd', 0) or 0) > (last_row.get('macd_signal', 0) or 0) else 'bearish',
                        'momentum': float(last_row.get('roc_3', 0)) if not pd.isna(last_row.get('roc_3', 0)) else 0
                    }
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {tf}: {e}")
                    analysis[tf] = {
                        'price': float(df['close'].iloc[-1]) if len(df) > 0 and not pd.isna(df['close'].iloc[-1]) else 0,
                        'trend_ema': 'neutral',
                        'rsi': 50,
                        'macd_trend': 'neutral',
                        'momentum': 0
                    }
        
        return analysis
        
    def estimate_signal_formation_time(self, data_dict):
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        if not data_dict or '1h' not in data_dict:
            return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            
        try:
            df_1h = data_dict['1h']
            if df_1h is None or len(df_1h) < 10:
                return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
                
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±–∞—Ä–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª–æ–≤–∏–π
            recent_data = df_1h.tail(10)
            
            # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –±–∞—Ä–æ–≤ –Ω–∞–∑–∞–¥ –Ω–∞—á–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —É—Å–ª–æ–≤–∏—è
            conditions_met_count = 0
            for i in range(len(recent_data)-1, -1, -1):
                row = recent_data.iloc[i]
                rsi = float(row.get('rsi', 50)) if not pd.isna(row.get('rsi', 50)) else 50
                stoch_k = float(row.get('stoch_k', 50)) if not pd.isna(row.get('stoch_k', 50)) else 50
                stoch_d = float(row.get('stoch_d', 50)) if not pd.isna(row.get('stoch_d', 50)) else 50
                macd = float(row.get('macd', 0)) if not pd.isna(row.get('macd', 0)) else 0
                macd_signal = float(row.get('macd_signal', 0)) if not pd.isna(row.get('macd_signal', 0)) else 0
                bb_position = float(row.get('bb_position', 0.5)) if not pd.isna(row.get('bb_position', 0.5)) else 0.5
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è LONG
                long_conditions = [
                    rsi < 35,
                    stoch_k < 30 and stoch_d < 30,
                    macd > macd_signal,
                    bb_position < 0.3
                ]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è SHORT
                short_conditions = [
                    rsi > 65,
                    stoch_k > 70 and stoch_d > 70,
                    macd < macd_signal,
                    bb_position > 0.7
                ]
                
                if sum(long_conditions) >= 3 or sum(short_conditions) >= 3:
                    conditions_met_count = len(recent_data) - i
                    break
                    
            if conditions_met_count > 0:
                # –í—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–æ–≤ * —Ç–∞–π–º—Ñ—Ä–µ–π–º
                formation_hours = conditions_met_count
                return f"~{formation_hours} —á–∞—Å–æ–≤"
            else:
                return "–£—Å–ª–æ–≤–∏—è —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            
    def generate_signal(self, symbol, data_dict, multitimeframe_analysis):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if not data_dict or '1h' not in data_dict:
            return None
            
        df_1h = data_dict['1h']
        if df_1h is None or len(df_1h) < 20:
            return None
            
        try:
            current_price = float(df_1h['close'].iloc[-1])
            atr = float(df_1h['atr'].iloc[-1]) if 'atr' in df_1h.columns and not pd.isna(df_1h['atr'].iloc[-1]) else current_price * 0.015  # –£–º–µ–Ω—å—à–µ–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            rsi = float(df_1h['rsi'].iloc[-1]) if not pd.isna(df_1h['rsi'].iloc[-1]) else 50
            stoch_k = float(df_1h['stoch_k'].iloc[-1]) if not pd.isna(df_1h['stoch_k'].iloc[-1]) else 50
            stoch_d = float(df_1h['stoch_d'].iloc[-1]) if not pd.isna(df_1h['stoch_d'].iloc[-1]) else 50
            macd = float(df_1h['macd'].iloc[-1]) if not pd.isna(df_1h['macd'].iloc[-1]) else 0
            macd_signal = float(df_1h['macd_signal'].iloc[-1]) if not pd.isna(df_1h['macd_signal'].iloc[-1]) else 0
            bb_position = float(df_1h['bb_position'].iloc[-1]) if not pd.isna(df_1h['bb_position'].iloc[-1]) else 0.5
            volume_ratio = float(df_1h['volume_ratio'].iloc[-1]) if not pd.isna(df_1h['volume_ratio'].iloc[-1]) else 1
            momentum_1h = float(df_1h['roc_3'].iloc[-1]) if not pd.isna(df_1h['roc_3'].iloc[-1]) else 0
            
            # –ê–Ω–∞–ª–∏–∑ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
            momentum_5m = 0
            momentum_15m = 0
            
            if '5m' in data_dict and data_dict['5m'] is not None and len(data_dict['5m']) > 5:
                df_5m = data_dict['5m']
                momentum_5m = float(df_5m['roc_3'].iloc[-1]) if not pd.isna(df_5m['roc_3'].iloc[-1]) else 0
                
            if '15m' in data_dict and data_dict['15m'] is not None and len(data_dict['15m']) > 5:
                df_15m = data_dict['15m']
                momentum_15m = float(df_15m['roc_3'].iloc[-1]) if not pd.isna(df_15m['roc_3'].iloc[-1]) else 0
            
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è LONG (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)
            long_conditions = [
                rsi < 30,  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
                stoch_k < 25 and stoch_d < 25,  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —É—Ä–æ–≤–Ω–∏
                macd > macd_signal,  # MACD bullish
                bb_position < 0.25,  # –¶–µ–Ω–∞ –±–ª–∏–∂–µ –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ
                volume_ratio > 1.2,  # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                momentum_1h > -0.01,  # –ù–µ—Ç —Å–∏–ª—å–Ω–æ–≥–æ downtrend
                momentum_5m > -0.005,  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –∏–º–ø—É–ª—å—Å
                momentum_15m > -0.008  # –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π –∏–º–ø—É–ª—å—Å
            ]
            
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è SHORT (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)
            short_conditions = [
                rsi > 70,  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
                stoch_k > 75 and stoch_d > 75,  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —É—Ä–æ–≤–Ω–∏
                macd < macd_signal,  # MACD bearish
                bb_position > 0.75,  # –¶–µ–Ω–∞ –±–ª–∏–∂–µ –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ
                volume_ratio > 1.2,  # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                momentum_1h < 0.01,  # –ù–µ—Ç —Å–∏–ª—å–Ω–æ–≥–æ uptrend
                momentum_5m < 0.005,  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –∏–º–ø—É–ª—å—Å
                momentum_15m < 0.008  # –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π –∏–º–ø—É–ª—å—Å
            ]
            
            signal_type = None
            confidence_score = 0
            
            long_score = sum(long_conditions)
            short_score = sum(short_conditions)
            
            # –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (1-5)
            signal_strength = 0
            if long_score >= 6 or short_score >= 6:  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                signal_strength = 5
            elif long_score >= 5 or short_score >= 5:
                signal_strength = 4
            elif long_score >= 4 or short_score >= 4:
                signal_strength = 3
            elif long_score >= 3 or short_score >= 3:
                signal_strength = 2
            else:
                signal_strength = 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ SHORT —Å–∏–≥–Ω–∞–ª—ã
            if not self.risk_params['use_short_signals']:
                short_score = 0
                short_conditions = []
            
            if long_score >= 5:  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è LONG
                signal_type = 'LONG'
                confidence_score = (long_score / len(long_conditions)) * 100
            elif short_score >= 5 and self.risk_params['use_short_signals']:  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è SHORT
                signal_type = 'SHORT'
                confidence_score = (short_score / len(short_conditions)) * 100
                
            if signal_type and confidence_score >= self.risk_params['min_confidence_threshold']:
                # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ TP/SL –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
                sl_distance = atr * 1.5  # –ú–µ–Ω—å—à–µ —Å—Ç–æ–ø-–ª–æ—Å—Å
                
                if signal_type == 'LONG':
                    sl = current_price - sl_distance
                    # TP –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR (–º–µ–Ω—å—à–∏–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)
                    tp1 = current_price + atr * 1.5  # ~1.5% –¥–≤–∏–∂–µ–Ω–∏—è
                    tp2 = current_price + atr * 2.5  # ~2.5% –¥–≤–∏–∂–µ–Ω–∏—è
                    tp3 = current_price + atr * 3.5  # ~3.5% –¥–≤–∏–∂–µ–Ω–∏—è
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∏–∑ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
                    if '4h' in data_dict and data_dict['4h'] is not None:
                        df_4h = data_dict['4h']
                        if len(df_4h) > 20:
                            high_4h = df_4h['high'].iloc[-20:].max()
                            if tp3 > high_4h * 0.99:  # –ë–ª–∏–∂–µ –∫ —É—Ä–æ–≤–Ω—é —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                                tp3 = high_4h * 0.99
                            
                else:  # SHORT
                    sl = current_price + sl_distance
                    tp1 = current_price - atr * 1.5  # ~1.5% –¥–≤–∏–∂–µ–Ω–∏—è
                    tp2 = current_price - atr * 2.5  # ~2.5% –¥–≤–∏–∂–µ–Ω–∏—è
                    tp3 = current_price - atr * 3.5  # ~3.5% –¥–≤–∏–∂–µ–Ω–∏—è
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                    if '4h' in data_dict and data_dict['4h'] is not None:
                        df_4h = data_dict['4h']
                        if len(df_4h) > 20:
                            low_4h = df_4h['low'].iloc[-20:].min()
                            if tp3 < low_4h * 1.01:  # –ë–ª–∏–∂–µ –∫ —É—Ä–æ–≤–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                                tp3 = low_4h * 1.01
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω–µ–π
                risk_reward_ratio = abs(tp3 - current_price) / (abs(current_price - sl) + 0.0001)
                
                # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
                if signal_type == 'LONG' and sl < current_price and tp3 > current_price and risk_reward_ratio > self.risk_params['min_rr_ratio']:
                    valid = True
                elif signal_type == 'SHORT' and sl > current_price and tp3 < current_price and risk_reward_ratio > self.risk_params['min_rr_ratio']:
                    valid = True
                else:
                    valid = False
                    
                if valid:
                    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
                    formation_time = self.estimate_signal_formation_time(data_dict)
                    
                    return {
                        'symbol': symbol,
                        'signal_type': signal_type,
                        'entry_price': round(float(current_price), 8),
                        'tp1': round(float(tp1), 8),
                        'tp2': round(float(tp2), 8),
                        'tp3': round(float(tp3), 8),
                        'sl': round(float(sl), 8),
                        'confidence': round(float(confidence_score), 2),
                        'risk_reward_ratio': round(float(risk_reward_ratio), 2),
                        'formation_time': formation_time,
                        'signal_strength': int(signal_strength),
                        'timeframe_analysis': {
                            '5m_momentum': round(float(momentum_5m), 6),
                            '15m_momentum': round(float(momentum_15m), 6),
                            '1h_momentum': round(float(momentum_1h), 6)
                        },
                        'technical_analysis': {
                            'rsi': round(float(rsi), 2),
                            'stoch_k': round(float(stoch_k), 2),
                            'macd': round(float(macd), 8),
                            'bb_position': round(float(bb_position), 2),
                            'volume_ratio': round(float(volume_ratio), 2)
                        },
                        'timestamp': datetime.now().isoformat(),
                        'conditions_met': {
                            'long_score': int(long_score),
                            'short_score': int(short_score),
                            'total_conditions': len(long_conditions) if signal_type == 'LONG' else len(short_conditions)
                        }
                    }
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            
        return None
        
    def get_current_price(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ñ—å—é—á–µ—Ä—Å–∞"""
        try:
            ticker = self.exchange.fetch_ticker(symbol)
            return float(ticker['last'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ñ—å—é—á–µ—Ä—Å–∞ –¥–ª—è {symbol}: {e}")
            return None
            
    def check_active_trades(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        trades_to_remove = []
        for symbol in list(self.active_trades.keys()):
            result = self.check_trade_status(symbol)
            if result == 'closed':
                trades_to_remove.append(symbol)
                
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
        for symbol in trades_to_remove:
            if symbol in self.active_trades:
                del self.active_trades[symbol]
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if trades_to_remove or len(self.active_trades) > 0:
            self.save_state()
            
    def check_trade_status(self, symbol):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        if symbol not in self.active_trades:
            return 'not_found'
            
        trade = self.active_trades[symbol]
        current_price = self.get_current_price(symbol)
        
        if current_price is None:
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–¥–µ–ª–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            logger.info(f"üëÄ [{symbol}] –û—Ç—Å–ª–µ–∂–∏–≤–∞—é {trade['signal_type']} | –¶–µ–Ω–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ | –í—Ö–æ–¥: {trade['entry_price']} | –°—Ç–∞—Ç—É—Å: {self.get_trade_status(trade)}")
            return 'active'
            
        entry_price = float(trade['entry_price'])
        signal_type = trade['signal_type']
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–¥–µ–ª–∫—É
        logger.info(f"üëÄ [{symbol}] –û—Ç—Å–ª–µ–∂–∏–≤–∞—é {signal_type} | –¶–µ–Ω–∞: {current_price} | –í—Ö–æ–¥: {entry_price} | –°—Ç–∞—Ç—É—Å: {self.get_trade_status(trade)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP –∏ SL
        tp_levels = [float(trade['tp1']), float(trade['tp2']), float(trade['tp3'])]
        tp_names = ['TP1', 'TP2', 'TP3']
        
        for i, (tp, tp_name) in enumerate(zip(tp_levels, tp_names)):
            if f'{tp_name.lower()}_reached' not in trade or not trade[f'{tp_name.lower()}_reached']:
                reached = False
                if signal_type == 'LONG' and current_price >= tp:
                    reached = True
                elif signal_type == 'SHORT' and current_price <= tp:
                    reached = True
                    
                if reached:
                    trade[f'{tp_name.lower()}_reached'] = True
                    logger.info(f"üéØ [{symbol}] --- Take Profit {i+1} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç @ {tp} ---")
                    
                    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç TP3, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
                    if tp_name == 'TP3':
                        logger.info(f"üéâ [{symbol}] –°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê –ø–æ Take Profit 3 @ {tp}")
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                        self.save_state()
                        return 'closed'
                        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SL
        sl = float(trade['sl'])
        sl_reached = False
        if signal_type == 'LONG' and current_price <= sl:
            sl_reached = True
        elif signal_type == 'SHORT' and current_price >= sl:
            sl_reached = True
            
        if sl_reached:
            trade['sl_reached'] = True
            logger.info(f"üõë [{symbol}] –°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê –ø–æ Stop Loss @ {sl}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            self.save_state()
            return 'closed'
            
        return 'active'
        
    def get_trade_status(self, trade):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏"""
        if trade.get('tp3_reached', False):
            return 'hit TP3'
        elif trade.get('tp2_reached', False):
            return 'hit TP2'
        elif trade.get('tp1_reached', False):
            return 'hit TP1'
        elif trade.get('sl_reached', False):
            return 'hit SL'
        else:
            return 'active'
            
    def send_signal(self, signal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        if signal is None:
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        symbol = signal['symbol']
        if symbol in self.signal_history and len(self.signal_history[symbol]) > 0:
            last_signal = self.signal_history[symbol][-1]
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            try:
                last_timestamp = datetime.fromisoformat(last_signal['timestamp'].replace('Z', '+00:00')) if isinstance(last_signal['timestamp'], str) else last_signal['timestamp']
                current_timestamp = datetime.fromisoformat(signal['timestamp'].replace('Z', '+00:00')) if isinstance(signal['timestamp'], str) else signal['timestamp']
                
                if (current_timestamp - last_timestamp).total_seconds() < 3600:  # 1 —á–∞—Å –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
                    return  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            except:
                pass  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.signal_history[symbol].append(self.convert_to_serializable(signal))
        if len(self.signal_history[symbol]) > 50:
            self.signal_history[symbol] = self.signal_history[symbol][-25:]
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–≥ –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_log_entry = {
            'timestamp': signal['timestamp'],
            'symbol': signal['symbol'],
            'signal_type': signal['signal_type'],
            'entry_price': float(signal['entry_price']),
            'tp1': float(signal['tp1']),
            'tp2': float(signal['tp2']),
            'tp3': float(signal['tp3']),
            'sl': float(signal['sl']),
            'confidence': float(signal['confidence']),
            'rr_ratio': float(signal['risk_reward_ratio']),
            'signal_strength': int(signal['signal_strength'])
        }
        self.signals_found.append(self.convert_to_serializable(signal_log_entry))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.analysis_stats['signals_generated'] += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        logger.info(f"‚úÖ [{signal['symbol']}] --- –û–¢–ö–†–´–¢–ê {signal['signal_type']} –°–î–ï–õ–ö–ê (–°–∏–ª–∞: {signal['signal_strength']}) @ {signal['entry_price']} ---")
        logger.info(f"   SL: {signal['sl']}, TP1: {signal['tp1']}, TP2: {signal['tp2']}, TP3: {signal['tp3']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–¥–µ–ª–∫—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π)
        if symbol not in self.active_trades:
            self.active_trades[signal['symbol']] = self.convert_to_serializable(signal).copy()
            for tp_name in ['tp1', 'tp2', 'tp3']:
                self.active_trades[signal['symbol']][f'{tp_name}_reached'] = False
            self.active_trades[signal['symbol']]['sl_reached'] = False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
            self.save_state()
            
    def save_signals_log(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
            serializable_signals = [self.convert_to_serializable(signal) for signal in self.signals_found]
            serializable_stats = self.convert_to_serializable(self.analysis_stats)
                
            with open('signals_log.json', 'w', encoding='utf-8') as f:
                json.dump({
                    'signals': serializable_signals,
                    'stats': serializable_stats,
                    'generated_at': datetime.now().isoformat()
                }, f, ensure_ascii=False, indent=2, default=str)
                
            # –°–æ–∑–¥–∞–µ–º CSV –ª–æ–≥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            if self.signals_found:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è CSV
                csv_data = []
                for signal in self.signals_found:
                    csv_signal = self.convert_to_serializable(signal).copy()
                    csv_data.append(csv_signal)
                df = pd.DataFrame(csv_data)
                df.to_csv('signals_log.csv', index=False)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        
    def process_symbol(self, symbol):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            data_dict = self.fetch_ohlcv_multitimeframe(symbol)
            if not data_dict:
                return None
                
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            for tf in self.timeframes:
                if tf in data_dict and data_dict[tf] is not None:
                    data_dict[tf] = self.calculate_advanced_indicators(data_dict[tf], tf)
            
            # –ú—É–ª—å—Ç–∏–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
            multitimeframe_analysis = self.calculate_multitimeframe_analysis(data_dict)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ)
            if symbol not in self.active_trades:
                signal = self.generate_signal(symbol, data_dict, multitimeframe_analysis)
                return signal
            else:
                logger.debug(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω {symbol} - —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
            return None
            
    def run_analysis_cycle(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        cycle_start_time = datetime.now()
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ {len(self.symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä...")
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
        signals = []
        processed_count = 0
        
        for symbol in self.symbols:
            try:
                signal = self.process_symbol(symbol)
                if signal:
                    signals.append(signal)
                    # –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏
                    self.send_signal(signal)
                processed_count += 1
                self.analysis_stats['total_analyzed'] += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
                if processed_count % 5 == 0:
                    time.sleep(1)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        self.check_active_trades()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.save_signals_log()
        
        cycle_duration = datetime.now() - cycle_start_time
        logger.info(f"‚úÖ –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration.total_seconds():.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–∞—Ä. –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞
        self.save_state()
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–∞...")
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(self.symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä –Ω–∞ {len(self.timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö")
        logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: {self.state_file}")
        logger.info(f"üìà SHORT —Å–∏–≥–Ω–∞–ª—ã: {'–í–ö–õ–Æ–ß–ï–ù–´' if self.risk_params['use_short_signals'] else '–í–´–ö–õ–Æ–ß–ï–ù–´'}")
        logger.info(f"üéØ –¶–µ–ª—å: –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (–¥–æ 24—á), –Ω–æ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è")
        
        if self.active_trades:
            logger.info(f"üì• –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(self.active_trades)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
            for symbol, trade in self.active_trades.items():
                logger.info(f"   üìå {symbol} | {trade['signal_type']} | –í—Ö–æ–¥: {trade['entry_price']}")
        
        logger.info("üïí –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
        
        cycle_count = 0
        while True:
            try:
                cycle_count += 1
                logger.info(f"üîÑ –¶–∏–∫–ª #{cycle_count}")
                
                self.run_analysis_cycle()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (5 –º–∏–Ω—É—Ç)
                logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ (5 –º–∏–Ω—É—Ç)...")
                time.sleep(300)  # 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
                
            except KeyboardInterrupt:
                logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
                self.save_state()
                self.save_signals_log()
                logger.info("üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.save_state()
                time.sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –±–æ—Ç–∞
    bot = FuturesCryptoTradingBot()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.run()