import ccxt
import pandas as pd
import numpy as np
import ta
from datetime import datetime, timedelta
import time
import logging
import json
import os
from collections import defaultdict
import warnings
import shutil
import psutil
warnings.filterwarnings('ignore')
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('crypto_futures_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FuturesCryptoTradingBot:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤ Binance
        self.exchange = ccxt.binance({
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future',  # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
                'adjustForTimeDifference': True
            }
        })
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        self.timeframes = ['5m', '15m', '1h', '4h']
        # –°–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä (30+ —Ç–æ–∫–µ–Ω–æ–≤) - MATIC/USDT —É–¥–∞–ª–µ–Ω
        self.symbols = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT',
            'ADA/USDT', 'DOGE/USDT', 'DOT/USDT', 'AVAX/USDT', 'LINK/USDT',
            'UNI/USDT', 'LTC/USDT', 'ATOM/USDT', 'ETC/USDT', 'FIL/USDT',
            'TRX/USDT', 'VET/USDT', 'XLM/USDT', 'ICP/USDT', 'FTM/USDT',
            'HBAR/USDT', 'NEAR/USDT', 'ALGO/USDT', 'EGLD/USDT', 'FLOW/USDT',
            'SAND/USDT', 'MANA/USDT', 'AXS/USDT', 'GALA/USDT', 'APE/USDT',
            'CHZ/USDT', 'ENJ/USDT', 'THETA/USDT', 'GMT/USDT'
        ]
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        self.active_trades = {}
        self.signal_history = defaultdict(list)
        self.signals_found = []
        self.analysis_stats = {
            'total_analyzed': 0,
            'signals_generated': 0,
            'start_time': datetime.now().isoformat()
        }
        self.signal_stats = {}
        self.backtest_results = {}
        self.performance_metrics = {}
        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
        self.data_cache = {}
        self.cache_expiry = 300  # 5 –º–∏–Ω—É—Ç
        # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.state_file = 'bot_state.json'
        self.analytics_file = 'analytics_data.json'
        self.backtest_file = 'backtest_results.json'
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.risk_params = {
            'min_confidence_threshold': 45,  # –õ–∏–±–µ—Ä–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            'min_volume_filter': 300000,
            'min_rr_ratio': 1.2,
            'use_short_signals': True
        }
        # –ö–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
        self.correlated_pairs = {
            'BTC/USDT': ['ETH/USDT', 'BNB/USDT'],
            'ETH/USDT': ['BTC/USDT', 'BNB/USDT'],
            'SOL/USDT': ['AVAX/USDT'],
            'ADA/USDT': ['DOT/USDT'],
            'DOT/USDT': ['ADA/USDT']
        }
        # –°–µ–∫—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤
        self.asset_sectors = {
            'BTC/USDT': 'Bitcoin',
            'ETH/USDT': 'Ethereum',
            'BNB/USDT': 'Exchange',
            'SOL/USDT': 'Smart Contracts',
            'ADA/USDT': 'Smart Contracts',
            'DOGE/USDT': 'Meme',
            'DOT/USDT': 'Smart Contracts',
            'AVAX/USDT': 'Smart Contracts',
            'LINK/USDT': 'Oracle',
            'UNI/USDT': 'DEX',
            'LTC/USDT': 'Payments',
            'ATOM/USDT': 'Interoperability',
            'ETC/USDT': 'Payments',
            'FIL/USDT': 'Storage',
            'TRX/USDT': 'Entertainment',
            'VET/USDT': 'Supply Chain',
            'XLM/USDT': 'Payments',
            'ICP/USDT': 'Infrastructure',
            'FTM/USDT': 'Smart Contracts',
            'HBAR/USDT': 'Payments',
            'NEAR/USDT': 'Smart Contracts',
            'ALGO/USDT': 'Smart Contracts',
            'EGLD/USDT': 'Payments',
            'FLOW/USDT': 'NFT',
            'SAND/USDT': 'Metaverse',
            'MANA/USDT': 'Metaverse',
            'AXS/USDT': 'Gaming',
            'GALA/USDT': 'Gaming',
            'APE/USDT': 'NFT',
            'CHZ/USDT': 'Sports',
            'ENJ/USDT': 'NFT',
            'THETA/USDT': 'Video',
            'GMT/USDT': 'Social'
        }
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_state()
        self.load_market_data()

    def load_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.state_file):
                if os.path.getsize(self.state_file) == 0:
                    logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è {self.state_file} –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
                    self.create_default_state_file()
                    return
                with open(self.state_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if not content:
                        logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è {self.state_file} –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
                        self.create_default_state_file()
                        return
                    state = json.loads(content)
                if 'active_trades' in state:
                    self.active_trades = self.convert_to_serializable(state['active_trades'])
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(self.active_trades)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                if 'signal_history' in state:
                    raw_history = state['signal_history']
                    self.signal_history = defaultdict(list)
                    for symbol, signals in raw_history.items():
                        self.signal_history[symbol] = [self.convert_to_serializable(signal) for signal in signals]
                    total_signals = sum(len(signals) for signals in self.signal_history.values())
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
                if 'signals_found' in state:
                    self.signals_found = [self.convert_to_serializable(signal) for signal in state['signals_found']]
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(self.signals_found)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                if 'analysis_stats' in state:
                    self.analysis_stats = self.convert_to_serializable(state['analysis_stats'])
                    logger.info("üì• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            else:
                logger.info("üÜï –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ - —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.create_default_state_file()
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ JSON –≤ —Ñ–∞–π–ª–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            logger.warning("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            self.create_default_state_file()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            logger.warning("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            self.create_default_state_file()

    def create_default_state_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            default_state = {
                'active_trades': {},
                'signal_history': {},
                'signals_found': [],
                'analysis_stats': {
                    'total_analyzed': 0,
                    'signals_generated': 0,
                    'start_time': datetime.now().isoformat()
                },
                'created_at': datetime.now().isoformat()
            }
            with open(self.state_file, 'w', encoding='utf-8') as f:
                json.dump(default_state, f, ensure_ascii=False, indent=2, default=str)
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def convert_to_serializable(self, obj):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if isinstance(obj, dict):
            return {key: self.convert_to_serializable(value) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self.convert_to_serializable(item) for item in obj]
        elif isinstance(obj, (np.integer, np.floating)):
            return float(obj)
        elif isinstance(obj, np.bool_):
            return bool(obj)
        elif pd.api.types.is_integer_dtype(type(obj)) or pd.api.types.is_float_dtype(type(obj)):
            return float(obj)
        elif isinstance(obj, pd.Timestamp):
            return obj.isoformat()
        elif isinstance(obj, datetime):
            return obj.isoformat()
        else:
            return obj

    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        try:
            state = {
                'active_trades': self.convert_to_serializable(self.active_trades),
                'signal_history': self.convert_to_serializable(dict(self.signal_history)),
                'signals_found': self.convert_to_serializable(self.signals_found),
                'analysis_stats': self.convert_to_serializable(self.analysis_stats),
                'saved_at': datetime.now().isoformat()
            }
            temp_file = self.state_file + '.tmp'
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(state, f, ensure_ascii=False, indent=2, default=str)
            os.replace(temp_file, self.state_file)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def load_market_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–∞—Ö"""
        try:
            markets = self.exchange.load_markets()
            futures_symbols = [symbol for symbol in self.symbols if symbol in markets]
            self.symbols = futures_symbols
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(markets)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤")
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–∞—Ä—ã: {len(self.symbols)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: {e}")

    def fetch_ohlcv_with_cache(self, symbol, timeframe, limit=100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"{symbol}_{timeframe}_{limit}"
        current_time = time.time()
        if cache_key in self.data_cache:
            cached_data, timestamp = self.data_cache[cache_key]
            if current_time - timestamp < self.cache_expiry:
                return cached_data
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        if len(data) > 0:
            df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            self.data_cache[cache_key] = (df, current_time)
            return df
        else:
            self.data_cache[cache_key] = (None, current_time)
            return None

    def fetch_ohlcv_multitimeframe(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º"""
        data = {}
        try:
            for tf in self.timeframes:
                limit = 200 if tf in ['5m', '15m'] else 100
                df = self.fetch_ohlcv_with_cache(symbol, tf, limit=limit)
                data[tf] = df
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None
        return data

    def calculate_advanced_indicators(self, df, timeframe):
        """–†–∞—Å—á–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        if df is None or len(df) < 20:
            return None
        try:
            # EMA
            df['ema_9'] = ta.trend.EMAIndicator(df['close'], window=9).ema_indicator()
            df['ema_21'] = ta.trend.EMAIndicator(df['close'], window=21).ema_indicator()
            df['ema_50'] = ta.trend.EMAIndicator(df['close'], window=50).ema_indicator()
            # MACD
            df['macd'] = df['ema_9'] - df['ema_21']
            df['macd_signal'] = df['macd'].rolling(window=9).mean()
            df['macd_histogram'] = df['macd'] - df['macd_signal']
            # RSI
            df['rsi'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi()
            df['rsi_sma'] = df['rsi'].rolling(window=14).mean()
            # –°—Ç–æ—Ö–∞—Å—Ç–∏–∫
            stoch = ta.momentum.StochasticOscillator(df['high'], df['low'], df['close'], window=14, smooth_window=3)
            df['stoch_k'] = stoch.stoch()
            df['stoch_d'] = stoch.stoch_signal()
            # –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä
            bb = ta.volatility.BollingerBands(df['close'], window=20, window_dev=2)
            df['bb_upper'] = bb.bollinger_hband()
            df['bb_middle'] = bb.bollinger_mavg()
            df['bb_lower'] = bb.bollinger_lband()
            df['bb_width'] = (df['bb_upper'] - df['bb_lower']) / (df['bb_middle'] + 0.0001)
            df['bb_position'] = (df['close'] - df['bb_lower']) / (df['bb_upper'] - df['bb_lower'] + 0.0001)
            # ATR
            df['atr'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range()
            # –û–±—ä–µ–º
            df['volume_ema'] = ta.trend.EMAIndicator(df['volume'], window=20).ema_indicator()
            df['volume_ratio'] = (df['volume'] / (df['volume_ema'] + 0.0001))
            # –ú–æ–º–µ–Ω—Ç—É–º
            df['roc_1'] = df['close'].pct_change(1)
            df['roc_3'] = df['close'].pct_change(3)
            df['roc_7'] = df['close'].pct_change(7)
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π
            df['candle_body'] = abs(df['close'] - df['open'])
            df['candle_ratio'] = df['candle_body'] / (df['high'] - df['low'] + 0.0001)
            # –¢—Ä–µ–Ω–¥
            df['price_trend_20'] = (df['close'] - df['close'].shift(20)) / (df['close'].shift(20) + 0.0001)
            df['price_trend_50'] = (df['close'] - df['close'].shift(50)) / (df['close'].shift(50) + 0.0001)
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            df['volatility'] = df['close'].pct_change().rolling(window=14).std() * np.sqrt(365)
            # –°–≤–∏–Ω–≥ —Ö–∞–π/–ª–æ—É
            df['swing_high'] = df['high'][
                (df['high'] > df['high'].shift(1)) & 
                (df['high'] > df['high'].shift(-1)) & 
                (df['high'] > df['high'].shift(2)) & 
                (df['high'] > df['high'].shift(-2))
            ]
            df['swing_low'] = df['low'][
                (df['low'] < df['low'].shift(1)) & 
                (df['low'] < df['low'].shift(-1)) & 
                (df['low'] < df['low'].shift(2)) & 
                (df['low'] < df['low'].shift(-2))
            ]
            # –ü–∏–≤–æ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏
            df['pivot'] = (df['high'] + df['low'] + df['close']) / 3
            df['pivot_r1'] = 2 * df['pivot'] - df['low']
            df['pivot_s1'] = 2 * df['pivot'] - df['high']
            # –ü–∏–Ω–±–∞—Ä—ã –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            df['body'] = abs(df['close'] - df['open'])
            df['upper_wick'] = df['high'] - df[['open', 'close']].max(axis=1)
            df['lower_wick'] = df[['open', 'close']].min(axis=1) - df['low']
            df['wick_ratio'] = df['body'] / (df['high'] - df['low'] + 0.0001)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df
        return df

    def detect_advanced_candlestick_patterns(self, df):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–≤–µ—á–µ–π"""
        if df is None or len(df) < 10:
            return {}
        patterns = {}
        try:
            # PINBAR (–ø–∏–Ω—Ü–µ—Ç)
            if len(df) >= 2:
                current = df.iloc[-1]
                prev = df.iloc[-2]
                body = abs(current['close'] - current['open'])
                total_range = current['high'] - current['low']
                upper_wick = current['high'] - max(current['close'], current['open'])
                lower_wick = min(current['close'], current['open']) - current['low']
                # –ü–∏–Ω–±–∞—Ä –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–µ/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–∏
                if total_range > 0 and body/total_range < 0.3:  # –ú–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ
                    if upper_wick > body * 2 and lower_wick < body * 0.5:  # –î–ª–∏–Ω–Ω—ã–π –≤–µ—Ä—Ö–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
                        patterns['pinbar_bearish'] = True
                    elif lower_wick > body * 2 and upper_wick < body * 0.5:  # –î–ª–∏–Ω–Ω—ã–π –Ω–∏–∂–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
                        patterns['pinbar_bullish'] = True
            # DOJI
            if len(df) >= 1:
                current = df.iloc[-1]
                body = abs(current['close'] - current['open'])
                total_range = current['high'] - current['low']
                if total_range > 0 and body/total_range < 0.1:
                    patterns['doji'] = True
            # SPINNING TOP
            if len(df) >= 1:
                current = df.iloc[-1]
                body = abs(current['close'] - current['open'])
                total_range = current['high'] - current['low']
                if total_range > 0 and 0.1 <= body/total_range <= 0.3:
                    patterns['spinning_top'] = True
            # THREE WHITE SOLDIERS (—Ç—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞)
            if len(df) >= 3:
                soldier1 = df.iloc[-3]
                soldier2 = df.iloc[-2]
                soldier3 = df.iloc[-1]
                if (soldier1['close'] > soldier1['open'] and  # –í—Å–µ –∑–µ–ª–µ–Ω—ã–µ
                    soldier2['close'] > soldier2['open'] and
                    soldier3['close'] > soldier3['open'] and
                    soldier3['close'] > soldier2['close'] > soldier1['close'] and  # –ö–∞–∂–¥–∞—è –≤—ã—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                    soldier2['open'] > soldier1['open'] and soldier3['open'] > soldier2['open']):  # –ö–∞–∂–¥–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤—ã—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                    patterns['three_white_soldiers'] = True
            # THREE BLACK CROWS (—Ç—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞)
            if len(df) >= 3:
                crow1 = df.iloc[-3]
                crow2 = df.iloc[-2]
                crow3 = df.iloc[-1]
                if (crow1['close'] < crow1['open'] and  # –í—Å–µ –∫—Ä–∞—Å–Ω—ã–µ
                    crow2['close'] < crow2['open'] and
                    crow3['close'] < crow3['open'] and
                    crow3['close'] < crow2['close'] < crow1['close'] and  # –ö–∞–∂–¥–∞—è –Ω–∏–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                    crow2['open'] < crow1['open'] and crow3['open'] < crow2['open']):  # –ö–∞–∂–¥–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∏–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                    patterns['three_black_crows'] = True
            # MORNING STAR (—É—Ç—Ä–µ–Ω–Ω—è—è –∑–≤–µ–∑–¥–∞)
            if len(df) >= 3:
                first = df.iloc[-3]  # –ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞
                second = df.iloc[-2]  # –ú–∞–ª–µ–Ω—å–∫–∞—è —Å–≤–µ—á–∞
                third = df.iloc[-1]   # –ó–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞
                body_first = abs(first['close'] - first['open'])
                body_second = abs(second['close'] - second['open'])
                body_third = abs(third['close'] - third['open'])
                if (first['close'] < first['open'] and  # –ü–µ—Ä–≤–∞—è –∫—Ä–∞—Å–Ω–∞—è
                    body_second < body_first * 0.5 and  # –í—Ç–æ—Ä–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è
                    third['close'] > third['open'] and   # –¢—Ä–µ—Ç—å—è –∑–µ–ª–µ–Ω–∞—è
                    third['close'] > first['open']):     # –¢—Ä–µ—Ç—å—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤—ã—à–µ –ø–µ—Ä–≤–æ–π
                    patterns['morning_star'] = True
            # EVENING STAR (–≤–µ—á–µ—Ä–Ω—è—è –∑–≤–µ–∑–¥–∞)
            if len(df) >= 3:
                first = df.iloc[-3]  # –ó–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞
                second = df.iloc[-2]  # –ú–∞–ª–µ–Ω—å–∫–∞—è —Å–≤–µ—á–∞
                third = df.iloc[-1]   # –ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞
                body_first = abs(first['close'] - first['open'])
                body_second = abs(second['close'] - second['open'])
                body_third = abs(third['close'] - third['open'])
                if (first['close'] > first['open'] and  # –ü–µ—Ä–≤–∞—è –∑–µ–ª–µ–Ω–∞—è
                    body_second < body_first * 0.5 and  # –í—Ç–æ—Ä–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è
                    third['close'] < third['open'] and   # –¢—Ä–µ—Ç—å—è –∫—Ä–∞—Å–Ω–∞—è
                    third['close'] < first['open']):     # –¢—Ä–µ—Ç—å—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∏–∂–µ –ø–µ—Ä–≤–æ–π
                    patterns['evening_star'] = True
            # HARAMI (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–µ—á–∞)
            if len(df) >= 2:
                parent = df.iloc[-2]  # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å–≤–µ—á–∞
                child = df.iloc[-1]   # –î–æ—á–µ—Ä–Ω—è—è —Å–≤–µ—á–∞
                if (parent['close'] > parent['open'] and  # –†–æ–¥–∏—Ç–µ–ª—å –∑–µ–ª–µ–Ω—ã–π
                    child['close'] < child['open'] and    # –î–æ—á–µ—Ä–Ω—è—è –∫—Ä–∞—Å–Ω–∞—è
                    child['high'] < parent['high'] and    # –î–æ—á–µ—Ä–Ω—è—è –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
                    child['low'] > parent['low']):
                    patterns['bearish_harami'] = True
                elif (parent['close'] < parent['open'] and  # –†–æ–¥–∏—Ç–µ–ª—å –∫—Ä–∞—Å–Ω—ã–π
                      child['close'] > child['open'] and    # –î–æ—á–µ—Ä–Ω—è—è –∑–µ–ª–µ–Ω–∞—è
                      child['high'] < parent['high'] and    # –î–æ—á–µ—Ä–Ω—è—è –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
                      child['low'] > parent['low']):
                    patterns['bullish_harami'] = True
            # ENGULFING (–ø–æ–≥–ª–æ—â–µ–Ω–∏–µ)
            if len(df) >= 2:
                first = df.iloc[-2]  # –ü–µ—Ä–≤–∞—è —Å–≤–µ—á–∞
                second = df.iloc[-1]  # –í—Ç–æ—Ä–∞—è —Å–≤–µ—á–∞
                # BULLISH ENGULFING (–±—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ)
                if (first['close'] < first['open'] and  # –ü–µ—Ä–≤–∞—è –∫—Ä–∞—Å–Ω–∞—è
                    second['close'] > second['open'] and  # –í—Ç–æ—Ä–∞—è –∑–µ–ª–µ–Ω–∞—è
                    second['close'] > first['open'] and    # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Ç–æ—Ä–æ–π –≤—ã—à–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–π
                    second['open'] < first['close']):      # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—Ç–æ—Ä–æ–π –Ω–∏–∂–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–π
                    patterns['bullish_engulfing'] = True
                # BEARISH ENGULFING (–º–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ)
                elif (first['close'] > first['open'] and  # –ü–µ—Ä–≤–∞—è –∑–µ–ª–µ–Ω–∞—è
                      second['close'] < second['open'] and  # –í—Ç–æ—Ä–∞—è –∫—Ä–∞—Å–Ω–∞—è
                      second['close'] < first['open'] and   # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Ç–æ—Ä–æ–π –Ω–∏–∂–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–π
                      second['open'] > first['close']):     # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—Ç–æ—Ä–æ–π –≤—ã—à–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–π
                    patterns['bearish_engulfing'] = True
            # HAMMER (–º–æ–ª–æ—Ç)
            if len(df) >= 1:
                current = df.iloc[-1]
                body = abs(current['close'] - current['open'])
                upper_wick = current['high'] - max(current['close'], current['open'])
                lower_wick = min(current['close'], current['open']) - current['low']
                if (lower_wick > body * 2 and  # –î–ª–∏–Ω–Ω—ã–π –Ω–∏–∂–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
                    upper_wick < body * 0.5 and  # –ö–æ—Ä–æ—Ç–∫–∏–π –≤–µ—Ä—Ö–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
                    body > 0):
                    patterns['hammer'] = True
            # SHOOTING STAR (–ø–∞–¥–∞—é—â–∞—è –∑–≤–µ–∑–¥–∞)
            if len(df) >= 1:
                current = df.iloc[-1]
                body = abs(current['close'] - current['open'])
                upper_wick = current['high'] - max(current['close'], current['open'])
                lower_wick = min(current['close'], current['open']) - current['low']
                if (upper_wick > body * 2 and  # –î–ª–∏–Ω–Ω—ã–π –≤–µ—Ä—Ö–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
                    lower_wick < body * 0.5 and  # –ö–æ—Ä–æ—Ç–∫–∏–π –Ω–∏–∂–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
                    body > 0):
                    patterns['shooting_star'] = True
            # TWEZZER TOPS/BOTTOMS (—â–∏–ø—Ü—ã)
            if len(df) >= 2:
                first = df.iloc[-2]
                second = df.iloc[-1]
                # TWEZZER BOTTOMS
                if (abs(first['low'] - second['low']) < (first['high'] - first['low']) * 0.05 and  # –ü–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–∏–Ω–∏–º—É–º—ã
                    first['close'] < first['open'] and second['close'] > second['open']):  # –ü–µ—Ä–≤–∞—è –∫—Ä–∞—Å–Ω–∞—è, –≤—Ç–æ—Ä–∞—è –∑–µ–ª–µ–Ω–∞—è
                    patterns['tweezer_bottoms'] = True
                # TWEZZER TOPS
                elif (abs(first['high'] - second['high']) < (first['high'] - first['low']) * 0.05 and  # –ü–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–∞–∫—Å–∏–º—É–º—ã
                      first['close'] > first['open'] and second['close'] < second['open']):  # –ü–µ—Ä–≤–∞—è –∑–µ–ª–µ–Ω–∞—è, –≤—Ç–æ—Ä–∞—è –∫—Ä–∞—Å–Ω–∞—è
                    patterns['tweezer_tops'] = True
            # GAP UP/DOWN (–≥—ç–ø—ã)
            if len(df) >= 2:
                prev = df.iloc[-2]
                current = df.iloc[-1]
                # GAP UP
                if current['low'] > prev['high']:
                    patterns['gap_up'] = True
                # GAP DOWN
                elif current['high'] < prev['low']:
                    patterns['gap_down'] = True
            # INSIDE BAR (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–µ—á–∞)
            if len(df) >= 2:
                parent = df.iloc[-2]
                child = df.iloc[-1]
                if (child['high'] < parent['high'] and  # –î–æ—á–µ—Ä–Ω—è—è –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
                    child['low'] > parent['low']):
                    patterns['inside_bar'] = True
            # OUTSIDE BAR (–≤–Ω–µ—à–Ω—è—è —Å–≤–µ—á–∞)
            if len(df) >= 2:
                parent = df.iloc[-2]
                child = df.iloc[-1]
                if (child['high'] > parent['high'] and  # –î–æ—á–µ—Ä–Ω—è—è –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é
                    child['low'] < parent['low']):
                    patterns['outside_bar'] = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
        return patterns

    def calculate_dynamic_levels(self, symbol, data_dict, signal_type):
        """–†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö TP –∏ SL –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ä–æ—Å—Ç–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        if not data_dict or '1h' not in data_dict:
            return self.calculate_basic_levels(symbol, data_dict, signal_type)
        df_1h = data_dict['1h']
        if df_1h is None or len(df_1h) < 20:
            return self.calculate_basic_levels(symbol, data_dict, signal_type)
        try:
            current_price = float(df_1h['close'].iloc[-1])
            atr = float(df_1h['atr'].iloc[-1]) if 'atr' in df_1h.columns and not pd.isna(df_1h['atr'].iloc[-1]) else current_price * 0.02
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ä–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            rsi = float(df_1h['rsi'].iloc[-1]) if not pd.isna(df_1h['rsi'].iloc[-1]) else 50
            bb_position = float(df_1h['bb_position'].iloc[-1]) if not pd.isna(df_1h['bb_position'].iloc[-1]) else 0.5
            momentum_1h = float(df_1h['roc_7'].iloc[-1]) if not pd.isna(df_1h['roc_7'].iloc[-1]) else 0
            volume_ratio = float(df_1h['volume_ratio'].iloc[-1]) if not pd.isna(df_1h['volume_ratio'].iloc[-1]) else 1
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ —Å—Ç–∞—Ä—à–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
            trend_strength_4h = 0
            trend_strength_1h = 0
            if '4h' in data_dict and data_dict['4h'] is not None and len(data_dict['4h']) > 20:
                df_4h = data_dict['4h']
                trend_4h = (df_4h['close'].iloc[-1] - df_4h['close'].iloc[-20]) / df_4h['close'].iloc[-20]
                trend_strength_4h = float(trend_4h) if not pd.isna(trend_4h) else 0
            if '1h' in data_dict and data_dict['1h'] is not None and len(data_dict['1h']) > 20:
                df_1h_local = data_dict['1h']
                trend_1h = (df_1h_local['close'].iloc[-1] - df_1h_local['close'].iloc[-20]) / df_1h_local['close'].iloc[-20]
                trend_strength_1h = float(trend_1h) if not pd.isna(trend_1h) else 0
            # –†–∞—Å—á–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            potential_multiplier = 1.0
            if signal_type == 'LONG':
                # RSI —Ñ–∞–∫—Ç–æ—Ä (—á–µ–º –Ω–∏–∂–µ RSI, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞)
                rsi_factor = max(0.7, min(1.5, (70 - rsi) / 30))  # 0.7 - 1.5
                # BB —Ñ–∞–∫—Ç–æ—Ä (–ø–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞)
                bb_factor = max(0.7, min(1.5, (1.0 - bb_position) * 1.8))  # 0.7 - 1.5
                # –ú–æ–º–µ–Ω—Ç—É–º —Ñ–∞–∫—Ç–æ—Ä
                momentum_factor = max(0.8, min(1.3, 1.0 + momentum_1h * 10))  # 0.8 - 1.3
                # –¢—Ä–µ–Ω–¥ —Ñ–∞–∫—Ç–æ—Ä
                trend_factor = max(0.8, min(1.3, 1.0 + (trend_strength_4h + trend_strength_1h) * 5))  # 0.8 - 1.3
                # –û–±—ä–µ–º —Ñ–∞–∫—Ç–æ—Ä
                volume_factor = max(0.9, min(1.2, volume_ratio * 0.3 + 0.8))  # 0.9 - 1.2
                potential_multiplier = (rsi_factor + bb_factor + momentum_factor + trend_factor + volume_factor) / 5
                potential_multiplier = max(0.8, min(1.5, potential_multiplier))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0.8 - 1.5
            else:  # SHORT
                # RSI —Ñ–∞–∫—Ç–æ—Ä (—á–µ–º –≤—ã—à–µ RSI, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–∞–¥–µ–Ω–∏—è)
                rsi_factor = max(0.7, min(1.5, (rsi - 30) / 30))  # 0.7 - 1.5
                # BB —Ñ–∞–∫—Ç–æ—Ä (–ø–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞)
                bb_factor = max(0.7, min(1.5, bb_position * 1.8))  # 0.7 - 1.5
                # –ú–æ–º–µ–Ω—Ç—É–º —Ñ–∞–∫—Ç–æ—Ä
                momentum_factor = max(0.8, min(1.3, 1.0 - momentum_1h * 10))  # 0.8 - 1.3
                # –¢—Ä–µ–Ω–¥ —Ñ–∞–∫—Ç–æ—Ä
                trend_factor = max(0.8, min(1.3, 1.0 - (trend_strength_4h + trend_strength_1h) * 5))  # 0.8 - 1.3
                # –û–±—ä–µ–º —Ñ–∞–∫—Ç–æ—Ä
                volume_factor = max(0.9, min(1.2, volume_ratio * 0.3 + 0.8))  # 0.9 - 1.2
                potential_multiplier = (rsi_factor + bb_factor + momentum_factor + trend_factor + volume_factor) / 5
                potential_multiplier = max(0.8, min(1.5, potential_multiplier))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0.8 - 1.5
            # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π —Å —É—á–µ—Ç–æ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
            base_sl_distance = atr * 1.3
            base_tp1_distance = atr * 2.0
            base_tp2_distance = atr * 3.5
            base_tp3_distance = atr * 5.0
            if signal_type == 'LONG':
                sl = current_price - (base_sl_distance * 0.9)  # SL –Ω–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∞–µ–º
                tp1 = current_price + (base_tp1_distance * potential_multiplier)
                tp2 = current_price + (base_tp2_distance * potential_multiplier * 1.1)  # TP2 —á—É—Ç—å –±–æ–ª—å—à–µ
                tp3 = current_price + (base_tp3_distance * potential_multiplier * 1.2)  # TP3 –µ—â–µ –±–æ–ª—å—à–µ
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                resistance_levels = self.find_resistance_levels(df_1h, current_price)
                if resistance_levels:
                    nearest_resistance = min(resistance_levels)
                    if tp3 > nearest_resistance * 0.99:  # –ù–µ –≤—ã—à–µ —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                        tp3 = nearest_resistance * 0.99
                    if tp2 > nearest_resistance * 0.995:
                        tp2 = nearest_resistance * 0.995
                    if tp1 > nearest_resistance * 0.998:
                        tp1 = nearest_resistance * 0.998
            else:  # SHORT
                sl = current_price + (base_sl_distance * 0.9)  # SL –Ω–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∞–µ–º
                tp1 = current_price - (base_tp1_distance * potential_multiplier)
                tp2 = current_price - (base_tp2_distance * potential_multiplier * 1.1)  # TP2 —á—É—Ç—å –±–æ–ª—å—à–µ
                tp3 = current_price - (base_tp3_distance * potential_multiplier * 1.2)  # TP3 –µ—â–µ –±–æ–ª—å—à–µ
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                support_levels = self.find_support_levels(df_1h, current_price)
                if support_levels:
                    nearest_support = max(support_levels)
                    if tp3 < nearest_support * 1.01:  # –ù–µ –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                        tp3 = nearest_support * 1.01
                    if tp2 < nearest_support * 1.005:
                        tp2 = nearest_support * 1.005
                    if tp1 < nearest_support * 1.002:
                        tp1 = nearest_support * 1.002
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω–µ–π
            risk_reward_ratio = abs(tp3 - current_price) / (abs(current_price - sl) + 0.0001)
            if signal_type == 'LONG' and sl < current_price and tp3 > current_price and risk_reward_ratio > 1.2:
                valid = True
            elif signal_type == 'SHORT' and sl > current_price and tp3 < current_price and risk_reward_ratio > 1.2:
                valid = True
            else:
                valid = False
            if valid:
                return round(float(sl), 8), round(float(tp1), 8), round(float(tp2), 8), round(float(tp3), 8)
            else:
                return self.calculate_basic_levels(symbol, data_dict, signal_type)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è {symbol}: {e}")
            return self.calculate_basic_levels(symbol, data_dict, signal_type)

    def find_resistance_levels(self, df, current_price):
        """–ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        if df is None or len(df) < 20:
            return []
        try:
            # –°–≤–∏–Ω–≥ —Ö–∞–π
            swing_highs = df['swing_high'].dropna().tail(10)
            resistance_from_swing = list(swing_highs.values) if len(swing_highs) > 0 else []
            # –ü–∏–≤–æ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
            pivot_resistance = []
            if 'pivot_r1' in df.columns:
                recent_pivots = df['pivot_r1'].tail(5).dropna()
                pivot_resistance = [p for p in recent_pivots if p > current_price]
            # –£—Ä–æ–≤–Ω–∏ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –±–∞—Ä–æ–≤
            recent_highs = df['high'].tail(50)
            dynamic_resistance = [h for h in recent_highs if h > current_price * 1.01]  # –ù–∞ 1% –≤—ã—à–µ
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
            all_resistance = resistance_from_swing + pivot_resistance + dynamic_resistance
            return sorted(list(set(all_resistance))) if all_resistance else []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: {e}")
            return []

    def find_support_levels(self, df, current_price):
        """–ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        if df is None or len(df) < 20:
            return []
        try:
            # –°–≤–∏–Ω–≥ –ª–æ—É
            swing_lows = df['swing_low'].dropna().tail(10)
            support_from_swing = list(swing_lows.values) if len(swing_lows) > 0 else []
            # –ü–∏–≤–æ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
            pivot_support = []
            if 'pivot_s1' in df.columns:
                recent_pivots = df['pivot_s1'].tail(5).dropna()
                pivot_support = [p for p in recent_pivots if p < current_price]
            # –£—Ä–æ–≤–Ω–∏ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –±–∞—Ä–æ–≤
            recent_lows = df['low'].tail(50)
            dynamic_support = [l for l in recent_lows if l < current_price * 0.99]  # –ù–∞ 1% –Ω–∏–∂–µ
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
            all_support = support_from_swing + pivot_support + dynamic_support
            return sorted(list(set(all_support)), reverse=True) if all_support else []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
            return []

    def calculate_basic_levels(self, symbol, data_dict, signal_type):
        """–ë–∞–∑–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫"""
        try:
            if not data_dict or '1h' not in data_dict or data_dict['1h'] is None:
                current_price = 1000.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
            else:
                current_price = float(data_dict['1h']['close'].iloc[-1])
            atr = current_price * 0.015  # 1.5% –æ—Ç —Ü–µ–Ω—ã
            if signal_type == 'LONG':
                sl = current_price - atr * 1.2
                tp1 = current_price + atr * 1.8
                tp2 = current_price + atr * 3.0
                tp3 = current_price + atr * 4.5
            else:
                sl = current_price + atr * 1.2
                tp1 = current_price - atr * 1.8
                tp2 = current_price - atr * 3.0
                tp3 = current_price - atr * 4.5
            return round(float(sl), 8), round(float(tp1), 8), round(float(tp2), 8), round(float(tp3), 8)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è {symbol}: {e}")
            # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π fallback
            current_price = 1000.0
            if signal_type == 'LONG':
                return 990.0, 1005.0, 1015.0, 1025.0
            else:
                return 1010.0, 995.0, 985.0, 975.0

    # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏
    def calculate_multitimeframe_analysis(self, data_dict):
        """
        –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ None.
        TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞.
        """
        # logger.debug("calculate_multitimeframe_analysis –≤—ã–∑–≤–∞–Ω, –Ω–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å data_dict, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
        # –ò–ª–∏ None, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è generate_signal.
        return {} # –ò–ª–∏ return None –∏–ª–∏ return data_dict –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ generate_signal

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–µ—Ç–æ–¥–∞ generate_signal
    def generate_signal(self, symbol, data_dict):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏"""
        if not data_dict or '1h' not in data_dict:
            logger.debug(f"‚ùå {symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö 1h")
            return None
        df_1h = data_dict['1h']
        if df_1h is None or len(df_1h) < 20:
            logger.debug(f"‚ùå {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({len(df_1h) if df_1h is not None else 0})")
            return None
        try:
            current_price = float(df_1h['close'].iloc[-1])
            atr = float(df_1h['atr'].iloc[-1]) if 'atr' in df_1h.columns and not pd.isna(df_1h['atr'].iloc[-1]) else current_price * 0.02
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            rsi = float(df_1h['rsi'].iloc[-1]) if not pd.isna(df_1h['rsi'].iloc[-1]) else 50
            stoch_k = float(df_1h['stoch_k'].iloc[-1]) if not pd.isna(df_1h['stoch_k'].iloc[-1]) else 50
            stoch_d = float(df_1h['stoch_d'].iloc[-1]) if not pd.isna(df_1h['stoch_d'].iloc[-1]) else 50
            macd = float(df_1h['macd'].iloc[-1]) if not pd.isna(df_1h['macd'].iloc[-1]) else 0
            macd_signal = float(df_1h['macd_signal'].iloc[-1]) if not pd.isna(df_1h['macd_signal'].iloc[-1]) else 0
            bb_position = float(df_1h['bb_position'].iloc[-1]) if not pd.isna(df_1h['bb_position'].iloc[-1]) else 0.5
            volume_ratio = float(df_1h['volume_ratio'].iloc[-1]) if not pd.isna(df_1h['volume_ratio'].iloc[-1]) else 1
            momentum_1h = float(df_1h['roc_3'].iloc[-1]) if not pd.isna(df_1h['roc_3'].iloc[-1]) else 0
            momentum_5m = 0
            momentum_15m = 0
            if '5m' in data_dict and data_dict['5m'] is not None and len(data_dict['5m']) > 5:
                df_5m = data_dict['5m']
                momentum_5m = float(df_5m['roc_3'].iloc[-1]) if not pd.isna(df_5m['roc_3'].iloc[-1]) else 0
            if '15m' in data_dict and data_dict['15m'] is not None and len(data_dict['15m']) > 5:
                df_15m = data_dict['15m']
                momentum_15m = float(df_15m['roc_3'].iloc[-1]) if not pd.isna(df_15m['roc_3'].iloc[-1]) else 0
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ —Å—Ç–∞—Ä—à–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            trend_1h = 0
            trend_4h = 0
            if '1h' in data_dict and data_dict['1h'] is not None and len(data_dict['1h']) > 20:
                df_1h_trend = data_dict['1h']
                trend_1h = (df_1h_trend['close'].iloc[-1] - df_1h_trend['close'].iloc[-20]) / df_1h_trend['close'].iloc[-20]
                trend_1h = float(trend_1h) if not pd.isna(trend_1h) else 0
            if '4h' in data_dict and data_dict['4h'] is not None and len(data_dict['4h']) > 20:
                df_4h_trend = data_dict['4h']
                trend_4h = (df_4h_trend['close'].iloc[-1] - df_4h_trend['close'].iloc[-20]) / df_4h_trend['close'].iloc[-20]
                trend_4h = float(trend_4h) if not pd.isna(trend_4h) else 0

            # –£—Ç–æ—á–Ω–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è LONG (–ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ)
            long_conditions = [
                rsi < 35,  # –ë–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
                stoch_k < 30 and stoch_d < 30,  # –ë–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–µ —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫–∞
                macd > macd_signal,  # MACD bullish
                bb_position < 0.2,  # –¶–µ–Ω–∞ –±–ª–∏–∂–µ –∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
                volume_ratio > 1.1,  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
                momentum_1h > -0.01,   # –£–º–µ—Ä–µ–Ω–Ω—ã–π downtrend –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
                trend_4h > 0.005,      # –¢—Ä–µ–Ω–¥ –Ω–∞ 4h –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —è–≤–Ω–æ –≤–æ—Å—Ö–æ–¥—è—â–∏–º
                trend_1h > -0.01       # –¢—Ä–µ–Ω–¥ –Ω–∞ 1h –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–ª—å–Ω–æ –Ω–∏—Å—Ö–æ–¥—è—â–∏–º
            ]
            # –£—Ç–æ—á–Ω–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è SHORT (–ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ)
            short_conditions = [
                rsi > 65,  # –ë–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
                stoch_k > 70 and stoch_d > 70,  # –ë–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–µ —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫–∞
                macd < macd_signal,  # MACD bearish
                bb_position > 0.8,  # –¶–µ–Ω–∞ –±–ª–∏–∂–µ –∫ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
                volume_ratio > 1.1,  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
                momentum_1h < 0.01,   # –£–º–µ—Ä–µ–Ω–Ω—ã–π uptrend –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
                trend_4h < -0.005,     # –¢—Ä–µ–Ω–¥ –Ω–∞ 4h –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —è–≤–Ω–æ –Ω–∏—Å—Ö–æ–¥—è—â–∏–º
                trend_1h < 0.01        # –¢—Ä–µ–Ω–¥ –Ω–∞ 1h –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–ª—å–Ω–æ –≤–æ—Å—Ö–æ–¥—è—â–∏–º
            ]

            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –í–´–ë–û–†–ê –õ–£–ß–®–ï–ì–û –°–ò–ì–ù–ê–õ–ê ---
            # –°–Ω–∞—á–∞–ª–∞ –≤—ã—á–∏—Å–ª—è–µ–º –æ–±–∞ —Å—á–µ—Ç—á–∏–∫–∞
            long_score = sum(1 for cond in long_conditions if cond) # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            short_score = sum(1 for cond in short_conditions if cond) # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π

            signal_type = None
            confidence_score = 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ SHORT —Å–∏–≥–Ω–∞–ª—ã
            # (–ú—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–∑–∂–µ)
            effective_short_score = short_score if self.risk_params['use_short_signals'] else -1 # –ï—Å–ª–∏ SHORT –∑–∞–ø—Ä–µ—â–µ–Ω—ã, —Å—á–∏—Ç–∞–µ–º –∏—Ö —Å—á–µ—Ç—á–∏–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º

            # –¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
            # –£—Å–ª–æ–≤–∏—è:
            # 1. –°—á–µ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 5 (–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥)
            # 2. –°—á–µ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            # 3. –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫–∏ —Ä–∞–≤–Ω—ã –∏ >= 5, –≤—ã–±–∏—Ä–∞–µ–º LONG.
            
            if long_score >= 5 and short_score >= 5:
                # –û–±–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ –ø–æ—Ä–æ–≥—É, –≤—ã–±–∏—Ä–∞–µ–º —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º —Å—á–µ—Ç—á–∏–∫–æ–º
                if long_score > short_score:
                    signal_type = 'LONG'
                    confidence_score = (long_score / len(long_conditions)) * 100
                elif short_score > long_score and self.risk_params['use_short_signals']:
                    signal_type = 'SHORT'
                    confidence_score = (short_score / len(short_conditions)) * 100
                # –ï—Å–ª–∏ long_score == short_score, –≤—ã–±–∏—Ä–∞–µ–º LONG –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                elif long_score == short_score:
                     signal_type = 'LONG'
                     confidence_score = (long_score / len(long_conditions)) * 100
                     
            elif long_score >= 5:
                # –¢–æ–ª—å–∫–æ LONG –ø–æ–¥—Ö–æ–¥–∏—Ç
                signal_type = 'LONG'
                confidence_score = (long_score / len(long_conditions)) * 100
            elif short_score >= 5 and self.risk_params['use_short_signals']:
                # –¢–æ–ª—å–∫–æ SHORT –ø–æ–¥—Ö–æ–¥–∏—Ç
                signal_type = 'SHORT'
                confidence_score = (short_score / len(short_conditions)) * 100

            # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò ---

            # –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (1-5) - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–∞
            signal_strength = 1 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if signal_type:
                selected_score = long_score if signal_type == 'LONG' else short_score
                selected_total = len(long_conditions) if signal_type == 'LONG' else len(short_conditions)
                
                if selected_score >= 7: # 7 –∏–∑ 8
                    signal_strength = 5
                elif selected_score >= 6: # 6 –∏–∑ 8
                    signal_strength = 4
                elif selected_score >= 5: # 5 –∏–∑ 8
                    signal_strength = 3
                # signal_strength 1 –∏ 2 –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ < 5 —É–∂–µ –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —Å–∏–≥–Ω–∞–ª –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
                
            # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ 60% (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞)
            if signal_type and confidence_score >= 60: 
                # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–≤–µ—á–µ–π
                patterns = self.detect_advanced_candlestick_patterns(df_1h)
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–∏–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
                strong_patterns = [
                    'bullish_engulfing', 'bearish_engulfing', 'hammer', 'shooting_star',
                    'three_white_soldiers', 'three_black_crows', 'morning_star', 'evening_star'
                ]
                # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                if signal_type == 'LONG' and not any(pattern in patterns for pattern in ['bullish_engulfing', 'hammer', 'morning_star', 'three_white_soldiers']):
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∏–ª—å–Ω—ã—Ö –±—ã—á—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, —É–º–µ–Ω—å—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    confidence_score *= 0.8
                elif signal_type == 'SHORT' and not any(pattern in patterns for pattern in ['bearish_engulfing', 'shooting_star', 'evening_star', 'three_black_crows']):
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∏–ª—å–Ω—ã—Ö –º–µ–¥–≤–µ–∂—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, —É–º–µ–Ω—å—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    confidence_score *= 0.8

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ TP –∏ SL
                sl, tp1, tp2, tp3 = self.calculate_dynamic_levels(symbol, data_dict, signal_type)
                if sl is None or tp1 is None or tp2 is None or tp3 is None:
                    logger.debug(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π")
                    return None
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω–µ–π
                risk_reward_ratio = abs(tp3 - current_price) / (abs(current_price - sl) + 0.0001)
                # RR ratio
                if signal_type == 'LONG' and sl < current_price and tp3 > current_price and risk_reward_ratio > 1.5:
                    valid = True
                elif signal_type == 'SHORT' and sl > current_price and tp3 < current_price and risk_reward_ratio > 1.5:
                    valid = True
                else:
                    valid = False
                if valid:
                    # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ä–æ—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    potential_upside = ((tp3 - current_price) / current_price * 100) if signal_type == 'LONG' else ((current_price - tp3) / current_price * 100)
                    return {
                        'symbol': symbol,
                        'signal_type': signal_type,
                        'entry_price': round(float(current_price), 8),
                        'tp1': round(float(tp1), 8),
                        'tp2': round(float(tp2), 8),
                        'tp3': round(float(tp3), 8),
                        'sl': round(float(sl), 8),
                        'confidence': round(float(confidence_score), 2),
                        'risk_reward_ratio': round(float(risk_reward_ratio), 2),
                        'potential_upside': round(float(potential_upside), 2),
                        'signal_strength': int(signal_strength),
                        'patterns': list(patterns.keys()),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                        'timeframe_analysis': {
                            '5m_momentum': round(float(momentum_5m), 6),
                            '15m_momentum': round(float(momentum_15m), 6),
                            '1h_momentum': round(float(momentum_1h), 6),
                            '1h_trend': round(float(trend_1h), 6),
                            '4h_trend': round(float(trend_4h), 6)
                        },
                        'technical_analysis': {
                            'rsi': round(float(rsi), 2),
                            'stoch_k': round(float(stoch_k), 2),
                            'macd': round(float(macd), 8),
                            'bb_position': round(float(bb_position), 2),
                            'volume_ratio': round(float(volume_ratio), 2),
                            'potential_multiplier': round(float((abs(tp3 - current_price) / (atr * 5)) if atr > 0 else 1), 2)
                        },
                        'timestamp': datetime.now().isoformat(),
                        'conditions_met': {
                            'long_score': int(long_score),
                            'short_score': int(short_score),
                            'total_conditions': len(long_conditions) if signal_type == 'LONG' else len(short_conditions)
                        }
                    }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
        return None

    def get_current_price(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ñ—å—é—á–µ—Ä—Å–∞"""
        try:
            ticker = self.exchange.fetch_ticker(symbol)
            return float(ticker['last'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ñ—å—é—á–µ—Ä—Å–∞ –¥–ª—è {symbol}: {e}")
            return None

    def check_active_trades(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        trades_to_remove = []
        for symbol in list(self.active_trades.keys()):
            result = self.check_trade_status(symbol)
            if result == 'closed':
                trades_to_remove.append(symbol)
        for symbol in trades_to_remove:
            if symbol in self.active_trades:
                del self.active_trades[symbol]
        if trades_to_remove or len(self.active_trades) > 0:
            self.save_state()

    def check_trade_status(self, symbol):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        if symbol not in self.active_trades:
            return 'not_found'
        trade = self.active_trades[symbol]
        current_price = self.get_current_price(symbol)
        if current_price is None:
            logger.info(f"üëÄ [{symbol}] –û—Ç—Å–ª–µ–∂–∏–≤–∞—é {trade['signal_type']} | –¶–µ–Ω–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ | –í—Ö–æ–¥: {trade['entry_price']} | –°—Ç–∞—Ç—É—Å: {self.get_trade_status(trade)}")
            return 'active'
        entry_price = float(trade['entry_price'])
        signal_type = trade['signal_type']
        logger.info(f"üëÄ [{symbol}] –û—Ç—Å–ª–µ–∂–∏–≤–∞—é {signal_type} | –¶–µ–Ω–∞: {current_price} | –í—Ö–æ–¥: {entry_price} | –°—Ç–∞—Ç—É—Å: {self.get_trade_status(trade)}")
        tp_levels = [float(trade['tp1']), float(trade['tp2']), float(trade['tp3'])]
        tp_names = ['TP1', 'TP2', 'TP3']
        for i, (tp, tp_name) in enumerate(zip(tp_levels, tp_names)):
            if f'{tp_name.lower()}_reached' not in trade or not trade[f'{tp_name.lower()}_reached']:
                reached = False
                if signal_type == 'LONG' and current_price >= tp:
                    reached = True
                elif signal_type == 'SHORT' and current_price <= tp:
                    reached = True
                if reached:
                    trade[f'{tp_name.lower()}_reached'] = True
                    logger.info(f"üéØ [{symbol}] --- Take Profit {i+1} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç @ {tp} ---")
                    if tp_name == 'TP3':
                        logger.info(f"üéâ [{symbol}] –°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê –ø–æ Take Profit 3 @ {tp}")
                        self.save_state()
                        return 'closed'
        sl = float(trade['sl'])
        sl_reached = False
        if signal_type == 'LONG' and current_price <= sl:
            sl_reached = True
        elif signal_type == 'SHORT' and current_price >= sl:
            sl_reached = True
        if sl_reached:
            trade['sl_reached'] = True
            logger.info(f"üõë [{symbol}] –°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê –ø–æ Stop Loss @ {sl}")
            self.save_state()
            return 'closed'
        return 'active'

    def get_trade_status(self, trade):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏"""
        if trade.get('tp3_reached', False):
            return 'hit TP3'
        elif trade.get('tp2_reached', False):
            return 'hit TP2'
        elif trade.get('tp1_reached', False):
            return 'hit TP1'
        elif trade.get('sl_reached', False):
            return 'hit SL'
        else:
            return 'active'

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ send_signal
    def send_signal(self, signal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        if signal is None:
            return
        symbol = signal['symbol']
        
        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ.
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤, –ø–æ–∫–∞ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞.
        # –õ–æ–≥–∏–∫–∞ "–æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –≤ —á–∞—Å" —É–±—Ä–∞–Ω–∞.
        if symbol in self.active_trades:
             # –°–∏–≥–Ω–∞–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ —Å–¥–µ–ª–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.
             # logger.debug(f"‚è≠Ô∏è  –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω - –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.")
             return # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏ –Ω–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        self.signal_history[symbol].append(self.convert_to_serializable(signal))
        if len(self.signal_history[symbol]) > 50:
            self.signal_history[symbol] = self.signal_history[symbol][-25:]
        signal_log_entry = {
            'timestamp': signal['timestamp'],
            'symbol': signal['symbol'],
            'signal_type': signal['signal_type'],
            'entry_price': float(signal['entry_price']),
            'tp1': float(signal['tp1']),
            'tp2': float(signal['tp2']),
            'tp3': float(signal['tp3']),
            'sl': float(signal['sl']),
            'confidence': float(signal['confidence']),
            'rr_ratio': float(signal['risk_reward_ratio']),
            'potential_upside': float(signal.get('potential_upside', 0)),
            'signal_strength': int(signal['signal_strength']),
            'patterns': signal.get('patterns', [])
        }
        self.signals_found.append(self.convert_to_serializable(signal_log_entry))
        self.analysis_stats['signals_generated'] += 1
        logger.info(f"‚úÖ [{signal['symbol']}] --- –û–¢–ö–†–´–¢–ê {signal['signal_type']} –°–î–ï–õ–ö–ê (–°–∏–ª–∞: {signal['signal_strength']}) @ {signal['entry_price']} ---")
        logger.info(f"   SL: {signal['sl']}, TP1: {signal['tp1']}, TP2: {signal['tp2']}, TP3: {signal['tp3']}")
        logger.info(f"   üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {signal.get('potential_upside', 0):.1f}% | RR: {signal['risk_reward_ratio']}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if signal.get('patterns'):
            logger.info(f"   üîç –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(signal['patterns'])}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ (—ç—Ç–æ —É–∂–µ –±—ã–ª–æ, –Ω–æ —Ç–µ–ø–µ—Ä—å –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ symbol not in self.active_trades)
        self.active_trades[signal['symbol']] = self.convert_to_serializable(signal).copy()
        for tp_name in ['tp1', 'tp2', 'tp3']:
            self.active_trades[signal['symbol']][f'{tp_name}_reached'] = False
        self.active_trades[signal['symbol']]['sl_reached'] = False
        self.save_state()

    def save_signals_log(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            serializable_signals = [self.convert_to_serializable(signal) for signal in self.signals_found]
            serializable_stats = self.convert_to_serializable(self.analysis_stats)
            with open('signals_log.json', 'w', encoding='utf-8') as f:
                json.dump({
                    'signals': serializable_signals,
                    'stats': serializable_stats,
                    'generated_at': datetime.now().isoformat()
                }, f, ensure_ascii=False, indent=2, default=str)
            if self.signals_found:
                csv_data = []
                for signal in self.signals_found:
                    csv_signal = self.convert_to_serializable(signal).copy()
                    csv_data.append(csv_signal)
                df = pd.DataFrame(csv_data)
                df.to_csv('signals_log.csv', index=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ process_symbol
    def process_symbol(self, symbol):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            data_dict = self.fetch_ohlcv_multitimeframe(symbol)
            if not data_dict:
                return None
            for tf in self.timeframes:
                if tf in data_dict and data_dict[tf] is not None:
                    data_dict[tf] = self.calculate_advanced_indicators(data_dict[tf], tf)
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: calculate_multitimeframe_analysis —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            multitimeframe_analysis = self.calculate_multitimeframe_analysis(data_dict)
            if symbol not in self.active_trades:
                # –£–±–∏—Ä–∞–µ–º multitimeframe_analysis –∏–∑ –≤—ã–∑–æ–≤–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                signal = self.generate_signal(symbol, data_dict) 
                return signal
            else:
                logger.debug(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω {symbol} - —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞")
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
            return None

    def run_analysis_cycle(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        cycle_start_time = datetime.now()
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ {len(self.symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä...")
        signals = []
        processed_count = 0
        for symbol in self.symbols:
            try:
                signal = self.process_symbol(symbol)
                if signal:
                    signals.append(signal)
                    self.send_signal(signal)
                processed_count += 1
                self.analysis_stats['total_analyzed'] += 1
                if processed_count % 5 == 0:
                    time.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol}: {e}")
        self.check_active_trades()
        self.save_signals_log()
        cycle_duration = datetime.now() - cycle_start_time
        logger.info(f"‚úÖ –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration.total_seconds():.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–∞—Ä. –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤.")
        self.save_state()

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–∞...")
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(self.symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä –Ω–∞ {len(self.timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö")
        logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: {self.state_file}")
        logger.info(f"üìà SHORT —Å–∏–≥–Ω–∞–ª—ã: {'–í–ö–õ–Æ–ß–ï–ù–´' if self.risk_params['use_short_signals'] else '–í–´–ö–õ–Æ–ß–ï–ù–´'}")
        logger.info(f"üéØ TP/SL —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ä–æ—Å—Ç–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        # –ò–∑–º–µ–Ω–µ–Ω–æ: –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤–º–µ—Å—Ç–æ 5
        logger.info(f"üïí –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É")
        if self.active_trades:
            logger.info(f"üì• –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(self.active_trades)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
            for symbol, trade in self.active_trades.items():
                logger.info(f"   üìå {symbol} | {trade['signal_type']} | –í—Ö–æ–¥: {trade['entry_price']}")
        cycle_count = 0
        while True:
            try:
                cycle_count += 1
                logger.info(f"üîÑ –¶–∏–∫–ª #{cycle_count}")
                self.run_analysis_cycle()
                # –ò–∑–º–µ–Ω–µ–Ω–æ: –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 300
                logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ (1 –º–∏–Ω—É—Ç–∞)...")
                time.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞
            except KeyboardInterrupt:
                logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                self.save_state()
                self.save_signals_log()
                logger.info("üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                self.save_state()
                time.sleep(60)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
if __name__ == "__main__":
    bot = FuturesCryptoTradingBot()
    bot.run()