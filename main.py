import ccxt
import pandas as pd
import numpy as np
import ta
from datetime import datetime, timedelta
import time
import logging
import json
import os
from collections import defaultdict
import warnings
import shutil
import psutil
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('crypto_futures_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FuturesCryptoTradingBot:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤ Binance
        self.exchange = ccxt.binance({
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future',  # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
                'adjustForTimeDifference': True
            }
        })
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        self.timeframes = ['5m', '15m', '1h', '4h']
        
        # –°–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä (–±–µ–∑ MATIC/USDT)
        self.symbols = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT',
            'ADA/USDT', 'DOGE/USDT', 'DOT/USDT', 'AVAX/USDT', 'LINK/USDT',
            'UNI/USDT', 'LTC/USDT', 'ATOM/USDT', 'ETC/USDT',
            'FIL/USDT', 'TRX/USDT', 'VET/USDT', 'XLM/USDT', 'ICP/USDT',
            'FTM/USDT', 'HBAR/USDT', 'NEAR/USDT', 'ALGO/USDT', 'EGLD/USDT',
            'FLOW/USDT', 'SAND/USDT', 'MANA/USDT', 'AXS/USDT', 'GALA/USDT',
            'APE/USDT', 'CHZ/USDT', 'ENJ/USDT', 'THETA/USDT', 'GMT/USDT'
        ]
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        self.active_trades = {}
        self.signal_history = defaultdict(list)
        self.signals_found = []
        self.analysis_stats = {
            'total_analyzed': 0,
            'signals_generated': 0,
            'start_time': datetime.now().isoformat()
        }
        self.signal_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
        
        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
        self.data_cache = {}
        self.cache_expiry = 300  # 5 –º–∏–Ω—É—Ç
        
        # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.state_file = 'bot_state.json'
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.risk_params = {
            'min_confidence_threshold': 45,  # –õ–∏–±–µ—Ä–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            'min_volume_filter': 300000,
            'min_rr_ratio': 1.2,
            'use_short_signals': True
        }
        
        # –ö–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.correlated_pairs = {
            'BTC/USDT': ['ETH/USDT', 'BNB/USDT'],
            'ETH/USDT': ['BTC/USDT', 'BNB/USDT'],
            'SOL/USDT': ['AVAX/USDT'],
            'ADA/USDT': ['DOT/USDT'],
            'DOT/USDT': ['ADA/USDT']
        }
        
        # –°–µ–∫—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.asset_sectors = {
            'BTC/USDT': 'Bitcoin',
            'ETH/USDT': 'Ethereum',
            'BNB/USDT': 'Exchange',
            'SOL/USDT': 'Smart Contracts',
            'ADA/USDT': 'Smart Contracts',
            'DOT/USDT': 'Smart Contracts',
            'AVAX/USDT': 'Smart Contracts',
            'LINK/USDT': 'Oracle',
            'UNI/USDT': 'DEX',
            'DOGE/USDT': 'Meme',
            'XRP/USDT': 'Payments',
            'LTC/USDT': 'Payments',
            'ATOM/USDT': 'Interoperability',
            'FIL/USDT': 'Storage',
            'TRX/USDT': 'Entertainment',
            'VET/USDT': 'Supply Chain',
            'ICP/USDT': 'Infrastructure',
            'FTM/USDT': 'Smart Contracts',
            'HBAR/USDT': 'Payments',
            'NEAR/USDT': 'Smart Contracts',
            'ALGO/USDT': 'Smart Contracts',
            'EGLD/USDT': 'Payments',
            'FLOW/USDT': 'NFT',
            'SAND/USDT': 'Metaverse',
            'MANA/USDT': 'Metaverse',
            'AXS/USDT': 'Gaming',
            'GALA/USDT': 'Gaming',
            'APE/USDT': 'NFT',
            'CHZ/USDT': 'Sports',
            'ENJ/USDT': 'NFT',
            'THETA/USDT': 'Video',
            'GMT/USDT': 'Social'
        }
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_state()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.load_market_data()
        
    def load_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.state_file):
                if os.path.getsize(self.state_file) == 0:
                    logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è {self.state_file} –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
                    self.create_default_state_file()
                    return
                    
                with open(self.state_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if not content:
                        logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è {self.state_file} –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
                        self.create_default_state_file()
                        return
                        
                    state = json.loads(content)
                    
                if 'active_trades' in state:
                    self.active_trades = self.convert_to_serializable(state['active_trades'])
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(self.active_trades)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                    
                if 'signal_history' in state:
                    raw_history = state['signal_history']
                    self.signal_history = defaultdict(list)
                    for symbol, signals in raw_history.items():
                        self.signal_history[symbol] = [self.convert_to_serializable(signal) for signal in signals]
                    total_signals = sum(len(signals) for signals in self.signal_history.values())
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
                    
                if 'signals_found' in state:
                    self.signals_found = [self.convert_to_serializable(signal) for signal in state['signals_found']]
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(self.signals_found)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                    
                if 'analysis_stats' in state:
                    self.analysis_stats = self.convert_to_serializable(state['analysis_stats'])
                    logger.info("üì• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    
                logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            else:
                logger.info("üÜï –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ - —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.create_default_state_file()
                
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ JSON –≤ —Ñ–∞–π–ª–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            logger.warning("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            self.create_default_state_file()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            logger.warning("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            self.create_default_state_file()
            
    def create_default_state_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            default_state = {
                'active_trades': {},
                'signal_history': {},
                'signals_found': [],
                'analysis_stats': {
                    'total_analyzed': 0,
                    'signals_generated': 0,
                    'start_time': datetime.now().isoformat()
                },
                'created_at': datetime.now().isoformat()
            }
            
            with open(self.state_file, 'w', encoding='utf-8') as f:
                json.dump(default_state, f, ensure_ascii=False, indent=2, default=str)
                
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            
    def convert_to_serializable(self, obj):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if isinstance(obj, dict):
            return {key: self.convert_to_serializable(value) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self.convert_to_serializable(item) for item in obj]
        elif isinstance(obj, (np.integer, np.floating)):
            return float(obj)
        elif isinstance(obj, np.bool_):
            return bool(obj)
        elif pd.api.types.is_integer_dtype(type(obj)) or pd.api.types.is_float_dtype(type(obj)):
            return float(obj)
        elif isinstance(obj, pd.Timestamp):
            return obj.isoformat()
        elif isinstance(obj, datetime):
            return obj.isoformat()
        else:
            return obj
            
    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        try:
            state = {
                'active_trades': self.convert_to_serializable(self.active_trades),
                'signal_history': self.convert_to_serializable(dict(self.signal_history)),
                'signals_found': self.convert_to_serializable(self.signals_found),
                'analysis_stats': self.convert_to_serializable(self.analysis_stats),
                'saved_at': datetime.now().isoformat()
            }
            
            temp_file = self.state_file + '.tmp'
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(state, f, ensure_ascii=False, indent=2, default=str)
            
            os.replace(temp_file, self.state_file)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            
    def load_market_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–∞—Ö"""
        try:
            markets = self.exchange.load_markets()
            futures_symbols = [symbol for symbol in self.symbols if symbol in markets]
            self.symbols = futures_symbols
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(markets)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤")
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–∞—Ä—ã: {len(self.symbols)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: {e}")
            
    def fetch_ohlcv_with_cache(self, symbol, timeframe, limit=100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"{symbol}_{timeframe}_{limit}"
        current_time = time.time()
        
        if cache_key in self.data_cache:
            cached_data, timestamp = self.data_cache[cache_key]
            if current_time - timestamp < self.cache_expiry:
                return cached_data
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        self.data_cache[cache_key] = (data, current_time)
        return data
            
    def fetch_ohlcv_multitimeframe(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º"""
        data = {}
        try:
            for tf in self.timeframes:
                limit = 200 if tf in ['5m', '15m'] else 100
                ohlcv = self.fetch_ohlcv_with_cache(symbol, tf, limit=limit)
                if len(ohlcv) > 0:
                    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                    df.set_index('timestamp', inplace=True)
                    data[tf] = df
                else:
                    data[tf] = None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None
        return data
        
    def robust_data_fetch(self, symbol, timeframes):
        """–ù–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                return self.fetch_ohlcv_multitimeframe(symbol)
            except Exception as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < max_retries - 1:
                    time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                    return None
                    
    def get_trend_direction(self, df):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"""
        if df is None or len(df) < 20:
            return 'neutral'
            
        try:
            current_price = float(df['close'].iloc[-1])
            ema_21 = float(df['ema_21'].iloc[-1]) if 'ema_21' in df.columns else current_price
            return 'bullish' if current_price > ema_21 else 'bearish'
        except:
            return 'neutral'
            
    def check_multitimeframe_confirmation(self, data_dict, signal_type):
        """–ú–Ø–ì–ö–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""
        confirmations = 0
        total_timeframes = 0
        
        for tf, df in data_dict.items():
            if df is not None and len(df) > 20:
                total_timeframes += 1
                trend = self.get_trend_direction(df)
                if (signal_type == 'LONG' and trend == 'bullish') or \
                   (signal_type == 'SHORT' and trend == 'bearish'):
                    confirmations += 1
        
        # –¢–û–õ–¨–ö–û 50% —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
        return confirmations >= max(1, total_timeframes * 0.5)
        
    def check_volatility_filter(self, df_1h):
        """–ë–û–õ–ï–ï –õ–ò–ë–ï–†–ê–õ–¨–ù–´–ô —Ñ–∏–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if df_1h is None or len(df_1h) < 20:
            return True
            
        try:
            atr = float(df_1h['atr'].iloc[-1])
            price = float(df_1h['close'].iloc[-1])
            volatility_percent = (atr / price) * 100
            
            # –®–ò–†–ï –¥–∏–∞–ø–∞–∑–æ–Ω: 0.5-8%
            return 0.5 <= volatility_percent <= 8.0
        except:
            return True
            
    def check_volume_profile(self, data_dict):
        """–ú–Ø–ì–ö–ò–ô –æ–±—ä–µ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä"""
        if '1h' not in data_dict or data_dict['1h'] is None:
            return True
            
        df = data_dict['1h']
        if len(df) < 50:
            return True
            
        try:
            current_volume = float(df['volume'].iloc[-1])
            avg_volume_24h = float(df['volume'].tail(24).mean())
            
            # –ú–ï–ù–¨–®–ï —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: 30%
            return current_volume >= avg_volume_24h * 0.3
        except:
            return True
            
    def calculate_fibonacci_levels(self, df, signal_type):
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏"""
        if df is None or len(df) < 50:
            return {}
            
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–≤–∏–Ω–≥ —Ö–∞–π/–ª–æ—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –±–∞—Ä–æ–≤
            recent_data = df.tail(30)
            swing_high = float(recent_data['high'].max())
            swing_low = float(recent_data['low'].min())
            
            diff = swing_high - swing_low
            
            if signal_type == 'LONG':
                fib_levels = {
                    'fib_236': swing_low + diff * 0.236,
                    'fib_382': swing_low + diff * 0.382,
                    'fib_500': swing_low + diff * 0.500,
                    'fib_618': swing_low + diff * 0.618,
                    'fib_786': swing_low + diff * 0.786
                }
            else:
                fib_levels = {
                    'fib_236': swing_high - diff * 0.236,
                    'fib_382': swing_high - diff * 0.382,
                    'fib_500': swing_high - diff * 0.500,
                    'fib_618': swing_high - diff * 0.618,
                    'fib_786': swing_high - diff * 0.786
                }
                
            return fib_levels
        except:
            return {}
            
    def calculate_dynamic_rr_ratio(self, symbol, data_dict, signal_type):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç RR –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        if not data_dict or '1h' not in data_dict:
            return 1.5
            
        df = data_dict['1h']
        if df is None or len(df) < 20:
            return 1.5
            
        try:
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility = float(df['volatility'].iloc[-1]) if 'volatility' in df.columns else 0.02
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            trend_strength = abs(float(df['price_trend_20'].iloc[-1]))
            
            # –ë–∞–∑–æ–≤—ã–π RR
            base_rr = 1.5
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if volatility > 0.03:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                base_rr = 1.3
            elif volatility < 0.01:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                base_rr = 1.8
                
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç—Ä–µ–Ω–¥—É
            if trend_strength > 0.05:  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                base_rr *= 1.2
            else:
                base_rr *= 0.9
                
            return max(1.2, min(3.0, base_rr))
        except:
            return 1.5
            
    def check_correlation_filter(self, symbol, active_trades):
        """–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ - –∏–∑–±–µ–≥–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö"""
        if not active_trades:
            return True
            
        if symbol in self.correlated_pairs:
            for active_symbol in active_trades:
                if active_symbol in self.correlated_pairs[symbol]:
                    return False  # –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –≤ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–µ–º –∞–∫—Ç–∏–≤–µ
                    
        return True
        
    def get_asset_sector(self, symbol):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞"""
        return self.asset_sectors.get(symbol, 'Other')

    def check_sector_diversification(self, symbol, active_trades):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"""
        if not active_trades:
            return True
            
        current_sector = self.get_asset_sector(symbol)
        sector_positions = {}
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
        for active_symbol in active_trades:
            sector = self.get_asset_sector(active_symbol)
            sector_positions[sector] = sector_positions.get(sector, 0) + 1
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º 30% –ø–æ–∑–∏—Ü–∏–π –≤ –æ–¥–Ω–æ–º —Å–µ–∫—Ç–æ—Ä–µ
        current_sector_count = sector_positions.get(current_sector, 0)
        total_positions = len(active_trades) + 1  # +1 –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        
        sector_percentage = (current_sector_count + 1) / total_positions
        return sector_percentage <= 0.3
        
    def calculate_portfolio_risk(self, symbol, entry_price, sl_price, active_trades):
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é"""
        # –†–∏—Å–∫ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        position_risk = abs(entry_price - sl_price) / entry_price
        
        # –û–±—â–∏–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        total_portfolio_risk = position_risk
        
        for active_symbol, trade in active_trades.items():
            try:
                active_entry = float(trade['entry_price'])
                active_sl = float(trade['sl'])
                active_risk = abs(active_entry - active_sl) / active_entry
                total_portfolio_risk += active_risk
            except:
                pass
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        max_portfolio_risk = 0.15  # 15%
        return total_portfolio_risk <= max_portfolio_risk
        
    def detect_candlestick_patterns(self, df):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–≤–µ—á–µ–π"""
        if df is None or len(df) < 10:
            return {}
            
        patterns = {}
        
        try:
            # –ü–æ–≥–ª–æ—â–µ–Ω–∏–µ –±—ã—á—å–µ–µ
            if (df['close'].iloc[-2] < df['open'].iloc[-2] and  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∫—Ä–∞—Å–Ω–∞—è
                df['close'].iloc[-1] > df['open'].iloc[-1] and   # –¢–µ–∫—É—â–∞—è –∑–µ–ª–µ–Ω–∞—è
                df['close'].iloc[-1] > df['open'].iloc[-2] and   # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã—à–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                df['open'].iloc[-1] < df['close'].iloc[-2]):     # –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∏–∂–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                patterns['bullish_engulfing'] = True
            
            # –ü–æ–≥–ª–æ—â–µ–Ω–∏–µ –º–µ–¥–≤–µ–∂—å–µ
            if (df['close'].iloc[-2] > df['open'].iloc[-2] and  # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–µ–ª–µ–Ω–∞—è
                df['close'].iloc[-1] < df['open'].iloc[-1] and   # –¢–µ–∫—É—â–∞—è –∫—Ä–∞—Å–Ω–∞—è
                df['close'].iloc[-1] < df['open'].iloc[-2] and   # –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∏–∂–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                df['open'].iloc[-1] > df['close'].iloc[-2]):     # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã—à–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                patterns['bearish_engulfing'] = True
            
            # –ú–æ–ª–æ—Ç
            body = abs(df['close'].iloc[-1] - df['open'].iloc[-1])
            upper_wick = df['high'].iloc[-1] - max(df['close'].iloc[-1], df['open'].iloc[-1])
            lower_wick = min(df['close'].iloc[-1], df['open'].iloc[-1]) - df['low'].iloc[-1]
            
            if (lower_wick > body * 2 and upper_wick < body * 0.5):
                patterns['hammer'] = True
            elif (upper_wick > body * 2 and lower_wick < body * 0.5):
                patterns['shooting_star'] = True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            
        return patterns
        
    def calculate_market_sentiment(self, data_dict):
        """–†–∞—Å—á–µ—Ç —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        sentiment = {
            'fear_greed_index': 50,
            'volatility_regime': 'normal',
            'volume_regime': 'normal'
        }
        
        if '1h' not in data_dict or data_dict['1h'] is None:
            return sentiment
            
        df = data_dict['1h']
        if len(df) < 20:
            return sentiment
            
        try:
            # –†–∞—Å—á–µ—Ç Fear & Greed –Ω–∞ –æ—Å–Ω–æ–≤–µ:
            # 1. RSI (30% –≤–µ—Å–∞)
            rsi = float(df['rsi'].iloc[-1])
            rsi_score = max(0, min(100, (rsi - 30) * 2.5))
            
            # 2. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (30% –≤–µ—Å–∞)
            volatility = float(df['volatility'].iloc[-1]) if 'volatility' in df.columns else 0.02
            vol_score = max(0, min(100, volatility * 2000))
            
            # 3. –û–±—ä–µ–º (20% –≤–µ—Å–∞)
            volume_ratio = float(df['volume_ratio'].iloc[-1])
            vol_ratio_score = max(0, min(100, volume_ratio * 50))
            
            # 4. –¢—Ä–µ–Ω–¥ (20% –≤–µ—Å–∞)
            trend_20 = float(df['price_trend_20'].iloc[-1])
            trend_score = max(0, min(100, (trend_20 + 0.1) * 500))
            
            sentiment['fear_greed_index'] = (
                rsi_score * 0.3 + 
                vol_score * 0.3 + 
                vol_ratio_score * 0.2 + 
                trend_score * 0.2
            )
            
            # –†–µ–∂–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if volatility > 0.04:
                sentiment['volatility_regime'] = 'high'
            elif volatility < 0.01:
                sentiment['volatility_regime'] = 'low'
            else:
                sentiment['volatility_regime'] = 'normal'
                
            # –†–µ–∂–∏–º –æ–±—ä–µ–º–∞
            if volume_ratio > 1.5:
                sentiment['volume_regime'] = 'high'
            elif volume_ratio < 0.8:
                sentiment['volume_regime'] = 'low'
            else:
                sentiment['volume_regime'] = 'normal'
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞: {e}")
            
        return sentiment
        
    def get_market_regime(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ BTC –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞
            btc_data = self.fetch_ohlcv_with_cache('BTC/USDT', '1h', limit=50)
            if btc_data and len(btc_data) >= 20:
                df = pd.DataFrame(btc_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                df.set_index('timestamp', inplace=True)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å BTC
                returns = df['close'].pct_change().dropna()
                volatility = returns.std() * np.sqrt(365)  # –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥ BTC
                trend_20 = (df['close'].iloc[-1] - df['close'].iloc[-20]) / df['close'].iloc[-20]
                
                if volatility > 0.8:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    return 'high_volatility'
                elif abs(trend_20) > 0.1:  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ (>10% –∑–∞ 20 —á–∞—Å–æ–≤)
                    return 'strong_trend'
                else:
                    return 'normal'
            else:
                return 'normal'
        except:
            return 'normal'

    def adjust_parameters_for_market_regime(self):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥ —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º"""
        regime = self.get_market_regime()
        
        if regime == 'high_volatility':
            # –í –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ - –±–æ–ª—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤, –º–µ–Ω—å—à–µ RR
            self.risk_params['min_confidence_threshold'] = 40
            self.risk_params['min_rr_ratio'] = 1.1
        elif regime == 'strong_trend':
            # –í —Å–∏–ª—å–Ω–æ–º —Ç—Ä–µ–Ω–¥–µ - –±–æ–ª—å—à–µ LONG/SHORT —Å–∏–≥–Ω–∞–ª–æ–≤
            self.risk_params['min_confidence_threshold'] = 42
            self.risk_params['min_rr_ratio'] = 1.15
        else:
            # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
            self.risk_params['min_confidence_threshold'] = 45
            self.risk_params['min_rr_ratio'] = 1.2
            
    def should_apply_strict_filters(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
        # –ï—Å–ª–∏ —É–∂–µ –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ - –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if len(self.active_trades) >= 8:  # –ú–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–π
            return True
        
        # –ï—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª–æ –º–Ω–æ–≥–æ —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ - —Å—Ç—Ä–æ–∂–µ
        if self.get_recent_performance() < 0.4:  # –ü–ª–æ—Ö–∞—è –Ω–µ–¥–∞–≤–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            return True
        
        # –í –æ–±—ã—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö - –º—è–≥—á–µ
        return False
        
    def get_recent_performance(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.signal_stats:
            return 0.5
            
        recent_results = []
        for stats in self.signal_stats.values():
            recent_results.extend(stats.get('recent_results', []))
        
        if len(recent_results) >= 10:
            return sum(recent_results[-10:]) / 10
        return 0.5
        
    def update_signal_statistics(self, symbol, signal_result, pnl=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º"""
        if symbol not in self.signal_stats:
            self.signal_stats[symbol] = {
                'total_signals': 0,
                'winning_signals': 0,
                'total_pnl': 0,
                'win_rate': 0.0,
                'avg_pnl': 0.0,
                'recent_results': []  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            }
        
        stats = self.signal_stats[symbol]
        stats['total_signals'] += 1
        
        if signal_result == 'win':
            stats['winning_signals'] += 1
            if pnl:
                stats['total_pnl'] += pnl
            stats['recent_results'].append(1)
        else:
            stats['recent_results'].append(0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if len(stats['recent_results']) > 20:
            stats['recent_results'] = stats['recent_results'][-20:]
        
        stats['win_rate'] = stats['winning_signals'] / stats['total_signals']
        stats['avg_pnl'] = stats['total_pnl'] / stats['total_signals'] if stats['total_signals'] > 0 else 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç
        if len(stats['recent_results']) >= 10:
            recent_win_rate = sum(stats['recent_results'][-10:]) / 10
            stats['recent_win_rate'] = recent_win_rate

    def calculate_advanced_indicators(self, df, timeframe):
        """–†–∞—Å—á–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        if df is None or len(df) < 20:
            return None
            
        try:
            # EMA
            df['ema_9'] = ta.trend.EMAIndicator(df['close'], window=9).ema_indicator()
            df['ema_21'] = ta.trend.EMAIndicator(df['close'], window=21).ema_indicator()
            df['ema_50'] = ta.trend.EMAIndicator(df['close'], window=50).ema_indicator()
            
            # MACD
            df['macd'] = df['ema_9'] - df['ema_21']
            df['macd_signal'] = df['macd'].rolling(window=9).mean()
            df['macd_histogram'] = df['macd'] - df['macd_signal']
            
            # RSI
            df['rsi'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi()
            df['rsi_sma'] = df['rsi'].rolling(window=14).mean()
            
            # –°—Ç–æ—Ö–∞—Å—Ç–∏–∫
            stoch = ta.momentum.StochasticOscillator(df['high'], df['low'], df['close'], window=14, smooth_window=3)
            df['stoch_k'] = stoch.stoch()
            df['stoch_d'] = stoch.stoch_signal()
            
            # –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä
            bb = ta.volatility.BollingerBands(df['close'], window=20, window_dev=2)
            df['bb_upper'] = bb.bollinger_hband()
            df['bb_middle'] = bb.bollinger_mavg()
            df['bb_lower'] = bb.bollinger_lband()
            df['bb_width'] = (df['bb_upper'] - df['bb_lower']) / (df['bb_middle'] + 0.0001)
            df['bb_position'] = (df['close'] - df['bb_lower']) / (df['bb_upper'] - df['bb_lower'] + 0.0001)
            
            # ATR
            df['atr'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range()
            
            # –û–±—ä–µ–º
            df['volume_ema'] = ta.trend.EMAIndicator(df['volume'], window=20).ema_indicator()
            df['volume_ratio'] = (df['volume'] / (df['volume_ema'] + 0.0001))
            
            # –ú–æ–º–µ–Ω—Ç—É–º
            df['roc_1'] = df['close'].pct_change(1)
            df['roc_3'] = df['close'].pct_change(3)
            df['roc_7'] = df['close'].pct_change(7)
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
            df['candle_body'] = abs(df['close'] - df['open'])
            df['candle_ratio'] = df['candle_body'] / (df['high'] - df['low'] + 0.0001)
            
            # –¢—Ä–µ–Ω–¥
            df['price_trend_20'] = (df['close'] - df['close'].shift(20)) / (df['close'].shift(20) + 0.0001)
            df['price_trend_50'] = (df['close'] - df['close'].shift(50)) / (df['close'].shift(50) + 0.0001)
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            df['volatility'] = df['close'].pct_change().rolling(window=14).std() * np.sqrt(365)
            
            # –°–≤–∏–Ω–≥ —Ö–∞–π/–ª–æ—É –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            df['swing_high'] = df['high'][
                (df['high'] > df['high'].shift(1)) & 
                (df['high'] > df['high'].shift(-1)) & 
                (df['high'] > df['high'].shift(2)) & 
                (df['high'] > df['high'].shift(-2))
            ]
            
            df['swing_low'] = df['low'][
                (df['low'] < df['low'].shift(1)) & 
                (df['low'] < df['low'].shift(-1)) & 
                (df['low'] < df['low'].shift(2)) & 
                (df['low'] < df['low'].shift(-2))
            ]
            
            # –ü–∏–≤–æ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏
            df['pivot'] = (df['high'] + df['low'] + df['close']) / 3
            df['pivot_r1'] = 2 * df['pivot'] - df['low']
            df['pivot_s1'] = 2 * df['pivot'] - df['high']
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df
            
        return df
        
    def calculate_multitimeframe_analysis(self, data_dict):
        """–ú—É–ª—å—Ç–∏–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑"""
        if not data_dict:
            return {}
            
        analysis = {}
        
        for tf, df in data_dict.items():
            if df is not None and len(df) > 0:
                try:
                    last_row = df.iloc[-1]
                    analysis[tf] = {
                        'price': float(last_row['close']) if not pd.isna(last_row['close']) else 0,
                        'trend_ema': 'bullish' if last_row['close'] > last_row.get('ema_21', last_row['close']) else 'bearish',
                        'rsi': float(last_row.get('rsi', 50)) if not pd.isna(last_row.get('rsi', 50)) else 50,
                        'macd_trend': 'bullish' if (last_row.get('macd', 0) or 0) > (last_row.get('macd_signal', 0) or 0) else 'bearish',
                        'momentum': float(last_row.get('roc_3', 0)) if not pd.isna(last_row.get('roc_3', 0)) else 0,
                        'bb_position': float(last_row.get('bb_position', 0.5)) if not pd.isna(last_row.get('bb_position', 0.5)) else 0.5
                    }
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {tf}: {e}")
                    analysis[tf] = {
                        'price': float(df['close'].iloc[-1]) if len(df) > 0 and not pd.isna(df['close'].iloc[-1]) else 0,
                        'trend_ema': 'neutral',
                        'rsi': 50,
                        'macd_trend': 'neutral',
                        'momentum': 0,
                        'bb_position': 0.5
                    }
        
        return analysis
        
    def calculate_dynamic_levels(self, symbol, data_dict, signal_type):
        """–ë–û–õ–ï–ï –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ï –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏"""
        if not data_dict or '1h' not in data_dict:
            return self.calculate_basic_levels(symbol, data_dict, signal_type)
            
        df_1h = data_dict['1h']
        if df_1h is None or len(df_1h) < 20:
            return self.calculate_basic_levels(symbol, data_dict, signal_type)
            
        try:
            current_price = float(df_1h['close'].iloc[-1])
            atr = float(df_1h['atr'].iloc[-1]) if 'atr' in df_1h.columns and not pd.isna(df_1h['atr'].iloc[-1]) else current_price * 0.02
            
            # –ú–ï–ù–¨–®–ï —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
            base_sl_distance = atr * 1.1
            base_tp1_distance = atr * 1.6
            base_tp2_distance = atr * 2.4
            base_tp3_distance = atr * 3.2
            
            # –ú–ï–ù–¨–®–ï –º–Ω–æ–∂–∏—Ç–µ–ª–∏
            potential_multiplier = 1.0
            
            if signal_type == 'LONG':
                sl = current_price - (base_sl_distance * 0.95)  # –ú–µ–Ω—å—à–µ SL
                tp1 = current_price + (base_tp1_distance * potential_multiplier)
                tp2 = current_price + (base_tp2_distance * potential_multiplier * 1.02)
                tp3 = current_price + (base_tp3_distance * potential_multiplier * 1.05)
            else:
                sl = current_price + (base_sl_distance * 0.95)  # –ú–µ–Ω—å—à–µ SL
                tp1 = current_price - (base_tp1_distance * potential_multiplier)
                tp2 = current_price - (base_tp2_distance * potential_multiplier * 1.02)
                tp3 = current_price - (base_tp3_distance * potential_multiplier * 1.05)
            
            # –ë–û–õ–ï–ï –õ–ò–ë–ï–†–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ RR
            rr_ratio = abs(tp3 - current_price) / (abs(current_price - sl) + 0.0001)
            if rr_ratio < 0.6 or rr_ratio > 10:  # –®–∏—Ä–µ –¥–∏–∞–ø–∞–∑–æ–Ω
                raise Exception("–ù–µ—Ä–∞–∑—É–º–Ω—ã–π RR")
                
            return round(float(sl), 8), round(float(tp1), 8), round(float(tp2), 8), round(float(tp3), 8)
            
        except Exception as e:
            return self.calculate_basic_levels(symbol, data_dict, signal_type)
    
    def calculate_basic_levels(self, symbol, data_dict, signal_type):
        """–ë–∞–∑–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫"""
        try:
            if not data_dict or '1h' not in data_dict or data_dict['1h'] is None:
                # –ê–±—Å–æ–ª—é—Ç–Ω–æ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                current_price = 1000.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
            else:
                current_price = float(data_dict['1h']['close'].iloc[-1])
                
            atr = current_price * 0.015  # 1.5% –æ—Ç —Ü–µ–Ω—ã
            
            if signal_type == 'LONG':
                sl = current_price - atr * 1.2
                tp1 = current_price + atr * 1.8
                tp2 = current_price + atr * 3.0
                tp3 = current_price + atr * 4.5
            else:
                sl = current_price + atr * 1.2
                tp1 = current_price - atr * 1.8
                tp2 = current_price - atr * 3.0
                tp3 = current_price - atr * 4.5
                
            logger.debug(f"üîÑ {symbol} {signal_type} | –ë–ê–ó–û–í–´–ï —É—Ä–æ–≤–Ω–∏: "
                        f"SL: {sl:.8f} | TP1: {tp1:.8f} | TP2: {tp2:.8f} | TP3: {tp3:.8f}")
            
            return round(float(sl), 8), round(float(tp1), 8), round(float(tp2), 8), round(float(tp3), 8)
            
        except Exception as e:
            logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {e}")
            # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π fallback
            current_price = 1000.0
            if signal_type == 'LONG':
                return 990.0, 1005.0, 1015.0, 1025.0
            else:
                return 1010.0, 995.0, 985.0, 975.0
    
    def find_resistance_levels(self, df, current_price):
        """–ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        if df is None or len(df) < 20:
            return []
            
        try:
            # –°–≤–∏–Ω–≥ —Ö–∞–π
            swing_highs = df['swing_high'].dropna().tail(10)
            resistance_from_swing = list(swing_highs.values) if len(swing_highs) > 0 else []
            
            # –ü–∏–≤–æ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            pivot_resistance = []
            if 'pivot_r1' in df.columns:
                recent_pivots = df['pivot_r1'].tail(5).dropna()
                pivot_resistance = [p for p in recent_pivots if p > current_price]
            
            # –£—Ä–æ–≤–Ω–∏ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –±–∞—Ä–æ–≤
            recent_highs = df['high'].tail(50)
            dynamic_resistance = [h for h in recent_highs if h > current_price * 1.01]  # –ù–∞ 1% –≤—ã—à–µ
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
            all_resistance = resistance_from_swing + pivot_resistance + dynamic_resistance
            return sorted(list(set(all_resistance))) if all_resistance else []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: {e}")
            return []
    
    def find_support_levels(self, df, current_price):
        """–ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        if df is None or len(df) < 20:
            return []
            
        try:
            # –°–≤–∏–Ω–≥ –ª–æ—É
            swing_lows = df['swing_low'].dropna().tail(10)
            support_from_swing = list(swing_lows.values) if len(swing_lows) > 0 else []
            
            # –ü–∏–≤–æ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            pivot_support = []
            if 'pivot_s1' in df.columns:
                recent_pivots = df['pivot_s1'].tail(5).dropna()
                pivot_support = [p for p in recent_pivots if p < current_price]
            
            # –£—Ä–æ–≤–Ω–∏ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –±–∞—Ä–æ–≤
            recent_lows = df['low'].tail(50)
            dynamic_support = [l for l in recent_lows if l < current_price * 0.99]  # –ù–∞ 1% –Ω–∏–∂–µ
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
            all_support = support_from_swing + pivot_support + dynamic_support
            return sorted(list(set(all_support)), reverse=True) if all_support else []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
            return []
            
    def estimate_signal_formation_time(self, data_dict):
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        if not data_dict or '1h' not in data_dict:
            return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            
        try:
            df_1h = data_dict['1h']
            if df_1h is None or len(df_1h) < 10:
                return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
                
            recent_data = df_1h.tail(10)
            conditions_met_count = 0
            
            for i in range(len(recent_data)-1, -1, -1):
                row = recent_data.iloc[i]
                rsi = float(row.get('rsi', 50)) if not pd.isna(row.get('rsi', 50)) else 50
                stoch_k = float(row.get('stoch_k', 50)) if not pd.isna(row.get('stoch_k', 50)) else 50
                stoch_d = float(row.get('stoch_d', 50)) if not pd.isna(row.get('stoch_d', 50)) else 50
                macd = float(row.get('macd', 0)) if not pd.isna(row.get('macd', 0)) else 0
                macd_signal = float(row.get('macd_signal', 0)) if not pd.isna(row.get('macd_signal', 0)) else 0
                bb_position = float(row.get('bb_position', 0.5)) if not pd.isna(row.get('bb_position', 0.5)) else 0.5
                
                long_conditions = [
                    rsi < 35,
                    stoch_k < 30 and stoch_d < 30,
                    macd > macd_signal,
                    bb_position < 0.3
                ]
                
                short_conditions = [
                    rsi > 65,
                    stoch_k > 70 and stoch_d > 70,
                    macd < macd_signal,
                    bb_position > 0.7
                ]
                
                if sum(long_conditions) >= 3 or sum(short_conditions) >= 3:
                    conditions_met_count = len(recent_data) - i
                    break
                    
            if conditions_met_count > 0:
                formation_hours = conditions_met_count
                return f"~{formation_hours} —á–∞—Å–æ–≤"
            else:
                return "–£—Å–ª–æ–≤–∏—è —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            
    def generate_signal(self, symbol, data_dict, multitimeframe_analysis):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏"""
        if not data_dict or '1h' not in data_dict:
            logger.debug(f"‚ùå {symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö 1h")
            return None
            
        df_1h = data_dict['1h']
        if df_1h is None or len(df_1h) < 20:
            logger.debug(f"‚ùå {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({len(df_1h) if df_1h is not None else 0})")
            return None
            
        try:
            current_price = float(df_1h['close'].iloc[-1])
            atr = float(df_1h['atr'].iloc[-1]) if 'atr' in df_1h.columns and not pd.isna(df_1h['atr'].iloc[-1]) else current_price * 0.02
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            rsi = float(df_1h['rsi'].iloc[-1]) if not pd.isna(df_1h['rsi'].iloc[-1]) else 50
            stoch_k = float(df_1h['stoch_k'].iloc[-1]) if not pd.isna(df_1h['stoch_k'].iloc[-1]) else 50
            stoch_d = float(df_1h['stoch_d'].iloc[-1]) if not pd.isna(df_1h['stoch_d'].iloc[-1]) else 50
            macd = float(df_1h['macd'].iloc[-1]) if not pd.isna(df_1h['macd'].iloc[-1]) else 0
            macd_signal = float(df_1h['macd_signal'].iloc[-1]) if not pd.isna(df_1h['macd_signal'].iloc[-1]) else 0
            bb_position = float(df_1h['bb_position'].iloc[-1]) if not pd.isna(df_1h['bb_position'].iloc[-1]) else 0.5
            volume_ratio = float(df_1h['volume_ratio'].iloc[-1]) if not pd.isna(df_1h['volume_ratio'].iloc[-1]) else 1
            momentum_1h = float(df_1h['roc_3'].iloc[-1]) if not pd.isna(df_1h['roc_3'].iloc[-1]) else 0
            
            momentum_5m = 0
            momentum_15m = 0
            
            if '5m' in data_dict and data_dict['5m'] is not None and len(data_dict['5m']) > 5:
                df_5m = data_dict['5m']
                momentum_5m = float(df_5m['roc_3'].iloc[-1]) if not pd.isna(df_5m['roc_3'].iloc[-1]) else 0
                
            if '15m' in data_dict and data_dict['15m'] is not None and len(data_dict['15m']) > 5:
                df_15m = data_dict['15m']
                momentum_15m = float(df_15m['roc_3'].iloc[-1]) if not pd.isna(df_15m['roc_3'].iloc[-1]) else 0
            
            # –ë–û–õ–ï–ï –õ–ò–ë–ï–†–ê–õ–¨–ù–´–ï —É—Å–ª–æ–≤–∏—è –¥–ª—è LONG
            long_conditions = [
                rsi < 45,  # –ë—ã–ª–æ 40
                stoch_k < 35 and stoch_d < 35,  # –ë—ã–ª–æ 30/30
                macd > macd_signal,
                bb_position < 0.35,  # –ë—ã–ª–æ 0.3
                volume_ratio > 1.0,  # –ë—ã–ª–æ 1.1
                momentum_1h > -0.02   # –ë—ã–ª–æ -0.015
            ]
            
            # –ë–û–õ–ï–ï –õ–ò–ë–ï–†–ê–õ–¨–ù–´–ï —É—Å–ª–æ–≤–∏—è –¥–ª—è SHORT
            short_conditions = [
                rsi > 55,  # –ë—ã–ª–æ 60
                stoch_k > 65 and stoch_d > 65,
                macd < macd_signal,
                bb_position > 0.65,  # –ë—ã–ª–æ 0.7
                volume_ratio > 1.0,  # –ë—ã–ª–æ 1.1
                momentum_1h < 0.02   # –ë—ã–ª–æ 0.015
            ]
            
            signal_type = None
            confidence_score = 0
            
            long_score = sum(long_conditions)
            short_score = sum(short_conditions)
            
            # –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (1-5)
            signal_strength = 0
            if long_score >= 5 or short_score >= 5:
                signal_strength = 5
            elif long_score >= 4 or short_score >= 4:
                signal_strength = 4
            elif long_score >= 3 or short_score >= 3:
                signal_strength = 3
            elif long_score >= 2 or short_score >= 2:
                signal_strength = 2
            else:
                signal_strength = 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ SHORT —Å–∏–≥–Ω–∞–ª—ã
            if not self.risk_params['use_short_signals']:
                short_score = 0
                short_conditions = []
            
            # –ú–ï–ù–¨–®–ï —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
            if long_score >= 2:  # –ë—ã–ª–æ 3 - —Ç–µ–ø–µ—Ä—å 2 –∏–∑ 6
                signal_type = 'LONG'
                confidence_score = (long_score / len(long_conditions)) * 100
            elif short_score >= 2 and self.risk_params['use_short_signals']:
                signal_type = 'SHORT'
                confidence_score = (short_score / len(short_conditions)) * 100
                
            # –ù–ò–ñ–ï –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if signal_type and confidence_score >= 35:  # –ë—ã–ª–æ 50
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π
                should_filter = self.should_apply_strict_filters()
                
                if should_filter:
                    # –°—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
                    if not self.check_multitimeframe_confirmation(data_dict, signal_type):
                        logger.debug(f"‚ùå {symbol}: –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º)")
                        return None
                        
                    if not self.check_volatility_filter(df_1h):
                        logger.debug(f"‚ùå {symbol}: –ù–µ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º)")
                        return None
                        
                    if not self.check_volume_profile(data_dict):
                        logger.debug(f"‚ùå {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º (—Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º)")
                        return None
                        
                    if not self.check_correlation_filter(symbol, self.active_trades):
                        logger.debug(f"‚ùå {symbol}: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è (—Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º)")
                        return None
                else:
                    # –ú—è–≥–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ)
                    if not self.check_correlation_filter(symbol, self.active_trades):
                        logger.debug(f"‚ùå {symbol}: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è (–º—è–≥–∫–∏–π —Ä–µ–∂–∏–º)")
                        return None
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ TP –∏ SL
                sl, tp1, tp2, tp3 = self.calculate_dynamic_levels(symbol, data_dict, signal_type)
                
                if sl is None or tp1 is None or tp2 is None or tp3 is None:
                    logger.debug(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π")
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω–µ–π
                risk_reward_ratio = abs(tp3 - current_price) / (abs(current_price - sl) + 0.0001)
                
                # –ù–û–†–ú–ê–õ–¨–ù–´–ô RR ratio
                if signal_type == 'LONG' and sl < current_price and tp3 > current_price and risk_reward_ratio > 1.2:
                    valid = True
                elif signal_type == 'SHORT' and sl > current_price and tp3 < current_price and risk_reward_ratio > 1.2:
                    valid = True
                else:
                    valid = False
                    
                if valid:
                    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
                    formation_time = self.estimate_signal_formation_time(data_dict)
                    
                    # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ä–æ—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    potential_upside = ((tp3 - current_price) / current_price * 100) if signal_type == 'LONG' else ((current_price - tp3) / current_price * 100)
                    
                    return {
                        'symbol': symbol,
                        'signal_type': signal_type,
                        'entry_price': round(float(current_price), 8),
                        'tp1': round(float(tp1), 8),
                        'tp2': round(float(tp2), 8),
                        'tp3': round(float(tp3), 8),
                        'sl': round(float(sl), 8),
                        'confidence': round(float(confidence_score), 2),
                        'risk_reward_ratio': round(float(risk_reward_ratio), 2),
                        'potential_upside': round(float(potential_upside), 2),
                        'formation_time': formation_time,
                        'signal_strength': int(signal_strength),
                        'timeframe_analysis': {
                            '5m_momentum': round(float(momentum_5m), 6),
                            '15m_momentum': round(float(momentum_15m), 6),
                            '1h_momentum': round(float(momentum_1h), 6)
                        },
                        'technical_analysis': {
                            'rsi': round(float(rsi), 2),
                            'stoch_k': round(float(stoch_k), 2),
                            'macd': round(float(macd), 8),
                            'bb_position': round(float(bb_position), 2),
                            'volume_ratio': round(float(volume_ratio), 2),
                            'potential_multiplier': round(float((abs(tp3 - current_price) / (atr * 5)) if atr > 0 else 1), 2)
                        },
                        'timestamp': datetime.now().isoformat(),
                        'conditions_met': {
                            'long_score': int(long_score),
                            'short_score': int(short_score),
                            'total_conditions': len(long_conditions) if signal_type == 'LONG' else len(short_conditions)
                        }
                    }
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            
        return None
        
    def get_current_price(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ñ—å—é—á–µ—Ä—Å–∞"""
        try:
            ticker = self.exchange.fetch_ticker(symbol)
            return float(ticker['last'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ñ—å—é—á–µ—Ä—Å–∞ –¥–ª—è {symbol}: {e}")
            return None
            
    def check_active_trades(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        trades_to_remove = []
        for symbol in list(self.active_trades.keys()):
            result = self.check_trade_status(symbol)
            if result == 'closed':
                trades_to_remove.append(symbol)
                
        for symbol in trades_to_remove:
            if symbol in self.active_trades:
                del self.active_trades[symbol]
                
        if trades_to_remove or len(self.active_trades) > 0:
            self.save_state()
            
    def check_trade_status(self, symbol):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        if symbol not in self.active_trades:
            return 'not_found'
            
        trade = self.active_trades[symbol]
        current_price = self.get_current_price(symbol)
        
        if current_price is None:
            logger.info(f"üëÄ [{symbol}] –û—Ç—Å–ª–µ–∂–∏–≤–∞—é {trade['signal_type']} | –¶–µ–Ω–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ | –í—Ö–æ–¥: {trade['entry_price']} | –°—Ç–∞—Ç—É—Å: {self.get_trade_status(trade)}")
            return 'active'
            
        entry_price = float(trade['entry_price'])
        signal_type = trade['signal_type']
        
        logger.info(f"üëÄ [{symbol}] –û—Ç—Å–ª–µ–∂–∏–≤–∞—é {signal_type} | –¶–µ–Ω–∞: {current_price} | –í—Ö–æ–¥: {entry_price} | –°—Ç–∞—Ç—É—Å: {self.get_trade_status(trade)}")
        
        tp_levels = [float(trade['tp1']), float(trade['tp2']), float(trade['tp3'])]
        tp_names = ['TP1', 'TP2', 'TP3']
        
        for i, (tp, tp_name) in enumerate(zip(tp_levels, tp_names)):
            if f'{tp_name.lower()}_reached' not in trade or not trade[f'{tp_name.lower()}_reached']:
                reached = False
                if signal_type == 'LONG' and current_price >= tp:
                    reached = True
                elif signal_type == 'SHORT' and current_price <= tp:
                    reached = True
                    
                if reached:
                    trade[f'{tp_name.lower()}_reached'] = True
                    logger.info(f"üéØ [{symbol}] --- Take Profit {i+1} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç @ {tp} ---")
                    
                    if tp_name == 'TP3':
                        logger.info(f"üéâ [{symbol}] –°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê –ø–æ Take Profit 3 @ {tp}")
                        self.save_state()
                        return 'closed'
                        
        sl = float(trade['sl'])
        sl_reached = False
        if signal_type == 'LONG' and current_price <= sl:
            sl_reached = True
        elif signal_type == 'SHORT' and current_price >= sl:
            sl_reached = True
            
        if sl_reached:
            trade['sl_reached'] = True
            logger.info(f"üõë [{symbol}] –°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê –ø–æ Stop Loss @ {sl}")
            self.save_state()
            return 'closed'
            
        return 'active'
        
    def get_trade_status(self, trade):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏"""
        if trade.get('tp3_reached', False):
            return 'hit TP3'
        elif trade.get('tp2_reached', False):
            return 'hit TP2'
        elif trade.get('tp1_reached', False):
            return 'hit TP1'
        elif trade.get('sl_reached', False):
            return 'hit SL'
        else:
            return 'active'
            
    def send_signal(self, signal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        if signal is None:
            return
            
        symbol = signal['symbol']
        if symbol in self.signal_history and len(self.signal_history[symbol]) > 0:
            last_signal = self.signal_history[symbol][-1]
            try:
                last_timestamp = datetime.fromisoformat(last_signal['timestamp'].replace('Z', '+00:00')) if isinstance(last_signal['timestamp'], str) else last_signal['timestamp']
                current_timestamp = datetime.fromisoformat(signal['timestamp'].replace('Z', '+00:00')) if isinstance(signal['timestamp'], str) else signal['timestamp']
                
                if (current_timestamp - last_timestamp).total_seconds() < 3600:
                    return
            except:
                pass
                
        self.signal_history[symbol].append(self.convert_to_serializable(signal))
        if len(self.signal_history[symbol]) > 50:
            self.signal_history[symbol] = self.signal_history[symbol][-25:]
            
        signal_log_entry = {
            'timestamp': signal['timestamp'],
            'symbol': signal['symbol'],
            'signal_type': signal['signal_type'],
            'entry_price': float(signal['entry_price']),
            'tp1': float(signal['tp1']),
            'tp2': float(signal['tp2']),
            'tp3': float(signal['tp3']),
            'sl': float(signal['sl']),
            'confidence': float(signal['confidence']),
            'rr_ratio': float(signal['risk_reward_ratio']),
            'potential_upside': float(signal.get('potential_upside', 0)),
            'signal_strength': int(signal['signal_strength'])
        }
        self.signals_found.append(self.convert_to_serializable(signal_log_entry))
        
        self.analysis_stats['signals_generated'] += 1
        
        logger.info(f"‚úÖ [{signal['symbol']}] --- –û–¢–ö–†–´–¢–ê {signal['signal_type']} –°–î–ï–õ–ö–ê (–°–∏–ª–∞: {signal['signal_strength']}) @ {signal['entry_price']} ---")
        logger.info(f"   SL: {signal['sl']}, TP1: {signal['tp1']}, TP2: {signal['tp2']}, TP3: {signal['tp3']}")
        logger.info(f"   üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {signal.get('potential_upside', 0):.1f}% | RR: {signal['risk_reward_ratio']}")
        
        if symbol not in self.active_trades:
            self.active_trades[signal['symbol']] = self.convert_to_serializable(signal).copy()
            for tp_name in ['tp1', 'tp2', 'tp3']:
                self.active_trades[signal['symbol']][f'{tp_name}_reached'] = False
            self.active_trades[signal['symbol']]['sl_reached'] = False
            
            self.save_state()
            
    def save_signals_log(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            serializable_signals = [self.convert_to_serializable(signal) for signal in self.signals_found]
            serializable_stats = self.convert_to_serializable(self.analysis_stats)
                
            with open('signals_log.json', 'w', encoding='utf-8') as f:
                json.dump({
                    'signals': serializable_signals,
                    'stats': serializable_stats,
                    'generated_at': datetime.now().isoformat()
                }, f, ensure_ascii=False, indent=2, default=str)
                
            if self.signals_found:
                csv_data = []
                for signal in self.signals_found:
                    csv_signal = self.convert_to_serializable(signal).copy()
                    csv_data.append(csv_signal)
                df = pd.DataFrame(csv_data)
                df.to_csv('signals_log.csv', index=False)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        
    def process_symbol(self, symbol):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            data_dict = self.robust_data_fetch(symbol, self.timeframes)
            if not data_dict:
                return None
                
            for tf in self.timeframes:
                if tf in data_dict and data_dict[tf] is not None:
                    data_dict[tf] = self.calculate_advanced_indicators(data_dict[tf], tf)
            
            multitimeframe_analysis = self.calculate_multitimeframe_analysis(data_dict)
            
            if symbol not in self.active_trades:
                signal = self.generate_signal(symbol, data_dict, multitimeframe_analysis)
                return signal
            else:
                logger.debug(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω {symbol} - —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
            return None
            
    def backtest_strategy(self, symbol, days=30):
        """–ü—Ä–æ—Å—Ç–æ–π –±—ç–∫—Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º 100"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            ohlcv = self.exchange.fetch_ohlcv(symbol, '1h', limit=days*24)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            df = self.calculate_advanced_indicators(df, '1h')
            
            if df is None or len(df) < 50:
                return None
                
            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            signals = []
            position = None
            balance = 100  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 100
            trades = []
            
            for i in range(50, len(df)):
                current_data = df.iloc[:i+1]
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ data_dict –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
                temp_data_dict = {'1h': current_data}
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é)
                signal = self.generate_backtest_signal(symbol, temp_data_dict)
                
                if signal and position is None:
                    # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                    position = {
                        'type': signal['signal_type'],
                        'entry_price': signal['entry_price'],
                        'sl': signal['sl'],
                        'tp1': signal['tp1'],
                        'tp2': signal['tp2'],
                        'tp3': signal['tp3'],
                        'balance_at_entry': balance
                    }
                    signals.append({
                        'timestamp': df.index[i],
                        'action': 'OPEN',
                        'signal': signal
                    })
                    
                elif position is not None:
                    current_price = float(df['close'].iloc[i])
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                    exit_reason = None
                    exit_price = None
                    
                    if position['type'] == 'LONG':
                        if current_price <= position['sl']:
                            exit_reason = 'SL'
                            exit_price = position['sl']
                        elif current_price >= position['tp3']:
                            exit_reason = 'TP3'
                            exit_price = position['tp3']
                    else:  # SHORT
                        if current_price >= position['sl']:
                            exit_reason = 'SL'
                            exit_price = position['sl']
                        elif current_price <= position['tp3']:
                            exit_reason = 'TP3'
                            exit_price = position['tp3']
                    
                    if exit_reason:
                        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                        if position['type'] == 'LONG':
                            pnl_percent = (exit_price - position['entry_price']) / position['entry_price'] * 100
                        else:  # SHORT
                            pnl_percent = (position['entry_price'] - exit_price) / position['entry_price'] * 100
                        
                        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–¥–µ–ª–∫—É)
                        position_size = position['balance_at_entry'] * 0.01  # 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                        pnl_dollars = position_size * (pnl_percent / 100)
                        
                        balance += pnl_dollars
                        
                        trades.append({
                            'entry_price': position['entry_price'],
                            'exit_price': exit_price,
                            'pnl_percent': round(pnl_percent, 2),
                            'pnl_dollars': round(pnl_dollars, 2),
                            'balance_after_trade': round(balance, 2),
                            'reason': exit_reason
                        })
                        
                        signals.append({
                            'timestamp': df.index[i],
                            'action': 'CLOSE',
                            'reason': exit_reason,
                            'pnl_percent': round(pnl_percent, 2),
                            'pnl_dollars': round(pnl_dollars, 2)
                        })
                        
                        position = None
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if trades:
                total_trades = len(trades)
                winning_trades = len([t for t in trades if t['pnl_percent'] > 0])
                win_rate = winning_trades / total_trades if total_trades > 0 else 0
                avg_pnl = sum([t['pnl_percent'] for t in trades]) / total_trades if total_trades > 0 else 0
                total_pnl = sum([t['pnl_dollars'] for t in trades])
                final_balance = trades[-1]['balance_after_trade'] if trades else 100
                total_return = ((final_balance - 100) / 100) * 100  # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –¥–æ—Ö–æ–¥
                
                return {
                    'initial_balance': 100,
                    'final_balance': round(final_balance, 2),
                    'total_return_percent': round(total_return, 2),
                    'total_trades': total_trades,
                    'win_rate': round(win_rate * 100, 2),
                    'avg_pnl_percent': round(avg_pnl, 2),
                    'total_pnl_dollars': round(total_pnl, 2),
                    'trades': trades,
                    'signals': signals
                }
            else:
                return {
                    'initial_balance': 100,
                    'final_balance': 100,
                    'total_return_percent': 0,
                    'total_trades': 0,
                    'win_rate': 0,
                    'avg_pnl_percent': 0,
                    'total_pnl_dollars': 0,
                    'trades': [],
                    'signals': []
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è {symbol}: {e}")
            return None

    def generate_backtest_signal(self, symbol, data_dict):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É, –Ω–æ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        multitimeframe_analysis = self.calculate_multitimeframe_analysis(data_dict)
        return self.generate_signal(symbol, data_dict, multitimeframe_analysis)
        
    def run_analysis_cycle(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        cycle_start_time = datetime.now()
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ {len(self.symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä...")
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        self.adjust_parameters_for_market_regime()
        
        signals = []
        processed_count = 0
        
        for symbol in self.symbols:
            try:
                signal = self.process_symbol(symbol)
                if signal:
                    signals.append(signal)
                    self.send_signal(signal)
                processed_count += 1
                self.analysis_stats['total_analyzed'] += 1
                
                if processed_count % 5 == 0:
                    time.sleep(1)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol}: {e}")
        
        self.check_active_trades()
        self.save_signals_log()
        
        cycle_duration = datetime.now() - cycle_start_time
        logger.info(f"‚úÖ –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration.total_seconds():.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–∞—Ä. –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤.")
        
        self.save_state()
        
    def send_alert(self, message, alert_type='info'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        if alert_type == 'critical':
            logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢: {message}")
        elif alert_type == 'warning':
            logger.warning(f"‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {message}")
        elif alert_type == 'success':
            logger.info(f"‚úÖ –£–°–ü–ï–•: {message}")
        else:
            logger.info(f"üîî –ê–õ–ï–†–¢: {message}")

    def check_system_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            import requests
            response = requests.get('https://api.binance.com/api/v3/ping', timeout=5)
            if response.status_code != 200:
                issues.append("–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Binance API")
        except:
            issues.append("–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        try:
            total, used, free = shutil.disk_usage("/")
            if free < 100 * 1024 * 1024:  # –ú–µ–Ω–µ–µ 100MB
                issues.append("–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
        except:
            issues.append("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        try:
            memory = psutil.virtual_memory()
            if memory.percent > 90:
                issues.append("–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        except:
            issues.append("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        for issue in issues:
            self.send_alert(issue, 'warning')
        
        if not issues:
            self.send_alert("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ", 'success')
        
        return len(issues) == 0
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–∞...")
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(self.symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä –Ω–∞ {len(self.timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö")
        logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: {self.state_file}")
        logger.info(f"üìà SHORT —Å–∏–≥–Ω–∞–ª—ã: {'–í–ö–õ–Æ–ß–ï–ù–´' if self.risk_params['use_short_signals'] else '–í–´–ö–õ–Æ–ß–ï–ù–´'}")
        logger.info(f"üéØ TP/SL —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ä–æ—Å—Ç–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        logger.info(f"üïí –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É")
        
        if self.active_trades:
            logger.info(f"üì• –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(self.active_trades)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
            for symbol, trade in self.active_trades.items():
                logger.info(f"   üìå {symbol} | {trade['signal_type']} | –í—Ö–æ–¥: {trade['entry_price']}")
        
        cycle_count = 0
        while True:
            try:
                cycle_count += 1
                logger.info(f"üîÑ –¶–∏–∫–ª #{cycle_count}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                if cycle_count % 10 == 0:
                    self.check_system_health()
                
                self.run_analysis_cycle()
                
                logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ (1 –º–∏–Ω—É—Ç–∞)...")
                time.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞
                
            except KeyboardInterrupt:
                logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                self.save_state()
                self.save_signals_log()
                logger.info("üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                self.save_state()
                time.sleep(60)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
if __name__ == "__main__":
    bot = FuturesCryptoTradingBot()
    bot.run()