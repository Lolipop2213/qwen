import ccxt
import pandas as pd
import numpy as np
import ta
from datetime import datetime, timedelta
import time
import logging
import json
import os
from collections import defaultdict

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞ DEBUG, —á—Ç–æ–±—ã –ª–æ–≥–≥–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logger.setLevel(logging.DEBUG)
# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
formatter = logging.Formatter(log_format)
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ INFO –∏ –≤—ã—à–µ) ---
file_handler = logging.FileHandler('crypto_futures_bot.log', encoding='utf-8')
file_handler.setLevel(logging.INFO)  # <-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å INFO –¥–ª—è —Ñ–∞–π–ª–∞
file_handler.setFormatter(formatter)
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è DEBUG) ---
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG) # <-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å DEBUG –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler.setFormatter(formatter)
# –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ª–æ–≥–≥–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è)
logger.handlers.clear()
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(file_handler)
logger.addHandler(console_handler)
# –û—Ç–∫–ª—é—á–∞–µ–º propagate, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
logger.propagate = False

class FuturesCryptoTradingBot:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤ Binance
        self.exchange = ccxt.binance({
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future',  # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
                'adjustForTimeDifference': True
            }
        })
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        self.timeframes = ['5m', '15m', '1h', '4h']
        # –°–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä (30+ —Ç–æ–∫–µ–Ω–æ–≤) - MATIC/USDT —É–¥–∞–ª–µ–Ω
        self.symbols = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT',
            'ADA/USDT', 'DOGE/USDT', 'DOT/USDT', 'AVAX/USDT', 'LINK/USDT',
            'UNI/USDT', 'LTC/USDT', 'ATOM/USDT', 'ETC/USDT', 'FIL/USDT',
            'TRX/USDT', 'VET/USDT', 'XLM/USDT', 'ICP/USDT', 'FTM/USDT',
            'HBAR/USDT', 'NEAR/USDT', 'ALGO/USDT', 'EGLD/USDT', 'FLOW/USDT',
            'SAND/USDT', 'MANA/USDT', 'AXS/USDT', 'GALA/USDT', 'APE/USDT',
            'CHZ/USDT', 'ENJ/USDT', 'THETA/USDT', 'GMT/USDT', '1000PEPE/USDT',
            'SUI/USDT', 'JUP/USDT', 'WLD/USDT', 'INJ/USDT', 'TIA/USDT',
            'STRK/USDT', 'SEI/USDT', 'PYTH/USDT', 'JTO/USDT', 'APT/USDT',
            'FET/USDT', 'AGIX/USDT', 'OP/USDT', 'ARB/USDT', 'AAVE/USDT', 
            'LDO/USDT', 'ENS/USDT', 'MKR/USDT',
        ]
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        self.active_trades = {}
        self.signal_history = defaultdict(list)
        self.signals_found = []
        self.analysis_stats = {
            'total_analyzed': 0,
            'signals_generated': 0,
            'start_time': datetime.now().isoformat()
        }
        # --- –ù–û–í–û–ï: –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ª–æ–≥–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫ ---
        self.trade_closures_log = [] # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫—Ä—ã—Ç–∏—è—Ö
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---
        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
        self.data_cache = {}
        self.cache_expiry = 300  # 5 –º–∏–Ω—É—Ç
        # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.state_file = 'bot_state.json'
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.risk_params = {
            'min_confidence_threshold': 45,  # –õ–∏–±–µ—Ä–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            'min_volume_filter': 250000,
            'min_rr_ratio': 1.2,
            'use_short_signals': True,
            'atr_fallback_pct': 0.01,
            'sl_mult': 1.5,
            'sl_scale': 0.9,
            'tp1_mult': 2.0,
            'tp2_mult': 3.5,
            'tp3_mult': 5.5,
            'min_level_dist_pct': 0.001,
        }
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_state()
        self.load_market_data()

    def load_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.state_file):
                if os.path.getsize(self.state_file) == 0:
                    logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è {self.state_file} –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
                    self.create_default_state_file()
                    return
                with open(self.state_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if not content:
                        logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è {self.state_file} –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
                        self.create_default_state_file()
                        return
                    state = json.loads(content)
                if 'active_trades' in state:
                    self.active_trades = self.convert_to_serializable(state['active_trades'])
                    #logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(self.active_trades)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                if 'signal_history' in state:
                    raw_history = state['signal_history']
                    self.signal_history = defaultdict(list)
                    for symbol, signals in raw_history.items():
                        self.signal_history[symbol] = [self.convert_to_serializable(signal) for signal in signals]
                    total_signals = sum(len(signals) for signals in self.signal_history.values())
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
                if 'signals_found' in state:
                    self.signals_found = [self.convert_to_serializable(signal) for signal in state['signals_found']]
                    #logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(self.signals_found)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                if 'analysis_stats' in state:
                    self.analysis_stats = self.convert_to_serializable(state['analysis_stats'])
                    #logger.info("üì• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                # --- –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∞ –∑–∞–∫—Ä—ã—Ç–∏–π ---
                if 'trade_closures_log' in state:
                    raw_closures = state['trade_closures_log']
                    self.trade_closures_log = [self.convert_to_serializable(entry) for entry in raw_closures]
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(self.trade_closures_log)} –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–∫—Ä—ã—Ç–∏—è—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---
                logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            else:
                logger.info("üÜï –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ - —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.create_default_state_file()
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ JSON –≤ —Ñ–∞–π–ª–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            logger.warning("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            self.create_default_state_file()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            logger.warning("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            self.create_default_state_file()

    def create_default_state_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            default_state = {
                'active_trades': {},
                'signal_history': {},
                'signals_found': [],
                'analysis_stats': {
                    'total_analyzed': 0,
                    'signals_generated': 0,
                    'start_time': datetime.now().isoformat()
                },
                # --- –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∞ –∑–∞–∫—Ä—ã—Ç–∏–π –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ---
                'trade_closures_log': [],
                # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---
                'created_at': datetime.now().isoformat()
            }
            with open(self.state_file, 'w', encoding='utf-8') as f:
                json.dump(default_state, f, ensure_ascii=False, indent=2, default=str)
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            
    def convert_to_serializable(self, obj):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if isinstance(obj, dict):
            return {key: self.convert_to_serializable(value) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self.convert_to_serializable(item) for item in obj]
        elif isinstance(obj, (np.integer, np.floating)):
            return float(obj)
        elif isinstance(obj, np.bool_):
            return bool(obj)
        elif pd.api.types.is_integer_dtype(type(obj)) or pd.api.types.is_float_dtype(type(obj)):
            return float(obj)
        elif isinstance(obj, pd.Timestamp):
            return obj.isoformat()
        elif isinstance(obj, datetime):
            return obj.isoformat()
        else:
            return obj

    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        try:
            state = {
                'active_trades': self.convert_to_serializable(self.active_trades),
                'signal_history': self.convert_to_serializable(dict(self.signal_history)),
                'signals_found': self.convert_to_serializable(self.signals_found),
                'analysis_stats': self.convert_to_serializable(self.analysis_stats),
                # --- –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –∑–∞–∫—Ä—ã—Ç–∏–π ---
                'trade_closures_log': self.convert_to_serializable(self.trade_closures_log),
                # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---
                'saved_at': datetime.now().isoformat()
            }
            temp_file = self.state_file + '.tmp'
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(state, f, ensure_ascii=False, indent=2, default=str)
            os.replace(temp_file, self.state_file)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def load_market_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–∞—Ö"""
        try:
            markets = self.exchange.load_markets()
            futures_symbols = [symbol for symbol in self.symbols if symbol in markets]
            self.symbols = futures_symbols
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(markets)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤")
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–∞—Ä—ã: {len(self.symbols)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: {e}")

    def fetch_ohlcv_with_cache(self, symbol, timeframe, limit=100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"{symbol}_{timeframe}_{limit}"
        current_time = time.time()
        if cache_key in self.data_cache:
            cached_data, timestamp = self.data_cache[cache_key]
            if current_time - timestamp < self.cache_expiry:
                return cached_data
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        if len(data) > 0:
            df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            self.data_cache[cache_key] = (df, current_time)
            return df
        else:
            self.data_cache[cache_key] = (None, current_time)
            return None

    def fetch_ohlcv_multitimeframe(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º"""
        data = {}
        try:
            for tf in self.timeframes:
                limit = 200 if tf in ['5m', '15m'] else 100
                df = self.fetch_ohlcv_with_cache(symbol, tf, limit=limit)
                data[tf] = df
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None
        return data

    def calculate_advanced_indicators(self, df, timeframe):
        """–†–∞—Å—á–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        if df is None or len(df) < 20:
            return None
        try:
            # EMA
            df['ema_9'] = ta.trend.EMAIndicator(df['close'], window=9).ema_indicator()
            df['ema_21'] = ta.trend.EMAIndicator(df['close'], window=21).ema_indicator()
            df['ema_50'] = ta.trend.EMAIndicator(df['close'], window=50).ema_indicator()
            # MACD
            df['macd'] = df['ema_9'] - df['ema_21']
            df['macd_signal'] = df['macd'].rolling(window=9).mean()
            df['macd_histogram'] = df['macd'] - df['macd_signal']
            # RSI
            df['rsi'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi()
            df['rsi_sma'] = df['rsi'].rolling(window=14).mean()
            # –°—Ç–æ—Ö–∞—Å—Ç–∏–∫
            stoch = ta.momentum.StochasticOscillator(df['high'], df['low'], df['close'], window=14, smooth_window=3)
            df['stoch_k'] = stoch.stoch()
            df['stoch_d'] = stoch.stoch_signal()
            # –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä
            bb = ta.volatility.BollingerBands(df['close'], window=20, window_dev=2)
            df['bb_upper'] = bb.bollinger_hband()
            df['bb_middle'] = bb.bollinger_mavg()
            df['bb_lower'] = bb.bollinger_lband()
            df['bb_width'] = (df['bb_upper'] - df['bb_lower']) / (df['bb_middle'] + 0.0001)
            df['bb_position'] = (df['close'] - df['bb_lower']) / (df['bb_upper'] - df['bb_lower'] + 0.0001)
            # ATR
            df['atr'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range()
            # –û–±—ä–µ–º
            df['volume_ema'] = ta.trend.EMAIndicator(df['volume'], window=20).ema_indicator()
            df['volume_ratio'] = (df['volume'] / (df['volume_ema'] + 0.0001))
            # –ú–æ–º–µ–Ω—Ç—É–º
            df['roc_1'] = df['close'].pct_change(1)
            df['roc_3'] = df['close'].pct_change(3)
            df['roc_7'] = df['close'].pct_change(7)
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π
            df['candle_body'] = abs(df['close'] - df['open'])
            df['candle_ratio'] = df['candle_body'] / (df['high'] - df['low'] + 0.0001)
            # –¢—Ä–µ–Ω–¥
            df['price_trend_20'] = (df['close'] - df['close'].shift(20)) / (df['close'].shift(20) + 0.0001)
            df['price_trend_50'] = (df['close'] - df['close'].shift(50)) / (df['close'].shift(50) + 0.0001)
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            df['volatility'] = df['close'].pct_change().rolling(window=14).std() * np.sqrt(365)
            # –°–≤–∏–Ω–≥ —Ö–∞–π/–ª–æ—É
            df['swing_high'] = df['high'][
                (df['high'] > df['high'].shift(1)) & 
                (df['high'] > df['high'].shift(-1)) & 
                (df['high'] > df['high'].shift(2)) & 
                (df['high'] > df['high'].shift(-2))
            ]
            df['swing_low'] = df['low'][
                (df['low'] < df['low'].shift(1)) & 
                (df['low'] < df['low'].shift(-1)) & 
                (df['low'] < df['low'].shift(2)) & 
                (df['low'] < df['low'].shift(-2))
            ]
            # –ü–∏–≤–æ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏
            df['pivot'] = (df['high'] + df['low'] + df['close']) / 3
            df['pivot_r1'] = 2 * df['pivot'] - df['low']
            df['pivot_s1'] = 2 * df['pivot'] - df['high']
            # –ü–∏–Ω–±–∞—Ä—ã –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            df['body'] = abs(df['close'] - df['open'])
            df['upper_wick'] = df['high'] - df[['open', 'close']].max(axis=1)
            df['lower_wick'] = df[['open', 'close']].min(axis=1) - df['low']
            df['wick_ratio'] = df['body'] / (df['high'] - df['low'] + 0.0001)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df
        return df

    def detect_advanced_candlestick_patterns(self, df):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–≤–µ—á–µ–π"""
        if df is None or len(df) < 10:
            return {}
        patterns = {}
        try:
            # PINBAR (–ø–∏–Ω—Ü–µ—Ç)
            if len(df) >= 2:
                current = df.iloc[-1]
                prev = df.iloc[-2]
                body = abs(current['close'] - current['open'])
                total_range = current['high'] - current['low']
                upper_wick = current['high'] - max(current['close'], current['open'])
                lower_wick = min(current['close'], current['open']) - current['low']
                # –ü–∏–Ω–±–∞—Ä –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–µ/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–∏
                if total_range > 0 and body/total_range < 0.3:  # –ú–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ
                    if upper_wick > body * 2 and lower_wick < body * 0.5:  # –î–ª–∏–Ω–Ω—ã–π –≤–µ—Ä—Ö–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
                        patterns['pinbar_bearish'] = True
                    elif lower_wick > body * 2 and upper_wick < body * 0.5:  # –î–ª–∏–Ω–Ω—ã–π –Ω–∏–∂–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
                        patterns['pinbar_bullish'] = True
            # DOJI
            if len(df) >= 1:
                current = df.iloc[-1]
                body = abs(current['close'] - current['open'])
                total_range = current['high'] - current['low']
                if total_range > 0 and body/total_range < 0.1:
                    patterns['doji'] = True
            # SPINNING TOP
            if len(df) >= 1:
                current = df.iloc[-1]
                body = abs(current['close'] - current['open'])
                total_range = current['high'] - current['low']
                if total_range > 0 and 0.1 <= body/total_range <= 0.3:
                    patterns['spinning_top'] = True
            # THREE WHITE SOLDIERS (—Ç—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞)
            if len(df) >= 3:
                soldier1 = df.iloc[-3]
                soldier2 = df.iloc[-2]
                soldier3 = df.iloc[-1]
                if (soldier1['close'] > soldier1['open'] and  # –í—Å–µ –∑–µ–ª–µ–Ω—ã–µ
                    soldier2['close'] > soldier2['open'] and
                    soldier3['close'] > soldier3['open'] and
                    soldier3['close'] > soldier2['close'] > soldier1['close'] and  # –ö–∞–∂–¥–∞—è –≤—ã—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                    soldier2['open'] > soldier1['open'] and soldier3['open'] > soldier2['open']):  # –ö–∞–∂–¥–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤—ã—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                    patterns['three_white_soldiers'] = True
            # THREE BLACK CROWS (—Ç—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞)
            if len(df) >= 3:
                crow1 = df.iloc[-3]
                crow2 = df.iloc[-2]
                crow3 = df.iloc[-1]
                if (crow1['close'] < crow1['open'] and  # –í—Å–µ –∫—Ä–∞—Å–Ω—ã–µ
                    crow2['close'] < crow2['open'] and
                    crow3['close'] < crow3['open'] and
                    crow3['close'] < crow2['close'] < crow1['close'] and  # –ö–∞–∂–¥–∞—è –Ω–∏–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                    crow2['open'] < crow1['open'] and crow3['open'] < crow2['open']):  # –ö–∞–∂–¥–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∏–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                    patterns['three_black_crows'] = True
            # MORNING STAR (—É—Ç—Ä–µ–Ω–Ω—è—è –∑–≤–µ–∑–¥–∞)
            if len(df) >= 3:
                first = df.iloc[-3]  # –ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞
                second = df.iloc[-2]  # –ú–∞–ª–µ–Ω—å–∫–∞—è —Å–≤–µ—á–∞
                third = df.iloc[-1]   # –ó–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞
                body_first = abs(first['close'] - first['open'])
                body_second = abs(second['close'] - second['open'])
                body_third = abs(third['close'] - third['open'])
                if (first['close'] < first['open'] and  # –ü–µ—Ä–≤–∞—è –∫—Ä–∞—Å–Ω–∞—è
                    body_second < body_first * 0.5 and  # –í—Ç–æ—Ä–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è
                    third['close'] > third['open'] and   # –¢—Ä–µ—Ç—å—è –∑–µ–ª–µ–Ω–∞—è
                    third['close'] > first['open']):     # –¢—Ä–µ—Ç—å—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤—ã—à–µ –ø–µ—Ä–≤–æ–π
                    patterns['morning_star'] = True
            # EVENING STAR (–≤–µ—á–µ—Ä–Ω—è—è –∑–≤–µ–∑–¥–∞)
            if len(df) >= 3:
                first = df.iloc[-3]  # –ó–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞
                second = df.iloc[-2]  # –ú–∞–ª–µ–Ω—å–∫–∞—è —Å–≤–µ—á–∞
                third = df.iloc[-1]   # –ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞
                body_first = abs(first['close'] - first['open'])
                body_second = abs(second['close'] - second['open'])
                body_third = abs(third['close'] - third['open'])
                if (first['close'] > first['open'] and  # –ü–µ—Ä–≤–∞—è –∑–µ–ª–µ–Ω–∞—è
                    body_second < body_first * 0.5 and  # –í—Ç–æ—Ä–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è
                    third['close'] < third['open'] and   # –¢—Ä–µ—Ç—å—è –∫—Ä–∞—Å–Ω–∞—è
                    third['close'] < first['open']):     # –¢—Ä–µ—Ç—å—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∏–∂–µ –ø–µ—Ä–≤–æ–π
                    patterns['evening_star'] = True
            # HARAMI (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–µ—á–∞)
            if len(df) >= 2:
                parent = df.iloc[-2]  # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å–≤–µ—á–∞
                child = df.iloc[-1]   # –î–æ—á–µ—Ä–Ω—è—è —Å–≤–µ—á–∞
                if (parent['close'] > parent['open'] and  # –†–æ–¥–∏—Ç–µ–ª—å –∑–µ–ª–µ–Ω—ã–π
                    child['close'] < child['open'] and    # –î–æ—á–µ—Ä–Ω—è—è –∫—Ä–∞—Å–Ω–∞—è
                    child['high'] < parent['high'] and    # –î–æ—á–µ—Ä–Ω—è—è –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
                    child['low'] > parent['low']):
                    patterns['bearish_harami'] = True
                elif (parent['close'] < parent['open'] and  # –†–æ–¥–∏—Ç–µ–ª—å –∫—Ä–∞—Å–Ω—ã–π
                      child['close'] > child['open'] and    # –î–æ—á–µ—Ä–Ω—è—è –∑–µ–ª–µ–Ω–∞—è
                      child['high'] < parent['high'] and    # –î–æ—á–µ—Ä–Ω—è—è –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
                      child['low'] > parent['low']):
                    patterns['bullish_harami'] = True
            # ENGULFING (–ø–æ–≥–ª–æ—â–µ–Ω–∏–µ)
            if len(df) >= 2:
                first = df.iloc[-2]  # –ü–µ—Ä–≤–∞—è —Å–≤–µ—á–∞
                second = df.iloc[-1]  # –í—Ç–æ—Ä–∞—è —Å–≤–µ—á–∞
                # BULLISH ENGULFING (–±—ã—á—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ)
                if (first['close'] < first['open'] and  # –ü–µ—Ä–≤–∞—è –∫—Ä–∞—Å–Ω–∞—è
                    second['close'] > second['open'] and  # –í—Ç–æ—Ä–∞—è –∑–µ–ª–µ–Ω–∞—è
                    second['close'] > first['open'] and    # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Ç–æ—Ä–æ–π –≤—ã—à–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–π
                    second['open'] < first['close']):      # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—Ç–æ—Ä–æ–π –Ω–∏–∂–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–π
                    patterns['bullish_engulfing'] = True
                # BEARISH ENGULFING (–º–µ–¥–≤–µ–∂—å–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ)
                elif (first['close'] > first['open'] and  # –ü–µ—Ä–≤–∞—è –∑–µ–ª–µ–Ω–∞—è
                      second['close'] < second['open'] and  # –í—Ç–æ—Ä–∞—è –∫—Ä–∞—Å–Ω–∞—è
                      second['close'] < first['open'] and   # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Ç–æ—Ä–æ–π –Ω–∏–∂–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–π
                      second['open'] > first['close']):     # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—Ç–æ—Ä–æ–π –≤—ã—à–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–µ—Ä–≤–æ–π
                    patterns['bearish_engulfing'] = True
            # HAMMER (–º–æ–ª–æ—Ç)
            if len(df) >= 1:
                current = df.iloc[-1]
                body = abs(current['close'] - current['open'])
                upper_wick = current['high'] - max(current['close'], current['open'])
                lower_wick = min(current['close'], current['open']) - current['low']
                if (lower_wick > body * 2 and  # –î–ª–∏–Ω–Ω—ã–π –Ω–∏–∂–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
                    upper_wick < body * 0.5 and  # –ö–æ—Ä–æ—Ç–∫–∏–π –≤–µ—Ä—Ö–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
                    body > 0):
                    patterns['hammer'] = True
            # SHOOTING STAR (–ø–∞–¥–∞—é—â–∞—è –∑–≤–µ–∑–¥–∞)
            if len(df) >= 1:
                current = df.iloc[-1]
                body = abs(current['close'] - current['open'])
                upper_wick = current['high'] - max(current['close'], current['open'])
                lower_wick = min(current['close'], current['open']) - current['low']
                if (upper_wick > body * 2 and  # –î–ª–∏–Ω–Ω—ã–π –≤–µ—Ä—Ö–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
                    lower_wick < body * 0.5 and  # –ö–æ—Ä–æ—Ç–∫–∏–π –Ω–∏–∂–Ω–∏–π —Ñ–∏—Ç–∏–ª—å
                    body > 0):
                    patterns['shooting_star'] = True
            # TWEZZER TOPS/BOTTOMS (—â–∏–ø—Ü—ã)
            if len(df) >= 2:
                first = df.iloc[-2]
                second = df.iloc[-1]
                # TWEZZER BOTTOMS
                if (abs(first['low'] - second['low']) < (first['high'] - first['low']) * 0.05 and  # –ü–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–∏–Ω–∏–º—É–º—ã
                    first['close'] < first['open'] and second['close'] > second['open']):  # –ü–µ—Ä–≤–∞—è –∫—Ä–∞—Å–Ω–∞—è, –≤—Ç–æ—Ä–∞—è –∑–µ–ª–µ–Ω–∞—è
                    patterns['tweezer_bottoms'] = True
                # TWEZZER TOPS
                elif (abs(first['high'] - second['high']) < (first['high'] - first['low']) * 0.05 and  # –ü–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–∞–∫—Å–∏–º—É–º—ã
                      first['close'] > first['open'] and second['close'] < second['open']):  # –ü–µ—Ä–≤–∞—è –∑–µ–ª–µ–Ω–∞—è, –≤—Ç–æ—Ä–∞—è –∫—Ä–∞—Å–Ω–∞—è
                    patterns['tweezer_tops'] = True
            # GAP UP/DOWN (–≥—ç–ø—ã)
            if len(df) >= 2:
                prev = df.iloc[-2]
                current = df.iloc[-1]
                # GAP UP
                if current['low'] > prev['high']:
                    patterns['gap_up'] = True
                # GAP DOWN
                elif current['high'] < prev['low']:
                    patterns['gap_down'] = True
            # INSIDE BAR (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–µ—á–∞)
            if len(df) >= 2:
                parent = df.iloc[-2]
                child = df.iloc[-1]
                if (child['high'] < parent['high'] and  # –î–æ—á–µ—Ä–Ω—è—è –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
                    child['low'] > parent['low']):
                    patterns['inside_bar'] = True
            # OUTSIDE BAR (–≤–Ω–µ—à–Ω—è—è —Å–≤–µ—á–∞)
            if len(df) >= 2:
                parent = df.iloc[-2]
                child = df.iloc[-1]
                if (child['high'] > parent['high'] and  # –î–æ—á–µ—Ä–Ω—è—è –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é
                    child['low'] < parent['low']):
                    patterns['outside_bar'] = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
        return patterns

    def calculate_multitimeframe_analysis(self, data_dict):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –∏–º–ø—É–ª—å—Å–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞.
        """
        if not data_dict:
            return {}
        analysis_results = {
            'trend_consistency': 'neutral', # 'strong_long', 'long', 'neutral', 'short', 'strong_short'
            'momentum_alignment': 'neutral', # 'aligned_long', 'aligned_short', 'divergent', 'neutral'
            'volatility_regime': 'normal', # 'low', 'normal', 'high'
            'timeframe_agreement_score': 0 # 0-100, –≥–¥–µ 100 - –ø–æ–ª–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ
        }
        try:
            # --- 1. –ê–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–¥–∞ ---
            trend_signals = []
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã —Å —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –≤ calculate_advanced_indicators
            for tf in ['15m', '1h', '4h']: # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä—à–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
                if tf in data_dict and data_dict[tf] is not None and len(data_dict[tf]) > 20:
                    df = data_dict[tf]
                    # –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–Ω–¥: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è —Å 20-–ø–µ—Ä–∏–æ–¥–Ω–æ–π MA –∏–ª–∏ —Ü–µ–Ω–æ–π 20 –±–∞—Ä–æ–≤ –Ω–∞–∑–∞–¥
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º price_trend_20, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω
                    if 'price_trend_20' in df.columns:
                        trend_val = df['price_trend_20'].iloc[-1]
                        if not pd.isna(trend_val):
                            if trend_val > 0.01: # –ü–æ—Ä–æ–≥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1%
                                trend_signals.append(1) # Long
                            elif trend_val < -0.01:
                                trend_signals.append(-1) # Short
                            else:
                                trend_signals.append(0) # Neutral/Flat
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–∞
            if len(trend_signals) >= 2: # –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 2 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                long_votes = sum(1 for t in trend_signals if t == 1)
                short_votes = sum(1 for t in trend_signals if t == -1)
                neutral_votes = sum(1 for t in trend_signals if t == 0)
                if long_votes == len(trend_signals): # –í—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–∞—é—Ç —Å–∏–≥–Ω–∞–ª Long
                    analysis_results['trend_consistency'] = 'strong_long'
                elif short_votes == len(trend_signals): # –í—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–∞—é—Ç —Å–∏–≥–Ω–∞–ª Short
                    analysis_results['trend_consistency'] = 'strong_short'
                elif long_votes > short_votes and long_votes >= 2: # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ Long
                    analysis_results['trend_consistency'] = 'long'
                elif short_votes > long_votes and short_votes >= 2: # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ Short
                    analysis_results['trend_consistency'] = 'short'
                # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –æ—Å—Ç–∞–µ—Ç—Å—è 'neutral'
            # --- 2. –ê–Ω–∞–ª–∏–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∏–º–ø—É–ª—å—Å–∞ ---
            momentum_signals = []
            for tf in ['5m', '15m', '1h']:
                 if tf in data_dict and data_dict[tf] is not None and len(data_dict[tf]) > 3:
                    df = data_dict[tf]
                    if 'roc_3' in df.columns: # –ò—Å–ø–æ–ª—å–∑—É–µ–º ROC –∫–∞–∫ –º–µ—Ä—É –∏–º–ø—É–ª—å—Å–∞
                        mom_val = df['roc_3'].iloc[-1]
                        if not pd.isna(mom_val):
                             if mom_val > 0.005: # –ü–æ—Ä–æ–≥ –∏–º–ø—É–ª—å—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5%
                                momentum_signals.append(1) # Positive momentum
                             elif mom_val < -0.005:
                                momentum_signals.append(-1) # Negative momentum
                             # else: –±–ª–∏–∑–∫–æ –∫ –Ω—É–ª—é, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏–º–ø—É–ª—å—Å–∞
            if len(momentum_signals) >= 2:
                 pos_mom_votes = sum(1 for m in momentum_signals if m == 1)
                 neg_mom_votes = sum(1 for m in momentum_signals if m == -1)
                 if pos_mom_votes == len(momentum_signals):
                      analysis_results['momentum_alignment'] = 'aligned_long'
                 elif neg_mom_votes == len(momentum_signals):
                      analysis_results['momentum_alignment'] = 'aligned_short'
                 elif pos_mom_votes > 0 and neg_mom_votes > 0:
                      analysis_results['momentum_alignment'] = 'divergent' # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–ø—É–ª—å—Å–æ–≤
                 # else: –æ—Å—Ç–∞–µ—Ç—Å—è neutral
            # --- 3. –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ ---
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'volatility' —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ 1h –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –º–µ—Ä—É
            if '1h' in data_dict and data_dict['1h'] is not None and len(data_dict['1h']) > 14:
                df_1h = data_dict['1h']
                if 'volatility' in df_1h.columns:
                    current_vol = df_1h['volatility'].iloc[-1]
                    avg_vol = df_1h['volatility'].iloc[-14:].mean() # –°—Ä–µ–¥–Ω—è—è –∑–∞ 14 –ø–µ—Ä–∏–æ–¥–æ–≤
                    if not pd.isna(current_vol) and not pd.isna(avg_vol) and avg_vol > 0:
                         vol_ratio = current_vol / avg_vol
                         if vol_ratio > 1.5:
                              analysis_results['volatility_regime'] = 'high'
                         elif vol_ratio < 0.7:
                              analysis_results['volatility_regime'] = 'low'
                         # else: –æ—Å—Ç–∞–µ—Ç—Å—è normal
            # --- 4. –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å—á–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–∏—è ---
            score = 50 # –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
            if analysis_results['trend_consistency'] == 'strong_long':
                score += 15
            elif analysis_results['trend_consistency'] == 'long':
                score += 7
            elif analysis_results['trend_consistency'] == 'strong_short':
                score -= 15
            elif analysis_results['trend_consistency'] == 'short':
                score -= 7
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π –∏–º–ø—É–ª—å—Å
            if analysis_results['momentum_alignment'] == 'aligned_long':
                score += 10
            elif analysis_results['momentum_alignment'] == 'aligned_short':
                score -= 10
            elif analysis_results['momentum_alignment'] == 'divergent':
                score -= 5 # –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
            # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞, –Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ)
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —Å–Ω–∏–∂–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å,
            # –∞ –æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è.
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç –º–µ–∂–¥—É 0 –∏ 100
            analysis_results['timeframe_agreement_score'] = max(0, min(100, int(score)))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ calculate_multitimeframe_analysis: {e}")
        return analysis_results

    def calculate_dynamic_levels(self, symbol, data_dict, signal_type):
        """
        –†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö TP/SL —É—Ä–æ–≤–Ω–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä—ã–Ω–∫–∞
        """
        if not data_dict or '1h' not in data_dict:
            logger.debug(f"[{symbol}] calculate_dynamic_levels: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö 1h")
            return None
        df_1h = data_dict['1h']
        if df_1h is None or len(df_1h) < 20:
            logger.debug(f"[{symbol}] calculate_dynamic_levels: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            return None

        try:
            current_price = float(df_1h['close'].iloc[-1])
            atr = self.get_effective_atr(df_1h, current_price, self.risk_params.get('atr_fallback_pct', 0.01))

            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            rsi = float(df_1h['rsi'].iloc[-1]) if pd.notna(df_1h['rsi'].iloc[-1]) else 50
            bb_position = float(df_1h['bb_position'].iloc[-1]) if pd.notna(df_1h['bb_position'].iloc[-1]) else 0.5
            momentum_1h = float(df_1h['roc_7'].iloc[-1]) if pd.notna(df_1h['roc_7'].iloc[-1]) else 0.0
            volume_ratio = float(df_1h['volume_ratio'].iloc[-1]) if pd.notna(df_1h['volume_ratio'].iloc[-1]) else 1.0

            # –¢—Ä–µ–Ω–¥ 1h –∏ 4h
            trend_strength_1h, trend_strength_4h = 0.0, 0.0
            if len(df_1h) > 20:
                trend_strength_1h = (df_1h['close'].iloc[-1] - df_1h['close'].iloc[-20]) / (df_1h['close'].iloc[-20] + 1e-12)
            if '4h' in data_dict and data_dict['4h'] is not None and len(data_dict['4h']) > 20:
                df_4h = data_dict['4h']
                trend_strength_4h = (df_4h['close'].iloc[-1] - df_4h['close'].iloc[-20]) / (df_4h['close'].iloc[-20] + 1e-12)

            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
            if signal_type.upper() == 'LONG':
                rsi_factor = max(0.7, min(2.0, (70 - rsi) / 20))
                bb_factor = max(0.7, min(2.0, (1.0 - bb_position) * 2.0))
                momentum_factor = max(0.7, min(2.0, 1.0 + momentum_1h * 15.0))
                trend_factor = max(0.7, min(2.0, 1.0 + (trend_strength_1h + trend_strength_4h) * 8.0))
            else:
                rsi_factor = max(0.7, min(2.0, (rsi - 30) / 20))
                bb_factor = max(0.7, min(2.0, bb_position * 2.0))
                momentum_factor = max(0.7, min(2.0, 1.0 - momentum_1h * 15.0))
                trend_factor = max(0.7, min(2.0, 1.0 - (trend_strength_1h + trend_strength_4h) * 8.0))

            volume_factor = max(0.8, min(1.5, volume_ratio * 0.4 + 0.7))
            potential_multiplier = max(0.7, min(2.5, (rsi_factor + bb_factor + momentum_factor + trend_factor + volume_factor) / 5.0))

            # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –∏–∑ risk_params
            sl_mult = float(self.risk_params.get('sl_mult', 1.5))
            sl_scale = float(self.risk_params.get('sl_scale', 0.9))
            tp1_mult = float(self.risk_params.get('tp1_mult', 2.0))
            tp2_mult = float(self.risk_params.get('tp2_mult', 3.5))
            tp3_mult = float(self.risk_params.get('tp3_mult', 5.5))

            # –†–∞—Å—á—ë—Ç —É—Ä–æ–≤–Ω–µ–π
            base_sl = atr * sl_mult * sl_scale
            base_tp1 = atr * tp1_mult * potential_multiplier
            base_tp2 = atr * tp2_mult * potential_multiplier
            base_tp3 = atr * tp3_mult * potential_multiplier

            if signal_type.upper() == 'LONG':
                sl  = current_price - base_sl
                tp1 = current_price + base_tp1
                tp2 = current_price + base_tp2
                tp3 = current_price + base_tp3
            else:
                sl  = current_price + base_sl
                tp1 = current_price - base_tp1
                tp2 = current_price - base_tp2
                tp3 = current_price - base_tp3

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
            min_dist = current_price * float(self.risk_params.get('min_level_dist_pct', 0.001))
            if signal_type.upper() == 'LONG':
                sl  = min(sl, current_price - min_dist)
                tp1 = max(tp1, current_price + min_dist)
                tp2 = max(tp2, tp1 + min_dist)
                tp3 = max(tp3, tp2 + min_dist)
            else:
                sl  = max(sl, current_price + min_dist)
                tp1 = min(tp1, current_price - min_dist)
                tp2 = min(tp2, tp1 - min_dist)
                tp3 = min(tp3, tp2 - min_dist)

            # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
            sl  = self.round_price(symbol, sl)
            tp1 = self.round_price(symbol, tp1)
            tp2 = self.round_price(symbol, tp2)
            tp3 = self.round_price(symbol, tp3)

            logger.debug(f"[{symbol}] TP/SL: SL={sl:.8f}, TP1={tp1:.8f}, TP2={tp2:.8f}, TP3={tp3:.8f}")
            return float(sl), float(tp1), float(tp2), float(tp3)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π: {e}")
            return None

        
    def calculate_basic_levels(self, symbol, data_dict, signal_type):
        """
        –ë–∞–∑–æ–≤—ã–µ TP/SL —É—Ä–æ–≤–Ω–∏ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
        –£—á–∏—Ç—ã–≤–∞–µ—Ç fallback ATR, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ risk_params –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ –±–∏—Ä–∂–µ.
        """
        try:
            # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã ---
            if not data_dict or '1h' not in data_dict or data_dict['1h'] is None or len(data_dict['1h']) == 0:
                logger.warning(f"[{symbol}] calculate_basic_levels: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö 1h. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ü–µ–Ω–∞.")
                current_price = 1000.0
                df_1h = None
            else:
                df_1h = data_dict['1h']
                current_price = float(df_1h['close'].iloc[-1])

            # --- –ü–æ–ª—É—á–µ–Ω–∏–µ ATR ---
            atr = self.get_effective_atr(df_1h, current_price, self.risk_params.get('atr_fallback_pct', 0.01))
            logger.debug(f"[{symbol}] calculate_basic_levels: –¶–µ–Ω–∞={current_price:.8f}, ATR={atr:.8f}")

            # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ risk_params ---
            sl_mult = float(self.risk_params.get('sl_mult', 1.5))
            sl_scale = float(self.risk_params.get('sl_scale', 0.9))
            tp1_mult = float(self.risk_params.get('tp1_mult', 2.0))
            tp2_mult = float(self.risk_params.get('tp2_mult', 3.5))
            tp3_mult = float(self.risk_params.get('tp3_mult', 5.5))
            min_dist_pct = float(self.risk_params.get('min_level_dist_pct', 0.001))
            min_dist = current_price * min_dist_pct

            # --- –†–∞—Å—á—ë—Ç –±–∞–∑–æ–≤—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π ---
            sl_distance  = atr * sl_mult * sl_scale
            tp1_distance = atr * tp1_mult
            tp2_distance = atr * tp2_mult
            tp3_distance = atr * tp3_mult

            # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ---
            if signal_type.upper() == 'LONG':
                sl  = current_price - sl_distance
                tp1 = current_price + tp1_distance
                tp2 = current_price + tp2_distance
                tp3 = current_price + tp3_distance

                sl  = min(sl, current_price - min_dist)
                tp1 = max(tp1, current_price + min_dist)
                tp2 = max(tp2, tp1 + min_dist)
                tp3 = max(tp3, tp2 + min_dist)

            else:  # SHORT
                sl  = current_price + sl_distance
                tp1 = current_price - tp1_distance
                tp2 = current_price - tp2_distance
                tp3 = current_price - tp3_distance

                sl  = max(sl, current_price + min_dist)
                tp1 = min(tp1, current_price - min_dist)
                tp2 = min(tp2, tp1 - min_dist)
                tp3 = min(tp3, tp2 - min_dist)

            # --- –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ —à–∞–≥—É —Ü–µ–Ω—ã ---
            sl  = self.round_price(symbol, sl)
            tp1 = self.round_price(symbol, tp1)
            tp2 = self.round_price(symbol, tp2)
            tp3 = self.round_price(symbol, tp3)

            logger.debug(f"[{symbol}] calculate_basic_levels: SL={sl:.8f}, TP1={tp1:.8f}, TP2={tp2:.8f}, TP3={tp3:.8f}")
            return float(sl), float(tp1), float(tp2), float(tp3)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è {symbol}: {e}")
            # --- –ñ–µ—Å—Ç–∫–∏–π fallback ---
            current_price = 1000.0
            if signal_type.upper() == 'LONG':
                return 990.0, 1005.0, 1015.0, 1025.0
            else:
                return 1010.0, 995.0, 985.0, 975.0


        
    def has_trend_reversed(self, symbol, trade):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (bool, reason) ‚Äî –ø—Ä–æ–∏–∑–æ—à—ë–ª –ª–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞ –ø—Ä–æ—Ç–∏–≤ —Å–¥–µ–ª–∫–∏.
        –õ–æ–≥–∏–∫–∞: –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¢–§ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –±–∞—Ä–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ç—Ä–µ–Ω–¥:
        - EMA21 –ø—Ä–æ—Ç–∏–≤ EMA50
        - price_trend_20 –ø—Ä–æ—Ç–∏–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ —Å –ø–æ—Ä–æ–≥–æ–º
        - (–æ–ø—Ü.) MACD-–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç
        - (–æ–ø—Ü.) RSI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç
        """
        try:
            if not bool(self.risk_params.get('trend_guard', True)):
                return (False, "")

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ "—Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è" —Å–¥–µ–ª–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            min_minutes = int(self.risk_params.get('trend_guard_min_minutes', 15))
            try:
                entry_time = pd.to_datetime(trade.get('timestamp'))
                if entry_time is not None and (datetime.now() - entry_time).total_seconds() < min_minutes * 60:
                    return (False, "")
            except Exception:
                pass

            tf = str(self.risk_params.get('trend_guard_tf', '1h'))
            confirm_bars = int(self.risk_params.get('trend_guard_confirm_bars', 2))
            slope_thr = float(self.risk_params.get('trend_guard_slope_thr', 0.005))
            use_macd = bool(self.risk_params.get('trend_guard_use_macd', True))
            use_rsi = bool(self.risk_params.get('trend_guard_use_rsi', False))

            data_dict = self.fetch_ohlcv_multitimeframe(symbol)
            if not data_dict or tf not in data_dict or data_dict[tf] is None:
                return (False, "")
            df = data_dict[tf]
            df = self.calculate_advanced_indicators(df, tf)
            if df is None or len(df) < max(50, confirm_bars + 25):
                return (False, "")

            # –ë–µ—Ä—ë–º —Ö–≤–æ—Å—Ç –¥–∞–Ω–Ω—ã—Ö
            tail = df.tail(max(confirm_bars, 2)).copy()

            # –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            needed = ['ema_21', 'ema_50', 'price_trend_20']
            for col in needed:
                if col not in tail.columns:
                    return (False, "")

            direction = trade.get('signal_type', 'LONG').upper()

            def bar_confirms_reversal(row):
                ema_flip_long = row['ema_21'] < row['ema_50']     # –ø—Ä–æ—Ç–∏–≤ LONG
                ema_flip_short = row['ema_21'] > row['ema_50']    # –ø—Ä–æ—Ç–∏–≤ SHORT
                slope_down = row['price_trend_20'] < -slope_thr
                slope_up = row['price_trend_20'] > slope_thr

                conds = []
                if direction == 'LONG':
                    conds.append(ema_flip_long)
                    conds.append(slope_down)
                else:  # SHORT
                    conds.append(ema_flip_short)
                    conds.append(slope_up)

                if use_macd and 'macd_histogram' in tail.columns:
                    macd_ok = row['macd_histogram'] < 0 if direction == 'LONG' else row['macd_histogram'] > 0
                    conds.append(macd_ok)

                if use_rsi and 'rsi' in tail.columns:
                    rsi_ok = row['rsi'] < 45 if direction == 'LONG' else row['rsi'] > 55
                    conds.append(rsi_ok)

                # –ú–∏–Ω–∏–º—É–º –¥–≤–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                return sum(1 for c in conds if bool(c)) >= 2

            confirmations = sum(1 for _, r in tail.iterrows() if bar_confirms_reversal(r))
            if confirmations >= confirm_bars:
                reason = (f"trend_guard: tf={tf}, confirm_bars={confirm_bars}, "
                        f"slope_thr={slope_thr}, confirmations={confirmations}/{confirm_bars}")
                return (True, reason)
            return (False, "")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ has_trend_reversed({symbol}): {e}")
            return (False, "")

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–µ—Ç–æ–¥–∞ generate_signal
    def generate_signal(self, symbol, data_dict, multitimeframe_analysis=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ (—Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –≥–µ–π—Ç–æ–º –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º risk_params)"""
        if not data_dict or '1h' not in data_dict:
            logger.debug(f"‚ùå {symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö 1h")
            return None
        df_1h = data_dict['1h']
        if df_1h is None or len(df_1h) < 20:
            logger.debug(f"‚ùå {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({len(df_1h) if df_1h is not None else 0})")
            return None

        try:
            # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–æ–≤ –∏–∑ risk_params ---
            min_conf = float(self.risk_params.get('min_confidence_threshold', 60))
            min_rr   = float(self.risk_params.get('min_rr_ratio', 1.5))
            min_vol  = float(self.risk_params.get('min_volume_filter', 250000))
            min_strength = int(self.risk_params.get('min_signal_strength', 3))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4
            allow_shorts = bool(self.risk_params.get('use_short_signals', True))

            # --- –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä—ë–º—É (1h) ---
            try:
                last_vol = float(df_1h['volume'].iloc[-1])
                if last_vol < min_vol:
                    logger.debug(f"‚õî [{symbol}] –û–±—ä—ë–º {last_vol:.0f} < –º–∏–Ω. {min_vol:.0f} ‚Äî —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω")
                    return None
            except Exception:
                # –ï—Å–ª–∏ –æ–±—ä—ë–º–∞ –Ω–µ—Ç –∏–ª–∏ NaN ‚Äî –ª—É—á—à–µ –Ω–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å
                logger.debug(f"‚õî [{symbol}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–±—ä—ë–º 1h ‚Äî —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω")
                return None

            # --- –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ 1h ---
            current_price = float(df_1h['close'].iloc[-1])
            atr = float(df_1h['atr'].iloc[-1]) if 'atr' in df_1h.columns and not pd.isna(df_1h['atr'].iloc[-1]) else current_price * 0.02

            rsi = float(df_1h['rsi'].iloc[-1]) if not pd.isna(df_1h['rsi'].iloc[-1]) else 50
            stoch_k = float(df_1h['stoch_k'].iloc[-1]) if not pd.isna(df_1h['stoch_k'].iloc[-1]) else 50
            stoch_d = float(df_1h['stoch_d'].iloc[-1]) if not pd.isna(df_1h['stoch_d'].iloc[-1]) else 50
            macd = float(df_1h['macd'].iloc[-1]) if not pd.isna(df_1h['macd'].iloc[-1]) else 0
            macd_signal = float(df_1h['macd_signal'].iloc[-1]) if not pd.isna(df_1h['macd_signal'].iloc[-1]) else 0
            bb_position = float(df_1h['bb_position'].iloc[-1]) if not pd.isna(df_1h['bb_position'].iloc[-1]) else 0.5
            volume_ratio = float(df_1h['volume_ratio'].iloc[-1]) if not pd.isna(df_1h['volume_ratio'].iloc[-1]) else 1
            momentum_1h = float(df_1h['roc_3'].iloc[-1]) if not pd.isna(df_1h['roc_3'].iloc[-1]) else 0

            # --- –ò–º–ø—É–ª—å—Å –º–ª–∞–¥—à–∏—Ö –¢–§ ---
            momentum_5m, momentum_15m = 0.0, 0.0
            if '5m' in data_dict and data_dict['5m'] is not None and len(data_dict['5m']) > 5:
                df_5m = data_dict['5m']
                val = df_5m['roc_3'].iloc[-1]
                momentum_5m = float(val) if not pd.isna(val) else 0.0
            if '15m' in data_dict and data_dict['15m'] is not None and len(data_dict['15m']) > 5:
                df_15m = data_dict['15m']
                val = df_15m['roc_3'].iloc[-1]
                momentum_15m = float(val) if not pd.isna(val) else 0.0

            # --- –¢—Ä–µ–Ω–¥—ã 1h/4h ---
            trend_1h, trend_4h = 0.0, 0.0
            if '1h' in data_dict and data_dict['1h'] is not None and len(data_dict['1h']) > 20:
                df_1h_trend = data_dict['1h']
                tr = (df_1h_trend['close'].iloc[-1] - df_1h_trend['close'].iloc[-20]) / df_1h_trend['close'].iloc[-20]
                trend_1h = float(tr) if not pd.isna(tr) else 0.0
            if '4h' in data_dict and data_dict['4h'] is not None and len(data_dict['4h']) > 20:
                df_4h_trend = data_dict['4h']
                tr = (df_4h_trend['close'].iloc[-1] - df_4h_trend['close'].iloc[-20]) / df_4h_trend['close'].iloc[-20]
                trend_4h = float(tr) if not pd.isna(tr) else 0.0

            # --- –£—Å–ª–æ–≤–∏—è LONG/SHORT ---
            long_conditions = [
                rsi < 35,
                stoch_k < 30 and stoch_d < 30,
                macd > macd_signal,
                bb_position < 0.2,
                volume_ratio > 1.1,
                momentum_1h > -0.01,
                trend_4h > 0.005,
                trend_1h > -0.01,
            ]
            short_conditions = [
                rsi > 65,
                stoch_k > 70 and stoch_d > 70,
                macd < macd_signal,
                bb_position > 0.8,
                volume_ratio > 1.1,
                momentum_1h < 0.01,
                trend_4h < -0.005,
                trend_1h < 0.01,
            ]

            long_score = sum(1 for cond in long_conditions if cond)
            short_score = sum(1 for cond in short_conditions if cond)

            # --- –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
            signal_type = None
            selected_score = 0
            selected_total = 8  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª–æ–≤–∏–π –≤ —Å–ø–∏—Å–∫–∞—Ö

            if long_score >= 4 and short_score >= 4:
                if long_score > short_score:
                    signal_type, selected_score = 'LONG', long_score
                elif short_score > long_score and allow_shorts:
                    signal_type, selected_score = 'SHORT', short_score
                else:
                    signal_type, selected_score = 'LONG', long_score  # —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ -> LONG –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            elif long_score >= 4:
                signal_type, selected_score = 'LONG', long_score
            elif short_score >= 4 and allow_shorts:
                signal_type, selected_score = 'SHORT', short_score

            if not signal_type:
                return None

            # --- –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏/—Å–∏–ª—ã ---
            confidence_score = (selected_score / selected_total) * 100.0
            if selected_score >= 7:
                signal_strength = 5
            elif selected_score >= 6:
                signal_strength = 4
            elif selected_score >= 5:
                signal_strength = 3
            else:
                signal_strength = 2  # –ø—Ä–∏ 4 –∏–∑ 8

            # --- –ú–µ–∂—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑: —Å–Ω–∞—á–∞–ª–∞ –≤–µ—Ç–æ, –∑–∞—Ç–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ ---
            if multitimeframe_analysis:
                mt_score = multitimeframe_analysis.get('timeframe_agreement_score', 50)
                mt_trend_consistency = multitimeframe_analysis.get('trend_consistency', 'neutral')
                mt_momentum_alignment = multitimeframe_analysis.get('momentum_alignment', 'neutral')

                # –ñ—ë—Å—Ç–∫–æ–µ –≤–µ—Ç–æ
                if mt_score < 30 or mt_momentum_alignment == 'divergent':
                    logger.debug(f"‚õî [{symbol}] –í–µ—Ç–æ –ø–æ –º–µ–∂–¢–§ –∞–Ω–∞–ª–∏–∑—É: score={mt_score}, momentum={mt_momentum_alignment}")
                    return None

                # –ö–æ—Ä—Ä–µ–∫—Ü–∏–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–∏–ª—ã
                if mt_score >= 70:
                    confidence_score *= 1.10
                elif mt_score <= 30:
                    confidence_score *= 0.90

                if signal_type == 'LONG' and mt_trend_consistency in ['strong_long', 'long']:
                    signal_strength = min(5, signal_strength + 1)
                elif signal_type == 'SHORT' and mt_trend_consistency in ['strong_short', 'short']:
                    signal_strength = min(5, signal_strength + 1)
                elif signal_type == 'LONG' and mt_trend_consistency in ['strong_short', 'short']:
                    signal_strength = max(1, signal_strength - 1)
                elif signal_type == 'SHORT' and mt_trend_consistency in ['strong_long', 'long']:
                    signal_strength = max(1, signal_strength - 1)

            # --- –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: —à—Ç—Ä–∞—Ñ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
            patterns = self.detect_advanced_candlestick_patterns(df_1h)
            if signal_type == 'LONG' and not any(
                p in patterns for p in ['bullish_engulfing', 'hammer', 'morning_star', 'three_white_soldiers', 'bullish_harami', 'tweezer_bottoms']
            ):
                confidence_score *= 0.8
            elif signal_type == 'SHORT' and not any(
                p in patterns for p in ['bearish_engulfing', 'shooting_star', 'evening_star', 'three_black_crows', 'bearish_harami', 'tweezer_tops']
            ):
                confidence_score *= 0.8
            # --- –ü–æ–Ω–∏–∂–∞–µ–º confidence, –µ—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ—Ç–∏–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
            conflicting_patterns = {
                'LONG': ['bearish_engulfing', 'evening_star', 'shooting_star', 'three_black_crows', 'bearish_harami', 'tweezer_tops'],
                'SHORT': ['bullish_engulfing', 'morning_star', 'hammer', 'three_white_soldiers', 'bullish_harami', 'tweezer_bottoms']
            }

            for pattern in patterns:
                if pattern in conflicting_patterns.get(signal_type, []):
                    confidence_score *= 0.85  # –º–Ω–æ–∂–∏—Ç–µ–ª—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å
                    logger.debug(f"‚ö†Ô∏è [{symbol}] –ü–∞—Ç—Ç–µ—Ä–Ω {pattern} –ø—Ä–æ—Ç–∏–≤ {signal_type} ‚Äî confidence –ø–æ–Ω–∏–∂–µ–Ω")


            # --- –§–∏–Ω–∞–ª—å–Ω—ã–π –≥–µ–π—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ ---
            confidence_score = max(0.0, min(100.0, confidence_score))
            if confidence_score < min_conf or signal_strength < min_strength:
                logger.debug(f"‚õî [{symbol}] –ì–µ–π—Ç: confidence={confidence_score:.1f} (<{min_conf}) –∏–ª–∏ strength={signal_strength} (<{min_strength}) ‚Äî –æ—Ç–∫–ª–æ–Ω—ë–Ω")
                return None

            # --- –†–∞—Å—á—ë—Ç —É—Ä–æ–≤–Ω–µ–π (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å fallback) ---
            dynamic_levels_result = self.calculate_dynamic_levels(symbol, data_dict, signal_type)
            if dynamic_levels_result is None:
                logger.debug(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ")
                sl, tp1, tp2, tp3 = self.calculate_basic_levels(symbol, data_dict, signal_type)
                if sl is None or tp1 is None or tp2 is None or tp3 is None:
                    logger.debug(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –±–∞–∑–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π")
                    return None
            else:
                sl, tp1, tp2, tp3 = dynamic_levels_result

            # --- –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ RR ---
            logger.debug(f"üîç [{symbol}] –£—Ä–æ–≤–Ω–∏: SL={sl:.8f}, TP1={tp1:.8f}, TP2={tp2:.8f}, TP3={tp3:.8f}, –¶–µ–Ω–∞={current_price:.8f}")
            risk_reward_ratio = abs(tp3 - current_price) / (abs(current_price - sl) + 0.0001)

            # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
            direction_ok = (signal_type == 'LONG' and sl < current_price < tp3) or (signal_type == 'SHORT' and tp3 < current_price < sl)
            if not direction_ok:
                logger.debug(f"‚õî [{symbol}] –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è {signal_type}")
                return None

            if risk_reward_ratio < min_rr:
                logger.debug(f"‚õî [{symbol}] RR={risk_reward_ratio:.2f} < –º–∏–Ω. {min_rr:.2f} ‚Äî –æ—Ç–∫–ª–æ–Ω—ë–Ω")
                return None

            # --- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
            potential_upside = ((tp3 - current_price) / current_price * 100.0) if signal_type == 'LONG' else ((current_price - tp3) / current_price * 100.0)

            return {
                'symbol': symbol,
                'signal_type': signal_type,
                'entry_price': round(float(current_price), 8),
                'tp1': round(float(tp1), 8),
                'tp2': round(float(tp2), 8),
                'tp3': round(float(tp3), 8),
                'sl': round(float(sl), 8),
                'confidence': round(float(confidence_score), 2),
                'risk_reward_ratio': round(float(risk_reward_ratio), 2),
                'potential_upside': round(float(potential_upside), 2),
                'signal_strength': int(signal_strength),
                'patterns': list(patterns.keys()),
                'timeframe_analysis': {
                    '5m_momentum': round(float(momentum_5m), 6),
                    '15m_momentum': round(float(momentum_15m), 6),
                    '1h_momentum': round(float(momentum_1h), 6),
                    '1h_trend': round(float(trend_1h), 6),
                    '4h_trend': round(float(trend_4h), 6),
                },
                'technical_analysis': {
                    'rsi': round(float(rsi), 2),
                    'stoch_k': round(float(stoch_k), 2),
                    'macd': round(float(macd), 8),
                    'bb_position': round(float(bb_position), 2),
                    'volume_ratio': round(float(volume_ratio), 2),
                    # –í–ê–ñ–ù–û: –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ potential_multiplier, —á—Ç–æ–±—ã –Ω–µ –≤–≤–æ–¥–∏—Ç—å –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ
                    'tp3_distance_in_atr5': round(float((abs(tp3 - current_price) / (atr * 5)) if atr > 0 else 1), 2),
                },
                'timestamp': datetime.now().isoformat(),
                'conditions_met': {
                    'long_score': int(long_score),
                    'short_score': int(short_score),
                    'total_conditions': selected_total,
                },
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            return None

    def get_current_price(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ñ—å—é—á–µ—Ä—Å–∞"""
        try:
            ticker = self.exchange.fetch_ticker(symbol)
            return float(ticker['last'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ñ—å—é—á–µ—Ä—Å–∞ –¥–ª—è {symbol}: {e}")
            return None
        
    def get_effective_atr(self, df, price, fallback_pct=0.01):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ATR –∏–∑ df, –µ—Å–ª–∏ –æ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –∏–Ω–∞—á–µ fallback = price * fallback_pct.
        """
        try:
            if df is not None and 'atr' in df.columns:
                atr_val = df['atr'].iloc[-1]
                if pd.notna(atr_val) and atr_val > 0:
                    return float(atr_val)
        except Exception:
            pass
        return float(price) * float(fallback_pct)


    def round_price(self, symbol, price):
        """
        –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫ —à–∞–≥—É —Ü–µ–Ω—ã (tickSize), –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –ø–æ precision.price.
        """
        try:
            market = self.exchange.market(symbol)
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å tickSize –∏–∑ info.filters (Binance)
            tick_size = None
            info = market.get('info', {})
            if isinstance(info, dict):
                filters = info.get('filters') or []
                for f in filters:
                    if f.get('filterType') == 'PRICE_FILTER':
                        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∏—Ä–∂–∏ –¥–∞—é—Ç tickSize –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                        ts = f.get('tickSize')
                        if ts is not None:
                            tick_size = float(ts)
                        break

            if tick_size and tick_size > 0:
                return float(round(price / tick_size) * tick_size)

            # –§–æ–ª–±—ç–∫ –ø–æ precision
            prec = market.get('precision', {}).get('price', 8)
            return float(f"{price:.{int(prec)}f}")
        except Exception:
            return round(float(price), 8)

    def check_active_trades(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        trades_to_remove = []
        for symbol in list(self.active_trades.keys()):
            result = self.check_trade_status(symbol)
            if result == 'closed':
                trades_to_remove.append(symbol)
        for symbol in trades_to_remove:
            if symbol in self.active_trades:
                del self.active_trades[symbol]
        if trades_to_remove or len(self.active_trades) > 0:
            self.save_state()

    def check_trade_status(self, symbol):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        if symbol not in self.active_trades:
            return 'not_found'
        trade = self.active_trades[symbol]
        current_price = self.get_current_price(symbol)
        # --- –ù–ê–ß–ê–õ–û: –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–Ω–∏—Ü—ã –≤ —Ü–µ–Ω–µ ---
        entry_price = float(trade['entry_price'])
        signal_type = trade['signal_type']
        price_diff_info = ""
        if current_price is not None:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É
            price_diff_abs = current_price - entry_price
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É
            if entry_price != 0: # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                price_diff_percent = (price_diff_abs / entry_price) * 100
            else:
                price_diff_percent = 0.0
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–Ω–∏—Ü–µ–π
            sign = "+" if price_diff_percent >= 0 else ""
            # –û–∫—Ä—É–≥–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ –∏ –¥–ª—è —Ü–µ–Ω—ã (8 –∑–Ω–∞–∫–æ–≤)
            price_diff_info = f" | {sign}{price_diff_percent:.2f}% ({sign}{price_diff_abs:.8f})"
        # --- –ö–û–ù–ï–¶: –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–Ω–∏—Ü—ã –≤ —Ü–µ–Ω–µ ---
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–Ω–∏—Ü–µ
        if current_price is None:
            logger.info(f"üëÄ [{symbol}] –û—Ç—Å–ª–µ–∂–∏–≤–∞—é {signal_type} | –¶–µ–Ω–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ | –í—Ö–æ–¥: {entry_price} | –°—Ç–∞—Ç—É—Å: {self.get_trade_status(trade)}")
        else:
            logger.info(f"üëÄ [{symbol}] –û—Ç—Å–ª–µ–∂–∏–≤–∞—é {signal_type} | –¶–µ–Ω–∞: {current_price} | –í—Ö–æ–¥: {entry_price} | –°—Ç–∞—Ç—É—Å: {self.get_trade_status(trade)}{price_diff_info}")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP –∏ SL
        tp_levels = [float(trade['tp1']), float(trade['tp2']), float(trade['tp3'])]
        tp_names = ['TP1', 'TP2', 'TP3']
        # status_changed = False # –£–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è
        for i, (tp, tp_name) in enumerate(zip(tp_levels, tp_names)):
            if f'{tp_name.lower()}_reached' not in trade or not trade[f'{tp_name.lower()}_reached']:
                reached = False
                if signal_type == 'LONG' and current_price >= tp:
                    reached = True
                elif signal_type == 'SHORT' and current_price <= tp:
                    reached = True
                if reached:
                    trade[f'{tp_name.lower()}_reached'] = True
                    # status_changed = True # –£–±–∏—Ä–∞–µ–º
                    logger.info(f"üéØ [{symbol}] --- Take Profit {i+1} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç @ {tp} ---")

                    # --- –ù–û–í–û–ï: –ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è TP –≤ –ª–æ–≥ –∑–∞–∫—Ä—ã—Ç–∏–π ---
                    closure_info = {
                        'symbol': symbol,
                        'signal_type': signal_type,
                        'entry_time': trade.get('timestamp', datetime.now().isoformat()), # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞ –∏–ª–∏ —Ç–µ–∫—É—â–µ–µ
                        'entry_price': entry_price,
                        'exit_time': datetime.now().isoformat(),
                        'exit_price': tp,
                        'level': tp_name,
                        'price_diff': tp - entry_price if signal_type == 'LONG' else entry_price - tp
                    }
                    self.trade_closures_log.append(self.convert_to_serializable(closure_info))
                    self.save_state() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
                    self.update_trade_closures_csv() # –û–±–Ω–æ–≤–ª—è–µ–º CSV
                    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ TP –¥–ª—è {symbol}")
                    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---

                    if tp_name == 'TP3':
                        logger.info(f"üéâ [{symbol}] –°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê –ø–æ Take Profit 3 @ {tp}")
                        # self.save_state() # –£–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—ã—à–µ
                        # self.update_signals_csv() # –£–±–∏—Ä–∞–µ–º
                        # self.save_signals_log() # –û–±–Ω–æ–≤–ª—è–µ–º –∏ JSON - –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω JSON
                        # --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º JSON –ª–æ–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ CSV –∑–∞–∫—Ä—ã—Ç–∏–π ---
                        self.save_signals_log() # –û–±–Ω–æ–≤–ª—è–µ–º JSON –ª–æ–≥ —Å–∏–≥–Ω–∞–ª–æ–≤
                        # self.update_trade_closures_csv() # –£–∂–µ –≤—ã–∑–≤–∞–Ω–æ –≤—ã—à–µ
                        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
                        return 'closed' # –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ TP3

        sl = float(trade['sl'])
        sl_reached = False
        if signal_type == 'LONG' and current_price <= sl:
            sl_reached = True
        elif signal_type == 'SHORT' and current_price >= sl:
            sl_reached = True
        if sl_reached:
            trade['sl_reached'] = True
            # status_changed = True # –£–±–∏—Ä–∞–µ–º
            logger.info(f"üõë [{symbol}] –°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê –ø–æ Stop Loss @ {sl}")

            # --- –ù–û–í–û–ï: –ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è SL –≤ –ª–æ–≥ –∑–∞–∫—Ä—ã—Ç–∏–π ---
            closure_info = {
                'symbol': symbol,
                'signal_type': signal_type,
                'entry_time': trade.get('timestamp', datetime.now().isoformat()),
                'entry_price': entry_price,
                'exit_time': datetime.now().isoformat(),
                'exit_price': sl,
                'level': 'SL',
                'price_diff': sl - entry_price if signal_type == 'LONG' else entry_price - sl
            }
            self.trade_closures_log.append(self.convert_to_serializable(closure_info))
            self.save_state()
            self.update_trade_closures_csv() # –û–±–Ω–æ–≤–ª—è–µ–º CSV
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ SL –¥–ª—è {symbol}")
            # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---

            # self.save_state() # –£–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—ã—à–µ
            # self.update_signals_csv() # –£–±–∏—Ä–∞–µ–º
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º JSON –ª–æ–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ CSV –∑–∞–∫—Ä—ã—Ç–∏–π ---
            self.save_signals_log() # –û–±–Ω–æ–≤–ª—è–µ–º JSON –ª–æ–≥ —Å–∏–≥–Ω–∞–ª–æ–≤
            # self.update_trade_closures_csv() # –£–∂–µ –≤—ã–∑–≤–∞–Ω–æ –≤—ã—à–µ
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            return 'closed' # –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ SL

        # --- –£–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSV –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ ---
        # if status_changed:
        #      self.update_signals_csv()
        #      self.save_signals_log() # –û–±–Ω–æ–≤–ª—è–µ–º –∏ JSON
        # ---
        return 'active'

    def get_trade_status(self, trade):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏"""
        if trade.get('tp3_reached', False):
            return 'hit TP3'
        elif trade.get('tp2_reached', False):
            return 'hit TP2'
        elif trade.get('tp1_reached', False):
            return 'hit TP1'
        elif trade.get('sl_reached', False):
            return 'hit SL'
        else:
            return 'active'

    def send_signal(self, signal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ"""
        if signal is None:
            return
        symbol = signal['symbol']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ.
        if symbol in self.active_trades:
             return # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        self.signal_history[symbol].append(self.convert_to_serializable(signal))
        if len(self.signal_history[symbol]) > 50:
            self.signal_history[symbol] = self.signal_history[symbol][-25:]
        signal_log_entry = {
            'timestamp': signal['timestamp'],
            'symbol': signal['symbol'],
            'signal_type': signal['signal_type'],
            'entry_price': float(signal['entry_price']),
            'tp1': float(signal['tp1']),
            'tp2': float(signal['tp2']),
            'tp3': float(signal['tp3']),
            'sl': float(signal['sl']),
            'confidence': float(signal['confidence']),
            'rr_ratio': float(signal['risk_reward_ratio']),
            'potential_upside': float(signal.get('potential_upside', 0)),
            'signal_strength': int(signal['signal_strength']),
            'patterns': signal.get('patterns', [])
        }
        self.signals_found.append(self.convert_to_serializable(signal_log_entry))
        self.analysis_stats['signals_generated'] += 1
        logger.info(f"‚úÖ [{signal['symbol']}] --- –û–¢–ö–†–´–¢–ê {signal['signal_type']} –°–î–ï–õ–ö–ê (–°–∏–ª–∞: {signal['signal_strength']}) @ {signal['entry_price']} ---")
        logger.info(f"   SL: {signal['sl']}, TP1: {signal['tp1']}, TP2: {signal['tp2']}, TP3: {signal['tp3']}")
        logger.info(f"   üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {signal.get('potential_upside', 0):.1f}% | RR: {signal['risk_reward_ratio']}")
        if signal.get('patterns'):
            logger.info(f"   üîç –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {', '.join(signal['patterns'])}")
        # --- –ö–æ–Ω–µ—Ü —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
        # --- –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        self.active_trades[signal['symbol']] = self.convert_to_serializable(signal).copy()
        for tp_name in ['tp1', 'tp2', 'tp3']:
            self.active_trades[signal['symbol']][f'{tp_name}_reached'] = False
        self.active_trades[signal['symbol']]['sl_reached'] = False
        self.save_state()
        # --- –û–±–Ω–æ–≤–ª—è–µ–º CSV –ª–æ–≥ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏ ---
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSV, —á—Ç–æ–±—ã –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Ñ–∞–π–ª–µ
        # self.update_signals_csv() # –£–±–∏—Ä–∞–µ–º
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π JSON –ª–æ–≥
        self.save_signals_log() 

    # --- –£–ë–†–ê–ù–û: –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ update_signals_csv ---
    # def update_signals_csv(self):
    #     """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSV –ª–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ —Å –∏—Ö —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º"""
    #     try:
    #         if not self.active_trades:
    #              # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º/–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π CSV —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    #              df_empty = pd.DataFrame(columns=[
    #                  'symbol', 'signal_type', 'entry_price', 'potential_upside',
    #                  'signal_strength', 'patterns', 'status', 'last_updated'
    #              ])
    #              df_empty.to_csv('signals_log.csv', index=False)
    #              logger.debug("signals_log.csv –æ–±–Ω–æ–≤–ª–µ–Ω: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫, —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.")
    #              return
    #         csv_data = []
    #         for symbol, trade in self.active_trades.items():
    #             # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV
    #             csv_entry = {
    #                 'symbol': symbol,
    #                 'signal_type': trade.get('signal_type', 'N/A'),
    #                 'entry_price': float(trade.get('entry_price', 0)),
    #                 'potential_upside': float(trade.get('potential_upside', 0)),
    #                 'signal_strength': int(trade.get('signal_strength', 0)),
    #                 'patterns': ', '.join(trade.get('patterns', [])), # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
    #                 'status': self.get_trade_status(trade), # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (hit TP1/2/3, SL, active)
    #                 'last_updated': datetime.now().isoformat() # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    #             }
    #             csv_data.append(csv_entry)
    #         df = pd.DataFrame(csv_data)
    #         # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º/–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º CSV —Ñ–∞–π–ª
    #         df.to_csv('signals_log.csv', index=False)
    #         logger.debug(f"signals_log.csv –æ–±–Ω–æ–≤–ª–µ–Ω: {len(csv_data)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.")
    #     except Exception as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è signals_log.csv: {e}")

    def update_trade_closures_csv(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSV –ª–æ–≥–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ª–æ–≥–∞ —Å–¥–µ–ª–æ–∫"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
            with open('signals_log.csv', 'w', newline='', encoding='utf-8') as csvfile:
                # –ï—Å–ª–∏ –ª–æ–≥ –∑–∞–∫—Ä—ã—Ç–∏–π –ø—É—Å—Ç, —Ñ–∞–π–ª –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º
                if not self.trade_closures_log:
                     logger.debug("signals_log.csv –æ–±–Ω–æ–≤–ª–µ–Ω: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–∫—Ä—ã—Ç–∏—è—Ö.")
                     return # –í—ã—Ö–æ–¥–∏–º, —Ñ–∞–π–ª —É–∂–µ –ø—É—Å—Ç–æ–π

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                for closure in self.trade_closures_log:
                     # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É: symbol,signal_type,entry_time,entry_price,exit_time,exit_price,level,price_diff
                     line = (
                         f"{closure['symbol']},"
                         f"{closure['signal_type']},"
                         f"{closure['entry_time']},"
                         f"{closure['entry_price']:.8f}," # –§–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                         f"{closure['exit_time']},"
                         f"{closure['exit_price']:.8f},"  # –§–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã –≤—ã—Ö–æ–¥–∞
                         f"{closure['level']},"
                         f"{'+' if closure['price_diff'] >= 0 else ''}{closure['price_diff']:.8f}\n" # –§–æ—Ä–º–∞—Ç —Ä–∞–∑–Ω–∏—Ü—ã —Å –∑–Ω–∞–∫–æ–º
                     )
                     csvfile.write(line)

            logger.debug(f"signals_log.csv –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self.trade_closures_log)} –∑–∞–ø–∏—Å–µ–π –æ –∑–∞–∫—Ä—ã—Ç–∏—è—Ö.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è signals_log.csv (–∑–∞–∫—Ä—ã—Ç–∏—è): {e}")

    def save_signals_log(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ JSON"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π JSON –ª–æ–≥ (—ç—Ç–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
            serializable_signals = [self.convert_to_serializable(signal) for signal in self.signals_found]
            serializable_stats = self.convert_to_serializable(self.analysis_stats)
            with open('signals_log.json', 'w', encoding='utf-8') as f:
                json.dump({
                    'signals': serializable_signals,
                    'stats': serializable_stats,
                    'generated_at': datetime.now().isoformat()
                }, f, ensure_ascii=False, indent=2, default=str)
            # logger.info("signals_log.json —Å–æ—Ö—Ä–∞–Ω–µ–Ω.") # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
            # --- –í–ê–ñ–ù–û: CSV —Ç–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ update_trade_closures_csv ---
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSV –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞)
            # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ CSV –≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.
            # self.update_signals_csv() # –õ—É—á—à–µ –≤—ã–∑—ã–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –≤ –Ω—É–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö, —á–µ–º –∑–¥–µ—Å—å
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (JSON): {e}")

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ process_symbol
    def process_symbol(self, symbol):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            data_dict = self.fetch_ohlcv_multitimeframe(symbol)
            if not data_dict:
                return None
            for tf in self.timeframes:
                if tf in data_dict and data_dict[tf] is not None:
                    data_dict[tf] = self.calculate_advanced_indicators(data_dict[tf], tf)
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: calculate_multitimeframe_analysis —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            multitimeframe_analysis = self.calculate_multitimeframe_analysis(data_dict)
            if symbol not in self.active_trades:
                # –ü–µ—Ä–µ–¥–∞–µ–º multitimeframe_analysis –≤ generate_signal
                signal = self.generate_signal(symbol, data_dict, multitimeframe_analysis) 
                return signal
            else:
                logger.debug(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω {symbol} - —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞")
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
            return None

    def run_analysis_cycle(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        cycle_start_time = datetime.now()
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ {len(self.symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä...")
        signals = []
        processed_count = 0
        for symbol in self.symbols:
            try:
                signal = self.process_symbol(symbol)
                if signal:
                    signals.append(signal)
                    self.send_signal(signal)
                processed_count += 1
                self.analysis_stats['total_analyzed'] += 1
                if processed_count % 5 == 0:
                    time.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol}: {e}")
        self.check_active_trades()
        self.save_signals_log()
        cycle_duration = datetime.now() - cycle_start_time
        logger.info(f"‚úÖ –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration.total_seconds():.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–∞—Ä. –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤.")
        self.save_state()

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–∞...")
        #logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(self.symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä –Ω–∞ {len(self.timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö")
        #logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: {self.state_file}")
        #logger.info(f"üìà SHORT —Å–∏–≥–Ω–∞–ª—ã: {'–í–ö–õ–Æ–ß–ï–ù–´' if self.risk_params['use_short_signals'] else '–í–´–ö–õ–Æ–ß–ï–ù–´'}")
        #logger.info(f"üéØ TP/SL —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ä–æ—Å—Ç–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        # –ò–∑–º–µ–Ω–µ–Ω–æ: –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤–º–µ—Å—Ç–æ 5
        #logger.info(f"üïí –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É")
        if self.active_trades:
            logger.info(f"üì• –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(self.active_trades)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
            for symbol, trade in self.active_trades.items():
                logger.info(f"   üìå {symbol} | {trade['signal_type']} | –í—Ö–æ–¥: {trade['entry_price']}")
        cycle_count = 0
        while True:
            try:
                cycle_count += 1
                logger.info(f"üîÑ –¶–∏–∫–ª #{cycle_count}")
                self.run_analysis_cycle()
                # –ò–∑–º–µ–Ω–µ–Ω–æ: –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 300
                logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ (1 –º–∏–Ω—É—Ç–∞)...")
                time.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞
            except KeyboardInterrupt:
                logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                self.save_state()
                self.save_signals_log()
                logger.info("üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                self.save_state()
                time.sleep(60)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
if __name__ == "__main__":
    bot = FuturesCryptoTradingBot()
    bot.run()
