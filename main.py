import ccxt
import pandas as pd
import numpy as np
import ta
from datetime import datetime, timedelta
import time
import logging
import json
import os
from collections import defaultdict
import warnings
import shutil
import psutil
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('crypto_futures_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FuturesCryptoTradingBot:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤ Binance
        self.exchange = ccxt.binance({
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future',  # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
                'adjustForTimeDifference': True
            }
        })
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        self.timeframes = ['5m', '15m', '1h', '4h']
        
        # –°–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä (–±–µ–∑ MATIC/USDT)
        self.symbols = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'XRP/USDT',
            'ADA/USDT', 'DOGE/USDT', 'DOT/USDT', 'AVAX/USDT', 'LINK/USDT',
            'UNI/USDT', 'LTC/USDT', 'ATOM/USDT', 'ETC/USDT',
            'FIL/USDT', 'TRX/USDT', 'VET/USDT', 'XLM/USDT', 'ICP/USDT',
            'FTM/USDT', 'HBAR/USDT', 'NEAR/USDT', 'ALGO/USDT', 'EGLD/USDT',
            'FLOW/USDT', 'SAND/USDT', 'MANA/USDT', 'AXS/USDT', 'GALA/USDT',
            'APE/USDT', 'CHZ/USDT', 'ENJ/USDT', 'THETA/USDT', 'GMT/USDT'
        ]
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        self.active_trades = {}
        self.signal_history = defaultdict(list)
        self.signals_found = []
        self.analysis_stats = {
            'total_analyzed': 0,
            'signals_generated': 0,
            'start_time': datetime.now().isoformat()
        }
        self.signal_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
        self.backtest_results = {}  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞
        self.performance_metrics = {}  # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
        self.data_cache = {}
        self.cache_expiry = 300  # 5 –º–∏–Ω—É—Ç
        
        # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.state_file = 'bot_state.json'
        self.analytics_file = 'analytics_data.json'  # –§–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.backtest_file = 'backtest_results.json'  # –§–∞–π–ª –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.risk_params = {
            'min_confidence_threshold': 45,  # –õ–∏–±–µ—Ä–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            'min_volume_filter': 300000,
            'min_rr_ratio': 1.2,
            'use_short_signals': True
        }
        
        # –ö–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.correlated_pairs = {
            'BTC/USDT': ['ETH/USDT', 'BNB/USDT'],
            'ETH/USDT': ['BTC/USDT', 'BNB/USDT'],
            'SOL/USDT': ['AVAX/USDT'],
            'ADA/USDT': ['DOT/USDT'],
            'DOT/USDT': ['ADA/USDT']
        }
        
        # –°–µ–∫—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.asset_sectors = {
            'BTC/USDT': 'Bitcoin',
            'ETH/USDT': 'Ethereum',
            'BNB/USDT': 'Exchange',
            'SOL/USDT': 'Smart Contracts',
            'ADA/USDT': 'Smart Contracts',
            'DOT/USDT': 'Smart Contracts',
            'AVAX/USDT': 'Smart Contracts',
            'LINK/USDT': 'Oracle',
            'UNI/USDT': 'DEX',
            'DOGE/USDT': 'Meme',
            'XRP/USDT': 'Payments',
            'LTC/USDT': 'Payments',
            'ATOM/USDT': 'Interoperability',
            'FIL/USDT': 'Storage',
            'TRX/USDT': 'Entertainment',
            'VET/USDT': 'Supply Chain',
            'ICP/USDT': 'Infrastructure',
            'FTM/USDT': 'Smart Contracts',
            'HBAR/USDT': 'Payments',
            'NEAR/USDT': 'Smart Contracts',
            'ALGO/USDT': 'Smart Contracts',
            'EGLD/USDT': 'Payments',
            'FLOW/USDT': 'NFT',
            'SAND/USDT': 'Metaverse',
            'MANA/USDT': 'Metaverse',
            'AXS/USDT': 'Gaming',
            'GALA/USDT': 'Gaming',
            'APE/USDT': 'NFT',
            'CHZ/USDT': 'Sports',
            'ENJ/USDT': 'NFT',
            'THETA/USDT': 'Video',
            'GMT/USDT': 'Social'
        }
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_state()
        self.load_analytics()  # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.load_market_data()
        
    def load_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.state_file):
                if os.path.getsize(self.state_file) == 0:
                    logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è {self.state_file} –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
                    self.create_default_state_file()
                    return
                    
                with open(self.state_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if not content:
                        logger.warning(f"‚ö†Ô∏è  –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è {self.state_file} –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
                        self.create_default_state_file()
                        return
                        
                    state = json.loads(content)
                    
                if 'active_trades' in state:
                    self.active_trades = self.convert_to_serializable(state['active_trades'])
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(self.active_trades)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                    
                if 'signal_history' in state:
                    raw_history = state['signal_history']
                    self.signal_history = defaultdict(list)
                    for symbol, signals in raw_history.items():
                        self.signal_history[symbol] = [self.convert_to_serializable(signal) for signal in signals]
                    total_signals = sum(len(signals) for signals in self.signal_history.values())
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏")
                    
                if 'signals_found' in state:
                    self.signals_found = [self.convert_to_serializable(signal) for signal in state['signals_found']]
                    logger.info(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(self.signals_found)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                    
                if 'analysis_stats' in state:
                    self.analysis_stats = self.convert_to_serializable(state['analysis_stats'])
                    logger.info("üì• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    
                logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            else:
                logger.info("üÜï –ù–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ - —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.create_default_state_file()
                
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ JSON –≤ —Ñ–∞–π–ª–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            logger.warning("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            self.create_default_state_file()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            logger.warning("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
            self.create_default_state_file()
            
    def create_default_state_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            default_state = {
                'active_trades': {},
                'signal_history': {},
                'signals_found': [],
                'analysis_stats': {
                    'total_analyzed': 0,
                    'signals_generated': 0,
                    'start_time': datetime.now().isoformat()
                },
                'created_at': datetime.now().isoformat()
            }
            
            with open(self.state_file, 'w', encoding='utf-8') as f:
                json.dump(default_state, f, ensure_ascii=False, indent=2, default=str)
                
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            
    def load_analytics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if os.path.exists('analytics_data.json'):
                with open('analytics_data.json', 'r', encoding='utf-8') as f:
                    analytics_data = json.load(f)
                    
                if 'signal_stats' in analytics_data:
                    self.signal_stats = analytics_data['signal_stats']
                    logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ {len(self.signal_stats)} –∞–∫—Ç–∏–≤–∞–º")
                    
                if 'performance_metrics' in analytics_data:
                    self.performance_metrics = analytics_data['performance_metrics']
                    logger.info("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    
                if 'backtest_results' in analytics_data:
                    self.backtest_results = analytics_data['backtest_results']
                    logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.backtest_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            
    def save_analytics(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            analytics_data = {
                'signal_stats': self.convert_to_serializable(self.signal_stats),
                'performance_metrics': self.convert_to_serializable(self.performance_metrics),
                'backtest_results': self.convert_to_serializable(self.backtest_results),
                'updated_at': datetime.now().isoformat()
            }
            
            with open(self.analytics_file, 'w', encoding='utf-8') as f:
                json.dump(analytics_data, f, ensure_ascii=False, indent=2, default=str)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            
    def save_backtest_results(self, symbol, results):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        try:
            self.backtest_results[symbol] = self.convert_to_serializable(results)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
            backtest_data = {
                'results': self.convert_to_serializable(self.backtest_results),
                'updated_at': datetime.now().isoformat()
            }
            
            with open(self.backtest_file, 'w', encoding='utf-8') as f:
                json.dump(backtest_data, f, ensure_ascii=False, indent=2, default=str)
                
            logger.info(f"üíæ –ë—ç–∫—Ç–µ—Å—Ç –¥–ª—è {symbol} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è {symbol}: {e}")
            
    def convert_to_serializable(self, obj):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if isinstance(obj, dict):
            return {key: self.convert_to_serializable(value) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self.convert_to_serializable(item) for item in obj]
        elif isinstance(obj, (np.integer, np.floating)):
            return float(obj)
        elif isinstance(obj, np.bool_):
            return bool(obj)
        elif pd.api.types.is_integer_dtype(type(obj)) or pd.api.types.is_float_dtype(type(obj)):
            return float(obj)
        elif isinstance(obj, pd.Timestamp):
            return obj.isoformat()
        elif isinstance(obj, datetime):
            return obj.isoformat()
        else:
            return obj
            
    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        try:
            state = {
                'active_trades': self.convert_to_serializable(self.active_trades),
                'signal_history': self.convert_to_serializable(dict(self.signal_history)),
                'signals_found': self.convert_to_serializable(self.signals_found),
                'analysis_stats': self.convert_to_serializable(self.analysis_stats),
                'saved_at': datetime.now().isoformat()
            }
            
            temp_file = self.state_file + '.tmp'
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(state, f, ensure_ascii=False, indent=2, default=str)
            
            os.replace(temp_file, self.state_file)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            
    def load_market_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–∞—Ö"""
        try:
            markets = self.exchange.load_markets()
            futures_symbols = [symbol for symbol in self.symbols if symbol in markets]
            self.symbols = futures_symbols
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(markets)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤")
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–∞—Ä—ã: {len(self.symbols)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: {e}")
            
    def fetch_ohlcv_with_cache(self, symbol, timeframe, limit=100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"{symbol}_{timeframe}_{limit}"
        current_time = time.time()
        
        if cache_key in self.data_cache:
            cached_data, timestamp = self.data_cache[cache_key]
            if current_time - timestamp < self.cache_expiry:
                return cached_data
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        self.data_cache[cache_key] = (data, current_time)
        return data
            
    def fetch_ohlcv_multitimeframe(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º"""
        data = {}
        try:
            for tf in self.timeframes:
                limit = 200 if tf in ['5m', '15m'] else 100
                ohlcv = self.fetch_ohlcv_with_cache(symbol, tf, limit=limit)
                if len(ohlcv) > 0:
                    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                    df.set_index('timestamp', inplace=True)
                    data[tf] = df
                else:
                    data[tf] = None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None
        return data
        
    def robust_data_fetch(self, symbol, timeframes):
        """–ù–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                return self.fetch_ohlcv_multitimeframe(symbol)
            except Exception as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < max_retries - 1:
                    time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                    return None
                    
    def get_trend_direction(self, df):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"""
        if df is None or len(df) < 20:
            return 'neutral'
            
        try:
            current_price = float(df['close'].iloc[-1])
            ema_21 = float(df['ema_21'].iloc[-1]) if 'ema_21' in df.columns else current_price
            return 'bullish' if current_price > ema_21 else 'bearish'
        except:
            return 'neutral'
            
    def check_multitimeframe_confirmation(self, data_dict, signal_type):
        """–ú–Ø–ì–ö–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö"""
        confirmations = 0
        total_timeframes = 0
        
        for tf, df in data_dict.items():
            if df is not None and len(df) > 20:
                total_timeframes += 1
                trend = self.get_trend_direction(df)
                if (signal_type == 'LONG' and trend == 'bullish') or \
                   (signal_type == 'SHORT' and trend == 'bearish'):
                    confirmations += 1
        
        # –¢–û–õ–¨–ö–û 50% —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
        return confirmations >= max(1, total_timeframes * 0.5)
        
    def check_volatility_filter(self, df_1h):
        """–ë–û–õ–ï–ï –õ–ò–ë–ï–†–ê–õ–¨–ù–´–ô —Ñ–∏–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if df_1h is None or len(df_1h) < 20:
            return True
            
        try:
            atr = float(df_1h['atr'].iloc[-1])
            price = float(df_1h['close'].iloc[-1])
            volatility_percent = (atr / price) * 100
            
            # –®–ò–†–ï –¥–∏–∞–ø–∞–∑–æ–Ω: 0.5-8%
            return 0.5 <= volatility_percent <= 8.0
        except:
            return True
            
    def check_volume_profile(self, data_dict):
        """–ú–Ø–ì–ö–ò–ô –æ–±—ä–µ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä"""
        if '1h' not in data_dict or data_dict['1h'] is None:
            return True
            
        df = data_dict['1h']
        if len(df) < 50:
            return True
            
        try:
            current_volume = float(df['volume'].iloc[-1])
            avg_volume_24h = float(df['volume'].tail(24).mean())
            
            # –ú–ï–ù–¨–®–ï —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: 30%
            return current_volume >= avg_volume_24h * 0.3
        except:
            return True
            
    def calculate_fibonacci_levels(self, df, signal_type):
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏"""
        if df is None or len(df) < 50:
            return {}
            
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–≤–∏–Ω–≥ —Ö–∞–π/–ª–æ—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –±–∞—Ä–æ–≤
            recent_data = df.tail(30)
            swing_high = float(recent_data['high'].max())
            swing_low = float(recent_data['low'].min())
            
            diff = swing_high - swing_low
            
            if signal_type == 'LONG':
                fib_levels = {
                    'fib_236': swing_low + diff * 0.236,
                    'fib_382': swing_low + diff * 0.382,
                    'fib_500': swing_low + diff * 0.500,
                    'fib_618': swing_low + diff * 0.618,
                    'fib_786': swing_low + diff * 0.786
                }
            else:
                fib_levels = {
                    'fib_236': swing_high - diff * 0.236,
                    'fib_382': swing_high - diff * 0.382,
                    'fib_500': swing_high - diff * 0.500,
                    'fib_618': swing_high - diff * 0.618,
                    'fib_786': swing_high - diff * 0.786
                }
                
            return fib_levels
        except:
            return {}
            
    def calculate_dynamic_rr_ratio(self, symbol, data_dict, signal_type):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç RR –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        if not data_dict or '1h' not in data_dict:
            return 1.5  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
        df = data_dict['1h']
        if df is None or len(df) < 20:
            return 1.5
            
        try:
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility = float(df['volatility'].iloc[-1]) if 'volatility' in df.columns else 0.02
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            trend_strength = abs(float(df['price_trend_20'].iloc[-1]))
            
            # –ë–∞–∑–æ–≤—ã–π RR
            base_rr = 1.5
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if volatility > 0.03:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                base_rr = 1.3  # –ú–µ–Ω—å—à–µ RR –¥–ª—è –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            elif volatility < 0.01:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                base_rr = 1.8  # –ë–æ–ª—å—à–µ RR –¥–ª—è –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç—Ä–µ–Ω–¥—É
            if trend_strength > 0.05:  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                base_rr *= 1.2  # –ë–æ–ª—å—à–µ RR –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
            else:
                base_rr *= 0.9  # –ú–µ–Ω—å—à–µ RR –¥–ª—è —Å–ª–∞–±–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
                
            return max(1.2, min(3.0, base_rr))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1.2 - 3.0
        except:
            return 1.5
            
    def check_correlation_filter(self, symbol, active_trades):
        """–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ - –∏–∑–±–µ–≥–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ö"""
        if not active_trades:
            return True
            
        if symbol in self.correlated_pairs:
            for active_symbol in active_trades:
                if active_symbol in self.correlated_pairs[symbol]:
                    return False  # –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –≤ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–µ–º –∞–∫—Ç–∏–≤–µ
                    
        return True
        
    def get_asset_sector(self, symbol):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞"""
        return self.asset_sectors.get(symbol, 'Other')

    def check_sector_diversification(self, symbol, active_trades):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"""
        if not active_trades:
            return True
            
        current_sector = self.get_asset_sector(symbol)
        sector_positions = {}
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
        for active_symbol in active_trades:
            sector = self.get_asset_sector(active_symbol)
            sector_positions[sector] = sector_positions.get(sector, 0) + 1
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º 30% –ø–æ–∑–∏—Ü–∏–π –≤ –æ–¥–Ω–æ–º —Å–µ–∫—Ç–æ—Ä–µ
        current_sector_count = sector_positions.get(current_sector, 0)
        total_positions = len(active_trades) + 1  # +1 –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        
        sector_percentage = (current_sector_count + 1) / total_positions
        return sector_percentage <= 0.3
        
    def calculate_portfolio_risk(self, symbol, entry_price, sl_price, active_trades):
        """–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é"""
        # –†–∏—Å–∫ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        position_risk = abs(entry_price - sl_price) / entry_price
        
        # –û–±—â–∏–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        total_portfolio_risk = position_risk
        
        for active_symbol, trade in active_trades.items():
            try:
                active_entry = float(trade['entry_price'])
                active_sl = float(trade['sl'])
                active_risk = abs(active_entry - active_sl) / active_entry
                total_portfolio_risk += active_risk
            except:
                pass
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        max_portfolio_risk = 0.15  # 15%
        return total_portfolio_risk <= max_portfolio_risk
        
    def detect_advanced_candlestick_patterns(self, df):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–≤–µ—á–µ–π"""
        if df is None or len(df) < 10:
            return {}
            
        patterns = {}
        
        try:
            # AB=CD –ø–∞—Ç—Ç–µ—Ä–Ω
            if len(df) >= 4:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–æ–≥
                leg1 = abs(df['close'].iloc[-4] - df['close'].iloc[-3])  # AB
                leg2 = abs(df['close'].iloc[-2] - df['close'].iloc[-1])   # CD
                
                if 0.9 <= leg1/leg2 <= 1.1:  # –†–∞–≤–Ω—ã–µ –Ω–æ–≥–∏ ¬±10%
                    patterns['abcd_pattern'] = True
                    
            # –ì–æ–ª–æ–≤–∞ –∏ –ø–ª–µ—á–∏
            if len(df) >= 5:
                left_shoulder = df['high'].iloc[-5]
                head = df['high'].iloc[-4] 
                right_shoulder = df['high'].iloc[-3]
                neckline = df['low'].iloc[-2:-1].mean()
                
                if (head > left_shoulder and head > right_shoulder and
                    left_shoulder * 0.95 <= right_shoulder <= left_shoulder * 1.05):
                    patterns['head_shoulders'] = True
                    
            # –¢—Ä–∏ –±–µ–ª—ã—Ö —Å–æ–ª–¥–∞—Ç–∞ / —Ç—Ä–∏ —á–µ—Ä–Ω—ã—Ö –≤–æ—Ä–æ–Ω–∞
            if len(df) >= 3:
                three_green = all(df['close'].iloc[i] > df['open'].iloc[i] for i in [-3, -2, -1])
                three_red = all(df['close'].iloc[i] < df['open'].iloc[i] for i in [-3, -2, -1])
                
                if three_green:
                    patterns['three_white_soldiers'] = True
                elif three_red:
                    patterns['three_black_crows'] = True
                    
            # Doji –∏ Spinning Top
            body_range = abs(df['close'].iloc[-1] - df['open'].iloc[-1])
            total_range = df['high'].iloc[-1] - df['low'].iloc[-1]
            
            if total_range > 0 and body_range/total_range < 0.1:
                patterns['doji'] = True
            elif 0.1 <= body_range/total_range <= 0.3:
                patterns['spinning_top'] = True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            
        return patterns

    def calculate_multitimeframe_consensus(self, data_dict):
        """–ú–Ω–æ–≥–æ—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å —Ç—Ä–µ–Ω–¥–∞"""
        if not data_dict:
            return {'consensus_score': 0, 'agreement_level': 'neutral'}
            
        consensus_signals = []
        timeframes_analyzed = 0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
        priority_timeframes = ['1h', '4h', '1d']  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        
        for tf in priority_timeframes:
            if tf in data_dict and data_dict[tf] is not None and len(data_dict[tf]) >= 20:
                df = data_dict[tf]
                timeframes_analyzed += 1
                
                try:
                    # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    current_price = float(df['close'].iloc[-1])
                    ema_21 = float(df['ema_21'].iloc[-1]) if 'ema_21' in df.columns else current_price
                    ema_50 = float(df['ema_50'].iloc[-1]) if 'ema_50' in df.columns else current_price
                    macd = float(df['macd'].iloc[-1]) if 'macd' in df.columns else 0
                    macd_signal = float(df['macd_signal'].iloc[-1]) if 'macd_signal' in df.columns else 0
                    rsi = float(df['rsi'].iloc[-1]) if 'rsi' in df.columns else 50
                    
                    # –û—Ü–µ–Ω–∫–∞ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
                    trend_strength = abs(current_price - ema_21) / ema_21 * 100
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
                    if (current_price > ema_21 and current_price > ema_50 and 
                        macd > macd_signal and rsi < 70):
                        signal = 'strong_bullish'
                        strength = min(100, trend_strength * 2)
                    elif (current_price < ema_21 and current_price < ema_50 and 
                          macd < macd_signal and rsi > 30):
                        signal = 'strong_bearish'
                        strength = min(100, trend_strength * 2)
                    elif current_price > ema_21:
                        signal = 'bullish'
                        strength = min(70, trend_strength)
                    elif current_price < ema_21:
                        signal = 'bearish'
                        strength = min(70, trend_strength)
                    else:
                        signal = 'neutral'
                        strength = 30
                        
                    consensus_signals.append({
                        'timeframe': tf,
                        'signal': signal,
                        'strength': strength,
                        'price': current_price
                    })
                    
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {tf}: {e}")
                    
        if not consensus_signals:
            return {'consensus_score': 0, 'agreement_level': 'neutral'}
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
        total_strength = sum(signal['strength'] for signal in consensus_signals)
        bullish_count = len([s for s in consensus_signals if 'bullish' in s['signal']])
        bearish_count = len([s for s in consensus_signals if 'bearish' in s['signal']])
        
        # –£—Ä–æ–≤–µ–Ω—å —Å–æ–≥–ª–∞—Å–∏—è
        agreement_ratio = abs(bullish_count - bearish_count) / len(consensus_signals)
        agreement_level = 'high' if agreement_ratio > 0.6 else 'medium' if agreement_ratio > 0.3 else 'low'
        
        # –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
        avg_strength = total_strength / len(consensus_signals) if consensus_signals else 0
        
        # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å (–±–æ–ª–µ–µ —Å—Ç–∞—Ä—à–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å)
        weighted_score = 0
        total_weight = 0
        
        for signal in consensus_signals:
            weight = 1.0
            if signal['timeframe'] == '1d':
                weight = 3.0
            elif signal['timeframe'] == '4h':
                weight = 2.0
            elif signal['timeframe'] == '1h':
                weight = 1.0
                
            signal_value = 50  # neutral
            if 'bullish' in signal['signal']:
                signal_value = 100 if signal['signal'] == 'strong_bullish' else 75
            elif 'bearish' in signal['signal']:
                signal_value = 0 if signal['signal'] == 'strong_bearish' else 25
                
            weighted_score += signal_value * weight
            total_weight += weight
            
        consensus_score = weighted_score / total_weight if total_weight > 0 else 50
        
        return {
            'consensus_score': round(consensus_score, 2),
            'agreement_level': agreement_level,
            'timeframes_analyzed': timeframes_analyzed,
            'bullish_signals': bullish_count,
            'bearish_signals': bearish_count,
            'avg_strength': round(avg_strength, 2),
            'detailed_signals': consensus_signals
        }

    def calculate_wyckoff_levels(self, df, signal_type):
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –ø–æ –º–µ—Ç–æ–¥—É –í–∞–π–∫–æ—Ñ—Ñ–∞"""
        if df is None or len(df) < 50:
            return {}
            
        try:
            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –±–∞—Ä–æ–≤
            recent_data = df.tail(50)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—ã –í–∞–π–∫–æ—Ñ—Ñ–∞
            volume_profile = {}
            price_levels = {}
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–µ–Ω—ã –ø–æ —É—Ä–æ–≤–Ω—è–º (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 0.5% –æ—Ç —Ü–µ–Ω—ã)
            current_price = float(recent_data['close'].iloc[-1])
            price_step = current_price * 0.005  # 0.5%
            
            for _, row in recent_data.iterrows():
                price = float(row['close'])
                volume = float(row['volume'])
                price_level = round(price / price_step) * price_step
                
                if price_level not in volume_profile:
                    volume_profile[price_level] = 0
                    price_levels[price_level] = []
                    
                volume_profile[price_level] += volume
                price_levels[price_level].append(price)
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–∏–º—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            significant_levels = []
            avg_volume = np.mean(list(volume_profile.values()))
            
            for price_level, volume in volume_profile.items():
                if volume > avg_volume * 1.5:  # –ó–Ω–∞—á–∏–º—ã–π –æ–±—ä–µ–º (–Ω–∞ 50% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)
                    price_range = price_levels[price_level]
                    level_info = {
                        'price': price_level,
                        'volume': volume,
                        'count': len(price_range),
                        'avg_price': np.mean(price_range),
                        'volatility': np.std(price_range) if len(price_range) > 1 else 0
                    }
                    significant_levels.append(level_info)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
            significant_levels.sort(key=lambda x: x['volume'], reverse=True)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ TP/SL
            wyckoff_levels = {}
            current_price = float(df['close'].iloc[-1])
            
            if signal_type == 'LONG':
                # –ù–∞—Ö–æ–¥–∏–º —É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                resistance_levels = [level for level in significant_levels if level['price'] > current_price]
                resistance_levels.sort(key=lambda x: x['price'])
                
                if resistance_levels:
                    wyckoff_levels['tp1'] = resistance_levels[0]['price'] if len(resistance_levels) > 0 else current_price * 1.02
                    wyckoff_levels['tp2'] = resistance_levels[1]['price'] if len(resistance_levels) > 1 else current_price * 1.04
                    wyckoff_levels['tp3'] = resistance_levels[2]['price'] if len(resistance_levels) > 2 else current_price * 1.06
                    wyckoff_levels['sl'] = current_price - (wyckoff_levels['tp3'] - current_price) * 0.5
                    
            else:  # SHORT
                # –ù–∞—Ö–æ–¥–∏–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                support_levels = [level for level in significant_levels if level['price'] < current_price]
                support_levels.sort(key=lambda x: x['price'], reverse=True)
                
                if support_levels:
                    wyckoff_levels['tp1'] = support_levels[0]['price'] if len(support_levels) > 0 else current_price * 0.98
                    wyckoff_levels['tp2'] = support_levels[1]['price'] if len(support_levels) > 1 else current_price * 0.96
                    wyckoff_levels['tp3'] = support_levels[2]['price'] if len(support_levels) > 2 else current_price * 0.94
                    wyckoff_levels['sl'] = current_price + (current_price - wyckoff_levels['tp3']) * 0.5
                    
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            wyckoff_levels['significant_volume_levels'] = len(significant_levels)
            wyckoff_levels['avg_volume_multiple'] = avg_volume / float(df['volume'].tail(20).mean()) if len(df) >= 20 else 1
            
            return wyckoff_levels
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π –í–∞–π–∫–æ—Ñ—Ñ–∞: {e}")
            return {}

    def calculate_dynamic_fibonacci_levels(self, df, signal_type):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏ —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π"""
        if df is None or len(df) < 100:
            return {}
            
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–∏–º—ã–µ —Å–≤–∏–Ω–≥ —Ö–∞–π/–ª–æ—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –±–∞—Ä–æ–≤
            recent_data = df.tail(100)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
            swing_highs = []
            swing_lows = []
            
            for i in range(20, len(recent_data) - 20):
                current_high = float(recent_data['high'].iloc[i])
                current_low = float(recent_data['low'].iloc[i])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –±–∞—Ä —Å–≤–∏–Ω–≥ —Ö–∞–π
                is_swing_high = True
                for j in range(i-20, i+21):
                    if j >= 0 and j < len(recent_data):
                        if float(recent_data['high'].iloc[j]) > current_high:
                            is_swing_high = False
                            break
                            
                if is_swing_high:
                    swing_highs.append({
                        'price': current_high,
                        'timestamp': recent_data.index[i],
                        'volume': float(recent_data['volume'].iloc[i])
                    })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –±–∞—Ä —Å–≤–∏–Ω–≥ –ª–æ—É
                is_swing_low = True
                for j in range(i-20, i+21):
                    if j >= 0 and j < len(recent_data):
                        if float(recent_data['low'].iloc[j]) < current_low:
                            is_swing_low = False
                            break
                            
                if is_swing_low:
                    swing_lows.append({
                        'price': current_low,
                        'timestamp': recent_data.index[i],
                        'volume': float(recent_data['volume'].iloc[i])
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É (–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ —É—Ä–æ–≤–Ω–∏)
            swing_highs.sort(key=lambda x: x['volume'], reverse=True)
            swing_lows.sort(key=lambda x: x['volume'], reverse=True)
            
            # –ë–µ—Ä–µ–º —Ç–æ–ø-3 —É—Ä–æ–≤–Ω–µ–π
            top_highs = swing_highs[:3]
            top_lows = swing_lows[:3]
            
            fibonacci_levels = {}
            current_price = float(df['close'].iloc[-1])
            
            if signal_type == 'LONG' and top_lows:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–≤–∏–Ω–≥ –ª–æ—É –∫–∞–∫ –±–∞–∑—É
                base_level = min(top_lows, key=lambda x: abs(x['price'] - current_price))['price']
                diff = current_price - base_level
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –§–∏–±–æ–Ω–∞—á—á–∏
                fib_ratios = [0.382, 0.5, 0.618, 0.786, 1.0, 1.272, 1.618]
                
                fibonacci_levels = {
                    f'fib_{int(ratio*1000)}': current_price + diff * ratio
                    for ratio in fib_ratios
                }
                
            elif signal_type == 'SHORT' and top_highs:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–≤–∏–Ω–≥ —Ö–∞–π –∫–∞–∫ –±–∞–∑—É
                base_level = min(top_highs, key=lambda x: abs(x['price'] - current_price))['price']
                diff = base_level - current_price
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –§–∏–±–æ–Ω–∞—á—á–∏
                fib_ratios = [0.382, 0.5, 0.618, 0.786, 1.0, 1.272, 1.618]
                
                fibonacci_levels = {
                    f'fib_{int(ratio*1000)}': current_price - diff * ratio
                    for ratio in fib_ratios
                }
                
            # –î–æ–±–∞–≤–ª—è–µ–º TP1-3 –∏ SL
            if fibonacci_levels:
                sorted_levels = sorted(fibonacci_levels.values())
                
                if signal_type == 'LONG':
                    fibonacci_levels['tp1'] = sorted_levels[min(2, len(sorted_levels)-1)]  # 38.2%
                    fibonacci_levels['tp2'] = sorted_levels[min(4, len(sorted_levels)-1)]  # 61.8%
                    fibonacci_levels['tp3'] = sorted_levels[min(6, len(sorted_levels)-1)]  # 100%
                    fibonacci_levels['sl'] = current_price - (fibonacci_levels['tp3'] - current_price) * 0.5
                    
                else:  # SHORT
                    fibonacci_levels['tp1'] = sorted_levels[max(0, len(sorted_levels)-3)]  # 38.2%
                    fibonacci_levels['tp2'] = sorted_levels[max(0, len(sorted_levels)-5)]  # 61.8%
                    fibonacci_levels['tp3'] = sorted_levels[max(0, len(sorted_levels)-7)]  # 100%
                    fibonacci_levels['sl'] = current_price + (current_price - fibonacci_levels['tp3']) * 0.5
                    
            return fibonacci_levels
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏: {e}")
            return {}

    def calculate_market_cycle_analysis(self, data_dict):
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        if not data_dict or '1h' not in data_dict:
            return {'cycle_phase': 'unknown', 'cycle_confidence': 0}
            
        df_1h = data_dict['1h']
        if df_1h is None or len(df_1h) < 100:
            return {'cycle_phase': 'unknown', 'cycle_confidence': 0}
            
        try:
            # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ:
            # 1. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            # 2. –û–±—ä–µ–º
            # 3. –¢—Ä–µ–Ω–¥–æ–≤–∞—è —Å–∏–ª–∞
            # 4. RSI –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
            
            recent_data = df_1h.tail(50)
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR)
            atr_values = recent_data['atr'].dropna().values if 'atr' in recent_data.columns else []
            avg_atr = np.mean(atr_values) if len(atr_values) > 0 else 0.02
            current_price = float(recent_data['close'].iloc[-1])
            volatility_percent = (avg_atr / current_price) * 100
            
            # –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            volume_ratio = float(recent_data['volume_ratio'].iloc[-1]) if 'volume_ratio' in recent_data.columns else 1
            avg_volume_ratio = float(recent_data['volume_ratio'].tail(20).mean()) if 'volume_ratio' in recent_data.columns else 1
            
            # –¢—Ä–µ–Ω–¥–æ–≤–∞—è —Å–∏–ª–∞
            trend_20 = float(recent_data['price_trend_20'].iloc[-1]) if 'price_trend_20' in recent_data.columns else 0
            trend_50 = float(recent_data['price_trend_50'].iloc[-1]) if 'price_trend_50' in recent_data.columns else 0
            
            # RSI –∞–Ω–∞–ª–∏–∑
            rsi_values = recent_data['rsi'].dropna().values if 'rsi' in recent_data.columns else []
            rsi_trend = np.polyfit(range(len(rsi_values[-10:])), rsi_values[-10:], 1)[0] if len(rsi_values) >= 10 else 0
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞
            cycle_phase = 'accumulation'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ
            cycle_confidence = 50  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
            # –ê–Ω–∞–ª–∏–∑ –¥–ª—è –±—ã—á—å–µ–≥–æ —Ä—ã–Ω–∫–∞ (–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ ‚Üí —Ä–∞–∑–º–∞—Ö ‚Üí —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
            if volatility_percent > 3:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                if volume_ratio > 1.5 and trend_20 > 0.02:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º + —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                    cycle_phase = 'markup'  # –†–∞–∑–º–∞—Ö
                    cycle_confidence = 80
                elif volume_ratio < 0.8:  # –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º
                    cycle_phase = 'distribution'  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                    cycle_confidence = 70
                else:
                    cycle_phase = 'accumulation'  # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ
                    cycle_confidence = 60
            elif volatility_percent < 1:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                if abs(trend_20) < 0.01:  # –ü–ª–æ—Å–∫–∏–π —Ç—Ä–µ–Ω–¥
                    cycle_phase = 'consolidation'  # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
                    cycle_confidence = 75
                else:
                    cycle_phase = 'accumulation'  # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ
                    cycle_confidence = 65
            else:  # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                if trend_20 > 0.01 and rsi_trend > 0:  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ + RSI —Ä–∞—Å—Ç–µ—Ç
                    cycle_phase = 'markup'  # –†–∞–∑–º–∞—Ö
                    cycle_confidence = 70
                elif trend_20 < -0.01 and rsi_trend < 0:  # –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ + RSI –ø–∞–¥–∞–µ—Ç
                    cycle_phase = 'markdown'  # –°–ª–∏–≤
                    cycle_confidence = 70
                else:
                    cycle_phase = 'accumulation'  # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ
                    cycle_confidence = 55
                    
            return {
                'cycle_phase': cycle_phase,
                'cycle_confidence': cycle_confidence,
                'volatility_percent': round(volatility_percent, 2),
                'volume_ratio': round(volume_ratio, 2),
                'trend_20': round(trend_20 * 100, 2),
                'trend_50': round(trend_50 * 100, 2),
                'rsi_trend': round(rsi_trend, 4),
                'avg_volume_ratio': round(avg_volume_ratio, 2)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            return {'cycle_phase': 'unknown', 'cycle_confidence': 0}

    def apply_cycle_based_filtering(self, symbol, signal, market_cycle):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        if not signal or not market_cycle:
            return signal
            
        try:
            cycle_phase = market_cycle.get('cycle_phase', 'unknown')
            cycle_confidence = market_cycle.get('cycle_confidence', 50)
            
            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞
            if cycle_phase == 'markup':  # –†–∞–∑–º–∞—Ö - –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è LONG
                if signal['signal_type'] == 'LONG':
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è LONG —Å–∏–≥–Ω–∞–ª–æ–≤
                    signal['confidence'] = min(100, signal['confidence'] * 1.2)
                    signal['risk_reward_ratio'] = signal['risk_reward_ratio'] * 1.1
                elif signal['signal_type'] == 'SHORT':
                    # –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è SHORT —Å–∏–≥–Ω–∞–ª–æ–≤
                    signal['confidence'] = signal['confidence'] * 0.7
                    
            elif cycle_phase == 'markdown':  # –°–ª–∏–≤ - –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è SHORT
                if signal['signal_type'] == 'SHORT':
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è SHORT —Å–∏–≥–Ω–∞–ª–æ–≤
                    signal['confidence'] = min(100, signal['confidence'] * 1.2)
                    signal['risk_reward_ratio'] = signal['risk_reward_ratio'] * 1.1
                elif signal['signal_type'] == 'LONG':
                    # –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è LONG —Å–∏–≥–Ω–∞–ª–æ–≤
                    signal['confidence'] = signal['confidence'] * 0.7
                    
            elif cycle_phase == 'distribution':  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ
                # –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                signal['confidence'] = signal['confidence'] * 0.8
                signal['risk_reward_ratio'] = signal['risk_reward_ratio'] * 0.9
                
            elif cycle_phase == 'consolidation':  # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è - –æ—á–µ–Ω—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
                # –°–∏–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                signal['confidence'] = signal['confidence'] * 0.6
                signal['risk_reward_ratio'] = signal['risk_reward_ratio'] * 0.7
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ RR
                if signal['risk_reward_ratio'] < 1.5:
                    return None  # –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π RR –≤ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
                    
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–∏–∫–ª–∞
            min_confidence = self.risk_params['min_confidence_threshold']
            if cycle_confidence < 60:  # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ü–∏–∫–ª–µ
                min_confidence += 10  # –£–∂–µ—Å—Ç–æ—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                
            if signal['confidence'] < min_confidence:
                return None
                
            return signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ü–∏–∫–ª—É –¥–ª—è {symbol}: {e}")
            return signal

    def calculate_index_correlation_filter(self, symbol, data_dict):
        """–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏"""
        if not data_dict or '1h' not in data_dict:
            return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            
        df_1h = data_dict['1h']
        if df_1h is None or len(df_1h) < 50:
            return True
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ BTC (—Ä—ã–Ω–æ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å)
            btc_data = self.fetch_ohlcv_with_cache('BTC/USDT', '1h', limit=50)
            if not btc_data or len(btc_data) < 50:
                return True
                
            df_btc = pd.DataFrame(btc_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df_btc['timestamp'] = pd.to_datetime(df_btc['timestamp'], unit='ms')
            df_btc.set_index('timestamp', inplace=True)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            common_index = df_1h.index.intersection(df_btc.index)
            if len(common_index) < 30:  # –ú–∞–ª–æ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                return True
                
            df_sync_1h = df_1h.loc[common_index]
            df_sync_btc = df_btc.loc[common_index]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            returns_1h = df_sync_1h['close'].pct_change().dropna()
            returns_btc = df_sync_btc['close'].pct_change().dropna()
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC
            if len(returns_1h) > 10 and len(returns_btc) > 10:
                min_len = min(len(returns_1h), len(returns_btc))
                correlation_with_btc = np.corrcoef(
                    returns_1h.tail(min_len), 
                    returns_btc.tail(min_len)
                )[0, 1]
                
                # –î–ª—è –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤: —Ö–æ—Ç–∏–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –≤ –±—ã—á—å–µ–º —Ä—ã–Ω–∫–µ
                # –î–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è: —Ö–æ—Ç–∏–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
                
                asset_type = self.get_asset_sector(symbol)
                
                if asset_type in ['Bitcoin', 'Ethereum']:  # BTC/ETH
                    # BTC/ETH –¥–æ–ª–∂–Ω—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥—Ä—É–≥–∏—Ö
                    if abs(correlation_with_btc) > 0.8:  # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                        logger.debug(f"‚ùå {symbol}: –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC ({correlation_with_btc:.2f})")
                        return False
                        
                elif asset_type in ['Smart Contracts', 'DeFi']:  # –ê–ª—å—Ç–∫–æ–∏–Ω—ã
                    # –ê–ª—å—Ç–∫–æ–∏–Ω—ã –æ–±—ã—á–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—Ç —Å BTC > 0.5
                    if correlation_with_btc < 0.3:
                        logger.debug(f"‚ùå {symbol}: –ù–∏–∑–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC ({correlation_with_btc:.2f})")
                        return False
                        
                else:  # –î—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤—ã
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                    if abs(correlation_with_btc) > 0.9:  # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è
                        logger.debug(f"‚ùå {symbol}: –ê–Ω–æ–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC ({correlation_with_btc:.2f})")
                        return False
                        
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è {symbol}: {e}")
            return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def adaptive_parameter_optimization(self, symbol):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        if symbol not in self.signal_stats:
            return self.risk_params  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        stats = self.signal_stats[symbol]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        recent_results = stats.get('recent_results', [])
        if len(recent_results) < 10:
            return self.risk_params  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            
        recent_win_rate = sum(recent_results[-10:]) / 10
        overall_win_rate = stats.get('win_rate', 0.5)
        avg_pnl = stats.get('avg_pnl', 0)
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        optimized_params = self.risk_params.copy()
        
        # –ï—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–æ—Ö–∏–µ (< 40%)
        if recent_win_rate < 0.4:
            # –£–∂–µ—Å—Ç–æ—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            optimized_params['min_confidence_threshold'] = min(75, optimized_params['min_confidence_threshold'] + 10)
            optimized_params['min_rr_ratio'] = min(2.5, optimized_params['min_rr_ratio'] + 0.3)
            logger.info(f"üìâ {symbol}: –£–∂–µ—Å—Ç–æ—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (WR: {recent_win_rate:.1%})")
            
        # –ï—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö–æ—Ä–æ—à–∏–µ (> 70%)
        elif recent_win_rate > 0.7:
            # –ú–æ–∂–µ–º –Ω–µ–º–Ω–æ–≥–æ –æ—Å–ª–∞–±–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            optimized_params['min_confidence_threshold'] = max(40, optimized_params['min_confidence_threshold'] - 5)
            optimized_params['min_rr_ratio'] = max(1.1, optimized_params['min_rr_ratio'] - 0.1)
            logger.info(f"üìà {symbol}: –û—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (WR: {recent_win_rate:.1%})")
            
        # –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–∏–π PNL –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
        if avg_pnl < -1:
            # –£–∂–µ—Å—Ç–æ—á–∞–µ–º RR —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            optimized_params['min_rr_ratio'] = min(3.0, optimized_params['min_rr_ratio'] + 0.2)
            logger.info(f"üí∏ {symbol}: –£–∂–µ—Å—Ç–æ—á–µ–Ω–∏–µ RR (Avg PNL: {avg_pnl:.2f}%)")
            
        # –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–∏–π PNL –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏ –≤—ã—Å–æ–∫–∏–π (> 3%)
        elif avg_pnl > 3:
            # –ú–æ–∂–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            optimized_params['min_rr_ratio'] = max(1.0, optimized_params['min_rr_ratio'] - 0.1)
            logger.info(f"üí∞ {symbol}: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è RR (Avg PNL: {avg_pnl:.2f}%)")
            
        return optimized_params

    def get_adaptive_signal_requirements(self, symbol):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏–≥–Ω–∞–ª–∞–º"""
        base_requirements = {
            'min_long_conditions': 3,  # –ú–∏–Ω–∏–º—É–º 3 –∏–∑ 6 —É—Å–ª–æ–≤–∏–π
            'min_short_conditions': 3,
            'min_confidence': 45,
            'min_rr_ratio': 1.2,
            'require_volume_confirmation': True,
            'require_trend_confirmation': True,
            'require_momentum_confirmation': True
        }
        
        if symbol not in self.signal_stats:
            return base_requirements
            
        stats = self.signal_stats[symbol]
        recent_results = stats.get('recent_results', [])
        
        if len(recent_results) < 5:
            return base_requirements
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
        recent_performance = sum(recent_results[-5:]) / 5
        
        adaptive_requirements = base_requirements.copy()
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –±—ã–ª–∏ —É–±—ã—Ç–æ—á–Ω—ã–º–∏
        if recent_performance < 0.4:
            adaptive_requirements['min_long_conditions'] = 4  # –£–∂–µ—Å—Ç–æ—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            adaptive_requirements['min_short_conditions'] = 4
            adaptive_requirements['min_confidence'] = 55
            adaptive_requirements['min_rr_ratio'] = 1.5
            
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –±—ã–ª–∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã–º–∏
        elif recent_performance > 0.8:
            adaptive_requirements['min_long_conditions'] = 2  # –ú–æ–∂–µ–º –Ω–µ–º–Ω–æ–≥–æ –æ—Å–ª–∞–±–∏—Ç—å
            adaptive_requirements['min_short_conditions'] = 2
            adaptive_requirements['min_confidence'] = 40
            adaptive_requirements['min_rr_ratio'] = 1.1
            
        return adaptive_requirements

    def predict_signal_quality(self, symbol, signal, data_dict):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not signal or symbol not in self.signal_stats:
            return 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            
        try:
            stats = self.signal_stats[symbol]
            
            # –§–∞–∫—Ç–æ—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞:
            # 1. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç –ø–æ —Å–∏–º–≤–æ–ª—É
            historical_win_rate = stats.get('win_rate', 0.5)
            
            # 2. –ù–µ–¥–∞–≤–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            recent_results = stats.get('recent_results', [])
            recent_win_rate = sum(recent_results[-10:]) / 10 if len(recent_results) >= 10 else historical_win_rate
            
            # 3. –ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª–∞
            tech_quality = self.evaluate_technical_quality(signal, data_dict)
            
            # 4. –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            market_conditions = self.evaluate_market_conditions(data_dict)
            
            # 5. –í—Ä–µ–º—è —Å—É—Ç–æ–∫ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤—ã –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è)
            time_factor = self.evaluate_time_factor()
            
            # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            quality_prediction = (
                historical_win_rate * 0.3 +      # 30% –≤–µ—Å–∞
                recent_win_rate * 0.2 +          # 20% –≤–µ—Å–∞
                tech_quality * 0.25 +           # 25% –≤–µ—Å–∞
                market_conditions * 0.15 +       # 15% –≤–µ—Å–∞
                time_factor * 0.1                # 10% –≤–µ—Å–∞
            )
            
            return max(0, min(1, quality_prediction))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-1
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            return 0.5

    def evaluate_technical_quality(self, signal, data_dict):
        """–û—Ü–µ–Ω–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        if not signal or not data_dict or '1h' not in data_dict:
            return 0.5
            
        try:
            df_1h = data_dict['1h']
            if df_1h is None or len(df_1h) < 20:
                return 0.5
                
            # –û—Ü–µ–Ω–∫–∞ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–æ–≤:
            rsi = float(df_1h['rsi'].iloc[-1])
            stoch_k = float(df_1h['stoch_k'].iloc[-1])
            stoch_d = float(df_1h['stoch_d'].iloc[-1])
            macd = float(df_1h['macd'].iloc[-1])
            macd_signal = float(df_1h['macd_signal'].iloc[-1])
            bb_position = float(df_1h['bb_position'].iloc[-1])
            
            quality_score = 0
            
            if signal['signal_type'] == 'LONG':
                # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ LONG —Å–∏–≥–Ω–∞–ª–∞
                # RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (—Å–∏–ª—å–Ω–µ–µ = –ª—É—á—à–µ)
                if 20 <= rsi <= 35:
                    quality_score += 0.3
                elif 15 <= rsi <= 20:
                    quality_score += 0.2
                elif 35 <= rsi <= 40:
                    quality_score += 0.1
                    
                # –°—Ç–æ—Ö–∞—Å—Ç–∏–∫ –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
                if stoch_k <= 25 and stoch_d <= 25:
                    quality_score += 0.2
                    
                # MACD –±—ã—á–∏–π
                if macd > macd_signal:
                    quality_score += 0.2
                    
                # –¶–µ–Ω–∞ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
                if bb_position <= 0.2:
                    quality_score += 0.3
                    
            else:  # SHORT
                # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ SHORT —Å–∏–≥–Ω–∞–ª–∞
                # RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
                if 65 <= rsi <= 80:
                    quality_score += 0.3
                elif 80 <= rsi <= 85:
                    quality_score += 0.2
                elif 60 <= rsi <= 65:
                    quality_score += 0.1
                    
                # –°—Ç–æ—Ö–∞—Å—Ç–∏–∫ –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
                if stoch_k >= 75 and stoch_d >= 75:
                    quality_score += 0.2
                    
                # MACD –º–µ–¥–≤–µ–∂–∏–π
                if macd < macd_signal:
                    quality_score += 0.2
                    
                # –¶–µ–Ω–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
                if bb_position >= 0.8:
                    quality_score += 0.3
                    
            return min(1.0, quality_score)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return 0.5

    def evaluate_market_conditions(self, data_dict):
        """–û—Ü–µ–Ω–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        if not data_dict or '1h' not in data_dict:
            return 0.5
            
        try:
            df_1h = data_dict['1h']
            if df_1h is None or len(df_1h) < 20:
                return 0.5
                
            volatility = float(df_1h['volatility'].iloc[-1]) if 'volatility' in df_1h.columns else 0.02
            volume_ratio = float(df_1h['volume_ratio'].iloc[-1]) if 'volume_ratio' in df_1h.columns else 1
            trend_strength = abs(float(df_1h['price_trend_20'].iloc[-1])) if 'price_trend_20' in df_1h.columns else 0.01
            
            # –û—Ü–µ–Ω–∫–∞ —É—Å–ª–æ–≤–∏–π (0 = –ø–ª–æ—Ö–∏–µ, 1 = —Ö–æ—Ä–æ—à–∏–µ)
            condition_score = 0
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 1-5%
            if 0.01 <= volatility <= 0.05:
                condition_score += 0.4
            elif 0.005 <= volatility <= 0.01 or 0.05 <= volatility <= 0.08:
                condition_score += 0.2
                
            # –û–±—ä–µ–º: –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ª—É—á—à–µ
            if volume_ratio >= 1.2:
                condition_score += 0.3
            elif volume_ratio >= 1.0:
                condition_score += 0.1
                
            # –¢—Ä–µ–Ω–¥–æ–≤–∞—è —Å–∏–ª–∞: —É–º–µ—Ä–µ–Ω–Ω–∞—è –ª—É—á—à–µ
            if 0.01 <= trend_strength <= 0.05:
                condition_score += 0.3
            elif 0.005 <= trend_strength <= 0.01 or 0.05 <= trend_strength <= 0.1:
                condition_score += 0.1
                
            return min(1.0, condition_score)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
            return 0.5

    def evaluate_time_factor(self):
        """–û—Ü–µ–Ω–∫–∞ —Ñ–∞–∫—Ç–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
        try:
            current_hour = datetime.now().hour
            
            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤—ã –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:
            # BTC: 24/7 - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ
            # –ê–∑–∏–∞—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è: 0-8 —á–∞—Å–æ–≤ (–ª—É—á—à–µ –¥–ª—è –∞–∑–∏–∞—Ç—Å–∫–∏—Ö –∞–∫—Ç–∏–≤–æ–≤)
            # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å–µ—Å—Å–∏—è: 8-16 —á–∞—Å–æ–≤ 
            # –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è: 16-24 —á–∞—Å–∞
            
            if 0 <= current_hour <= 8:  # –ê–∑–∏–∞—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è
                return 0.6  # –°—Ä–µ–¥–Ω–µ
            elif 8 <= current_hour <= 16:  # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å–µ—Å—Å–∏—è
                return 0.7  # –•–æ—Ä–æ—à–æ
            else:  # –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è
                return 0.8  # –û—Ç–ª–∏—á–Ω–æ
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞: {e}")
            return 0.5
            
    def calculate_advanced_indicators(self, df, timeframe):
        """–†–∞—Å—á–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        if df is None or len(df) < 20:
            return None
            
        try:
            # EMA
            df['ema_9'] = ta.trend.EMAIndicator(df['close'], window=9).ema_indicator()
            df['ema_21'] = ta.trend.EMAIndicator(df['close'], window=21).ema_indicator()
            df['ema_50'] = ta.trend.EMAIndicator(df['close'], window=50).ema_indicator()
            
            # MACD
            df['macd'] = df['ema_9'] - df['ema_21']
            df['macd_signal'] = df['macd'].rolling(window=9).mean()
            df['macd_histogram'] = df['macd'] - df['macd_signal']
            
            # RSI
            df['rsi'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi()
            df['rsi_sma'] = df['rsi'].rolling(window=14).mean()
            
            # –°—Ç–æ—Ö–∞—Å—Ç–∏–∫
            stoch = ta.momentum.StochasticOscillator(df['high'], df['low'], df['close'], window=14, smooth_window=3)
            df['stoch_k'] = stoch.stoch()
            df['stoch_d'] = stoch.stoch_signal()
            
            # –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä
            bb = ta.volatility.BollingerBands(df['close'], window=20, window_dev=2)
            df['bb_upper'] = bb.bollinger_hband()
            df['bb_middle'] = bb.bollinger_mavg()
            df['bb_lower'] = bb.bollinger_lband()
            df['bb_width'] = (df['bb_upper'] - df['bb_lower']) / (df['bb_middle'] + 0.0001)
            df['bb_position'] = (df['close'] - df['bb_lower']) / (df['bb_upper'] - df['bb_lower'] + 0.0001)
            
            # ATR
            df['atr'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range()
            
            # –û–±—ä–µ–º
            df['volume_ema'] = ta.trend.EMAIndicator(df['volume'], window=20).ema_indicator()
            df['volume_ratio'] = (df['volume'] / (df['volume_ema'] + 0.0001))
            
            # –ú–æ–º–µ–Ω—Ç—É–º
            df['roc_1'] = df['close'].pct_change(1)
            df['roc_3'] = df['close'].pct_change(3)
            df['roc_7'] = df['close'].pct_change(7)
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
            df['candle_body'] = abs(df['close'] - df['open'])
            df['candle_ratio'] = df['candle_body'] / (df['high'] - df['low'] + 0.0001)
            
            # –¢—Ä–µ–Ω–¥
            df['price_trend_20'] = (df['close'] - df['close'].shift(20)) / (df['close'].shift(20) + 0.0001)
            df['price_trend_50'] = (df['close'] - df['close'].shift(50)) / (df['close'].shift(50) + 0.0001)
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            df['volatility'] = df['close'].pct_change().rolling(window=14).std() * np.sqrt(365)
            
            # –°–≤–∏–Ω–≥ —Ö–∞–π/–ª–æ—É –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            df['swing_high'] = df['high'][
                (df['high'] > df['high'].shift(1)) & 
                (df['high'] > df['high'].shift(-1)) & 
                (df['high'] > df['high'].shift(2)) & 
                (df['high'] > df['high'].shift(-2))
            ]
            
            df['swing_low'] = df['low'][
                (df['low'] < df['low'].shift(1)) & 
                (df['low'] < df['low'].shift(-1)) & 
                (df['low'] < df['low'].shift(2)) & 
                (df['low'] < df['low'].shift(-2))
            ]
            
            # –ü–∏–≤–æ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏
            df['pivot'] = (df['high'] + df['low'] + df['close']) / 3
            df['pivot_r1'] = 2 * df['pivot'] - df['low']
            df['pivot_s1'] = 2 * df['pivot'] - df['high']
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df
            
        return df
        
    def calculate_multitimeframe_analysis(self, data_dict):
        """–ú—É–ª—å—Ç–∏–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑"""
        if not data_dict:
            return {}
            
        analysis = {}
        
        for tf, df in data_dict.items():
            if df is not None and len(df) > 0:
                try:
                    last_row = df.iloc[-1]
                    analysis[tf] = {
                        'price': float(last_row['close']) if not pd.isna(last_row['close']) else 0,
                        'trend_ema': 'bullish' if last_row['close'] > last_row.get('ema_21', last_row['close']) else 'bearish',
                        'rsi': float(last_row.get('rsi', 50)) if not pd.isna(last_row.get('rsi', 50)) else 50,
                        'macd_trend': 'bullish' if (last_row.get('macd', 0) or 0) > (last_row.get('macd_signal', 0) or 0) else 'bearish',
                        'momentum': float(last_row.get('roc_3', 0)) if not pd.isna(last_row.get('roc_3', 0)) else 0,
                        'bb_position': float(last_row.get('bb_position', 0.5)) if not pd.isna(last_row.get('bb_position', 0.5)) else 0.5
                    }
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {tf}: {e}")
                    analysis[tf] = {
                        'price': float(df['close'].iloc[-1]) if len(df) > 0 and not pd.isna(df['close'].iloc[-1]) else 0,
                        'trend_ema': 'neutral',
                        'rsi': 50,
                        'macd_trend': 'neutral',
                        'momentum': 0,
                        'bb_position': 0.5
                    }
        
        return analysis
        
    def calculate_dynamic_levels(self, symbol, data_dict, signal_type):
        """–ë–û–õ–ï–ï –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ï –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏"""
        if not data_dict or '1h' not in data_dict:
            return self.calculate_basic_levels(symbol, data_dict, signal_type)
            
        df_1h = data_dict['1h']
        if df_1h is None or len(df_1h) < 20:
            return self.calculate_basic_levels(symbol, data_dict, signal_type)
            
        try:
            current_price = float(df_1h['close'].iloc[-1])
            atr = float(df_1h['atr'].iloc[-1]) if 'atr' in df_1h.columns and not pd.isna(df_1h['atr'].iloc[-1]) else current_price * 0.02
            
            # –ú–ï–ù–¨–®–ï —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
            base_sl_distance = atr * 1.1
            base_tp1_distance = atr * 1.6
            base_tp2_distance = atr * 2.4
            base_tp3_distance = atr * 3.2
            
            # –ú–ï–ù–¨–®–ï –º–Ω–æ–∂–∏—Ç–µ–ª–∏
            potential_multiplier = 1.0
            
            if signal_type == 'LONG':
                sl = current_price - (base_sl_distance * 0.95)  # –ú–µ–Ω—å—à–µ SL
                tp1 = current_price + (base_tp1_distance * potential_multiplier)
                tp2 = current_price + (base_tp2_distance * potential_multiplier * 1.02)
                tp3 = current_price + (base_tp3_distance * potential_multiplier * 1.05)
                
            else:  # SHORT
                sl = current_price + (base_sl_distance * 0.95)  # –ú–µ–Ω—å—à–µ SL
                tp1 = current_price - (base_tp1_distance * potential_multiplier)
                tp2 = current_price - (base_tp2_distance * potential_multiplier * 1.02)
                tp3 = current_price - (base_tp3_distance * potential_multiplier * 1.05)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            rr_ratio = abs(tp3 - current_price) / (abs(current_price - sl) + 0.0001)
            if rr_ratio < 0.8 or rr_ratio > 8:  # –†–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                raise Exception("–ù–µ—Ä–∞–∑—É–º–Ω—ã–π RR")
                
            if signal_type == 'LONG':
                if sl >= current_price or tp3 <= current_price:
                    raise Exception("–ù–µ—Ä–∞–∑—É–º–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ LONG")
            else:  # SHORT
                if sl <= current_price or tp3 >= current_price:
                    raise Exception("–ù–µ—Ä–∞–∑—É–º–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ SHORT")
                
            return round(float(sl), 8), round(float(tp1), 8), round(float(tp2), 8), round(float(tp3), 8)
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è  {symbol}: –ò—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –∏–∑-–∑–∞: {e}")
            return self.calculate_basic_levels(symbol, data_dict, signal_type)
    
    def calculate_basic_levels(self, symbol, data_dict, signal_type):
        """–ë–∞–∑–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫"""
        try:
            if not data_dict or '1h' not in data_dict or data_dict['1h'] is None:
                # –ê–±—Å–æ–ª—é—Ç–Ω–æ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                current_price = 1000.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
            else:
                current_price = float(data_dict['1h']['close'].iloc[-1])
                
            atr = current_price * 0.015  # 1.5% –æ—Ç —Ü–µ–Ω—ã
            
            if signal_type == 'LONG':
                sl = current_price - atr * 1.2
                tp1 = current_price + atr * 1.8
                tp2 = current_price + atr * 3.0
                tp3 = current_price + atr * 4.5
            else:
                sl = current_price + atr * 1.2
                tp1 = current_price - atr * 1.8
                tp2 = current_price - atr * 3.0
                tp3 = current_price - atr * 4.5
                
            logger.debug(f"üîÑ {symbol} {signal_type} | –ë–ê–ó–û–í–´–ï —É—Ä–æ–≤–Ω–∏: "
                        f"SL: {sl:.8f} | TP1: {tp1:.8f} | TP2: {tp2:.8f} | TP3: {tp3:.8f}")
            
            return round(float(sl), 8), round(float(tp1), 8), round(float(tp2), 8), round(float(tp3), 8)
            
        except Exception as e:
            logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {e}")
            # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π fallback
            current_price = 1000.0
            if signal_type == 'LONG':
                return 990.0, 1005.0, 1015.0, 1025.0
            else:
                return 1010.0, 995.0, 985.0, 975.0
    
    def find_resistance_levels(self, df, current_price):
        """–ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        if df is None or len(df) < 20:
            return []
            
        try:
            # –°–≤–∏–Ω–≥ —Ö–∞–π
            swing_highs = df['swing_high'].dropna().tail(10)
            resistance_from_swing = list(swing_highs.values) if len(swing_highs) > 0 else []
            
            # –ü–∏–≤–æ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            pivot_resistance = []
            if 'pivot_r1' in df.columns:
                recent_pivots = df['pivot_r1'].tail(5).dropna()
                pivot_resistance = [p for p in recent_pivots if p > current_price]
            
            # –£—Ä–æ–≤–Ω–∏ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –±–∞—Ä–æ–≤
            recent_highs = df['high'].tail(50)
            dynamic_resistance = [h for h in recent_highs if h > current_price * 1.01]  # –ù–∞ 1% –≤—ã—à–µ
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
            all_resistance = resistance_from_swing + pivot_resistance + dynamic_resistance
            return sorted(list(set(all_resistance))) if all_resistance else []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: {e}")
            return []
    
    def find_support_levels(self, df, current_price):
        """–ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        if df is None or len(df) < 20:
            return []
            
        try:
            # –°–≤–∏–Ω–≥ –ª–æ—É
            swing_lows = df['swing_low'].dropna().tail(10)
            support_from_swing = list(swing_lows.values) if len(swing_lows) > 0 else []
            
            # –ü–∏–≤–æ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            pivot_support = []
            if 'pivot_s1' in df.columns:
                recent_pivots = df['pivot_s1'].tail(5).dropna()
                pivot_support = [p for p in recent_pivots if p < current_price]
            
            # –£—Ä–æ–≤–Ω–∏ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –±–∞—Ä–æ–≤
            recent_lows = df['low'].tail(50)
            dynamic_support = [l for l in recent_lows if l < current_price * 0.99]  # –ù–∞ 1% –Ω–∏–∂–µ
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏
            all_support = support_from_swing + pivot_support + dynamic_support
            return sorted(list(set(all_support)), reverse=True) if all_support else []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
            return []
            
    def estimate_signal_formation_time(self, data_dict):
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        if not data_dict or '1h' not in data_dict:
            return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            
        try:
            df_1h = data_dict['1h']
            if df_1h is None or len(df_1h) < 10:
                return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
                
            recent_data = df_1h.tail(10)
            conditions_met_count = 0
            
            for i in range(len(recent_data)-1, -1, -1):
                row = recent_data.iloc[i]
                rsi = float(row.get('rsi', 50)) if not pd.isna(row.get('rsi', 50)) else 50
                stoch_k = float(row.get('stoch_k', 50)) if not pd.isna(row.get('stoch_k', 50)) else 50
                stoch_d = float(row.get('stoch_d', 50)) if not pd.isna(row.get('stoch_d', 50)) else 50
                macd = float(row.get('macd', 0)) if not pd.isna(row.get('macd', 0)) else 0
                macd_signal = float(row.get('macd_signal', 0)) if not pd.isna(row.get('macd_signal', 0)) else 0
                bb_position = float(row.get('bb_position', 0.5)) if not pd.isna(row.get('bb_position', 0.5)) else 0.5
                
                long_conditions = [
                    rsi < 35,
                    stoch_k < 30 and stoch_d < 30,
                    macd > macd_signal,
                    bb_position < 0.3
                ]
                
                short_conditions = [
                    rsi > 65,
                    stoch_k > 70 and stoch_d > 70,
                    macd < macd_signal,
                    bb_position > 0.7
                ]
                
                if sum(long_conditions) >= 3 or sum(short_conditions) >= 3:
                    conditions_met_count = len(recent_data) - i
                    break
                    
            if conditions_met_count > 0:
                formation_hours = conditions_met_count
                return f"~{formation_hours} —á–∞—Å–æ–≤"
            else:
                return "–£—Å–ª–æ–≤–∏—è —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            
    def generate_signal(self, symbol, data_dict, multitimeframe_analysis):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏"""
        if not data_dict or '1h' not in data_dict:
            logger.debug(f"‚ùå {symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö 1h")
            return None
            
        df_1h = data_dict['1h']
        if df_1h is None or len(df_1h) < 20:
            logger.debug(f"‚ùå {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({len(df_1h) if df_1h is not None else 0})")
            return None
            
        try:
            current_price = float(df_1h['close'].iloc[-1])
            atr = float(df_1h['atr'].iloc[-1]) if 'atr' in df_1h.columns and not pd.isna(df_1h['atr'].iloc[-1]) else current_price * 0.02
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            rsi = float(df_1h['rsi'].iloc[-1]) if not pd.isna(df_1h['rsi'].iloc[-1]) else 50
            stoch_k = float(df_1h['stoch_k'].iloc[-1]) if not pd.isna(df_1h['stoch_k'].iloc[-1]) else 50
            stoch_d = float(df_1h['stoch_d'].iloc[-1]) if not pd.isna(df_1h['stoch_d'].iloc[-1]) else 50
            macd = float(df_1h['macd'].iloc[-1]) if not pd.isna(df_1h['macd'].iloc[-1]) else 0
            macd_signal = float(df_1h['macd_signal'].iloc[-1]) if not pd.isna(df_1h['macd_signal'].iloc[-1]) else 0
            bb_position = float(df_1h['bb_position'].iloc[-1]) if not pd.isna(df_1h['bb_position'].iloc[-1]) else 0.5
            volume_ratio = float(df_1h['volume_ratio'].iloc[-1]) if not pd.isna(df_1h['volume_ratio'].iloc[-1]) else 1
            momentum_1h = float(df_1h['roc_3'].iloc[-1]) if not pd.isna(df_1h['roc_3'].iloc[-1]) else 0
            
            momentum_5m = 0
            momentum_15m = 0
            
            if '5m' in data_dict and data_dict['5m'] is not None and len(data_dict['5m']) > 5:
                df_5m = data_dict['5m']
                momentum_5m = float(df_5m['roc_3'].iloc[-1]) if not pd.isna(df_5m['roc_3'].iloc[-1]) else 0
                
            if '15m' in data_dict and data_dict['15m'] is not None and len(data_dict['15m']) > 5:
                df_15m = data_dict['15m']
                momentum_15m = float(df_15m['roc_3'].iloc[-1]) if not pd.isna(df_15m['roc_3'].iloc[-1]) else 0
            
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è LONG (–ù–û–†–ú–ê–õ–¨–ù–´–ï)
            long_conditions = [
                rsi < 40,  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
                stoch_k < 30 and stoch_d < 30,  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫–∞
                macd > macd_signal,  # MACD bullish
                bb_position < 0.3,  # –¶–µ–Ω–∞ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
                volume_ratio > 1.1,  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
                momentum_1h > -0.015  # –£–º–µ—Ä–µ–Ω–Ω—ã–π downtrend
            ]
            
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è SHORT (–ù–û–†–ú–ê–õ–¨–ù–´–ï)
            short_conditions = [
                rsi > 60,  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
                stoch_k > 70 and stoch_d > 70,  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫–∞
                macd < macd_signal,  # MACD bearish
                bb_position > 0.7,  # –¶–µ–Ω–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
                volume_ratio > 1.1,  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
                momentum_1h < 0.015  # –£–º–µ—Ä–µ–Ω–Ω—ã–π uptrend
            ]
            
            signal_type = None
            confidence_score = 0
            
            long_score = sum(long_conditions)
            short_score = sum(short_conditions)
            
            # –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (1-5)
            signal_strength = 0
            if long_score >= 5 or short_score >= 5:
                signal_strength = 5
            elif long_score >= 4 or short_score >= 4:
                signal_strength = 4
            elif long_score >= 3 or short_score >= 3:
                signal_strength = 3
            elif long_score >= 2 or short_score >= 2:
                signal_strength = 2
            else:
                signal_strength = 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ SHORT —Å–∏–≥–Ω–∞–ª—ã
            if not self.risk_params['use_short_signals']:
                short_score = 0
                short_conditions = []
            
            # –ù–û–†–ú–ê–õ–¨–ù–´–ï —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
            if long_score >= 3:  # 3 –∏–∑ 6
                signal_type = 'LONG'
                confidence_score = (long_score / len(long_conditions)) * 100
            elif short_score >= 3 and self.risk_params['use_short_signals']:  # 3 –∏–∑ 6
                signal_type = 'SHORT'
                confidence_score = (short_score / len(short_conditions)) * 100
                
            # –ù–û–†–ú–ê–õ–¨–ù–´–ô –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if signal_type and confidence_score >= 50:  # 50% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                if not self.check_multitimeframe_confirmation(data_dict, signal_type):
                    logger.debug(f"‚ùå {symbol}: –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö")
                    return None
                    
                if not self.check_volatility_filter(df_1h):
                    logger.debug(f"‚ùå {symbol}: –ù–µ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
                    return None
                    
                if not self.check_volume_profile(data_dict):
                    logger.debug(f"‚ùå {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º")
                    return None
                    
                if not self.check_correlation_filter(symbol, self.active_trades):
                    logger.debug(f"‚ùå {symbol}: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π")
                    return None
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ TP –∏ SL
                sl, tp1, tp2, tp3 = self.calculate_dynamic_levels(symbol, data_dict, signal_type)
                
                if sl is None or tp1 is None or tp2 is None or tp3 is None:
                    logger.debug(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π")
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω–µ–π
                risk_reward_ratio = abs(tp3 - current_price) / (abs(current_price - sl) + 0.0001)
                
                # –ù–û–†–ú–ê–õ–¨–ù–´–ô RR ratio
                if signal_type == 'LONG' and sl < current_price and tp3 > current_price and risk_reward_ratio > 1.3:
                    valid = True
                elif signal_type == 'SHORT' and sl > current_price and tp3 < current_price and risk_reward_ratio > 1.3:
                    valid = True
                else:
                    valid = False
                    
                if valid:
                    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
                    formation_time = self.estimate_signal_formation_time(data_dict)
                    
                    # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ä–æ—Å—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    potential_upside = ((tp3 - current_price) / current_price * 100) if signal_type == 'LONG' else ((current_price - tp3) / current_price * 100)
                    
                    return {
                        'symbol': symbol,
                        'signal_type': signal_type,
                        'entry_price': round(float(current_price), 8),
                        'tp1': round(float(tp1), 8),
                        'tp2': round(float(tp2), 8),
                        'tp3': round(float(tp3), 8),
                        'sl': round(float(sl), 8),
                        'confidence': round(float(confidence_score), 2),
                        'risk_reward_ratio': round(float(risk_reward_ratio), 2),
                        'potential_upside': round(float(potential_upside), 2),
                        'formation_time': formation_time,
                        'signal_strength': int(signal_strength),
                        'timeframe_analysis': {
                            '5m_momentum': round(float(momentum_5m), 6),
                            '15m_momentum': round(float(momentum_15m), 6),
                            '1h_momentum': round(float(momentum_1h), 6)
                        },
                        'technical_analysis': {
                            'rsi': round(float(rsi), 2),
                            'stoch_k': round(float(stoch_k), 2),
                            'macd': round(float(macd), 8),
                            'bb_position': round(float(bb_position), 2),
                            'volume_ratio': round(float(volume_ratio), 2),
                            'potential_multiplier': round(float((abs(tp3 - current_price) / (atr * 5)) if atr > 0 else 1), 2)
                        },
                        'timestamp': datetime.now().isoformat(),
                        'conditions_met': {
                            'long_score': int(long_score),
                            'short_score': int(short_score),
                            'total_conditions': len(long_conditions) if signal_type == 'LONG' else len(short_conditions)
                        }
                    }
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
            
        return None
        
    def get_current_price(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ñ—å—é—á–µ—Ä—Å–∞"""
        try:
            ticker = self.exchange.fetch_ticker(symbol)
            return float(ticker['last'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ñ—å—é—á–µ—Ä—Å–∞ –¥–ª—è {symbol}: {e}")
            return None
            
    def check_active_trades(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        trades_to_remove = []
        for symbol in list(self.active_trades.keys()):
            result = self.check_trade_status(symbol)
            if result == 'closed':
                trades_to_remove.append(symbol)
                
        for symbol in trades_to_remove:
            if symbol in self.active_trades:
                del self.active_trades[symbol]
                
        if trades_to_remove or len(self.active_trades) > 0:
            self.save_state()
            
    def check_trade_status(self, symbol):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        if symbol not in self.active_trades:
            return 'not_found'
            
        trade = self.active_trades[symbol]
        current_price = self.get_current_price(symbol)
        
        if current_price is None:
            logger.info(f"üëÄ [{symbol}] –û—Ç—Å–ª–µ–∂–∏–≤–∞—é {trade['signal_type']} | –¶–µ–Ω–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ | –í—Ö–æ–¥: {trade['entry_price']} | –°—Ç–∞—Ç—É—Å: {self.get_trade_status(trade)}")
            return 'active'
            
        entry_price = float(trade['entry_price'])
        signal_type = trade['signal_type']
        
        logger.info(f"üëÄ [{symbol}] –û—Ç—Å–ª–µ–∂–∏–≤–∞—é {signal_type} | –¶–µ–Ω–∞: {current_price} | –í—Ö–æ–¥: {entry_price} | –°—Ç–∞—Ç—É—Å: {self.get_trade_status(trade)}")
        
        tp_levels = [float(trade['tp1']), float(trade['tp2']), float(trade['tp3'])]
        tp_names = ['TP1', 'TP2', 'TP3']
        
        for i, (tp, tp_name) in enumerate(zip(tp_levels, tp_names)):
            if f'{tp_name.lower()}_reached' not in trade or not trade[f'{tp_name.lower()}_reached']:
                reached = False
                if signal_type == 'LONG' and current_price >= tp:
                    reached = True
                elif signal_type == 'SHORT' and current_price <= tp:
                    reached = True
                    
                if reached:
                    trade[f'{tp_name.lower()}_reached'] = True
                    logger.info(f"üéØ [{symbol}] --- Take Profit {i+1} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç @ {tp} ---")
                    
                    if tp_name == 'TP3':
                        logger.info(f"üéâ [{symbol}] –°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê –ø–æ Take Profit 3 @ {tp}")
                        self.save_state()
                        return 'closed'
                        
        sl = float(trade['sl'])
        sl_reached = False
        if signal_type == 'LONG' and current_price <= sl:
            sl_reached = True
        elif signal_type == 'SHORT' and current_price >= sl:
            sl_reached = True
            
        if sl_reached:
            trade['sl_reached'] = True
            logger.info(f"üõë [{symbol}] –°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê –ø–æ Stop Loss @ {sl}")
            self.save_state()
            return 'closed'
            
        return 'active'
        
    def get_trade_status(self, trade):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏"""
        if trade.get('tp3_reached', False):
            return 'hit TP3'
        elif trade.get('tp2_reached', False):
            return 'hit TP2'
        elif trade.get('tp1_reached', False):
            return 'hit TP1'
        elif trade.get('sl_reached', False):
            return 'hit SL'
        else:
            return 'active'
            
    def send_signal(self, signal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        if signal is None:
            return
            
        symbol = signal['symbol']
        if symbol in self.signal_history and len(self.signal_history[symbol]) > 0:
            last_signal = self.signal_history[symbol][-1]
            try:
                last_timestamp = datetime.fromisoformat(last_signal['timestamp'].replace('Z', '+00:00')) if isinstance(last_signal['timestamp'], str) else last_signal['timestamp']
                current_timestamp = datetime.fromisoformat(signal['timestamp'].replace('Z', '+00:00')) if isinstance(signal['timestamp'], str) else signal['timestamp']
                
                if (current_timestamp - last_timestamp).total_seconds() < 3600:
                    return
            except:
                pass
                
        self.signal_history[symbol].append(self.convert_to_serializable(signal))
        if len(self.signal_history[symbol]) > 50:
            self.signal_history[symbol] = self.signal_history[symbol][-25:]
            
        signal_log_entry = {
            'timestamp': signal['timestamp'],
            'symbol': signal['symbol'],
            'signal_type': signal['signal_type'],
            'entry_price': float(signal['entry_price']),
            'tp1': float(signal['tp1']),
            'tp2': float(signal['tp2']),
            'tp3': float(signal['tp3']),
            'sl': float(signal['sl']),
            'confidence': float(signal['confidence']),
            'rr_ratio': float(signal['risk_reward_ratio']),
            'potential_upside': float(signal.get('potential_upside', 0)),
            'signal_strength': int(signal['signal_strength'])
        }
        self.signals_found.append(self.convert_to_serializable(signal_log_entry))
        
        self.analysis_stats['signals_generated'] += 1
        
        logger.info(f"‚úÖ [{signal['symbol']}] --- –û–¢–ö–†–´–¢–ê {signal['signal_type']} –°–î–ï–õ–ö–ê (–°–∏–ª–∞: {signal['signal_strength']}) @ {signal['entry_price']} ---")
        logger.info(f"   SL: {signal['sl']}, TP1: {signal['tp1']}, TP2: {signal['tp2']}, TP3: {signal['tp3']}")
        logger.info(f"   üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {signal.get('potential_upside', 0):.1f}% | RR: {signal['risk_reward_ratio']}")
        
        if symbol not in self.active_trades:
            self.active_trades[signal['symbol']] = self.convert_to_serializable(signal).copy()
            for tp_name in ['tp1', 'tp2', 'tp3']:
                self.active_trades[signal['symbol']][f'{tp_name}_reached'] = False
            self.active_trades[signal['symbol']]['sl_reached'] = False
            
            self.save_state()
            
    def save_signals_log(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            serializable_signals = [self.convert_to_serializable(signal) for signal in self.signals_found]
            serializable_stats = self.convert_to_serializable(self.analysis_stats)
                
            with open('signals_log.json', 'w', encoding='utf-8') as f:
                json.dump({
                    'signals': serializable_signals,
                    'stats': serializable_stats,
                    'generated_at': datetime.now().isoformat()
                }, f, ensure_ascii=False, indent=2, default=str)
                
            if self.signals_found:
                csv_data = []
                for signal in self.signals_found:
                    csv_signal = self.convert_to_serializable(signal).copy()
                    csv_data.append(csv_signal)
                df = pd.DataFrame(csv_data)
                df.to_csv('signals_log.csv', index=False)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        
    def process_symbol(self, symbol):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            data_dict = self.robust_data_fetch(symbol, self.timeframes)
            if not data_dict:
                return None
                
            for tf in self.timeframes:
                if tf in data_dict and data_dict[tf] is not None:
                    data_dict[tf] = self.calculate_advanced_indicators(data_dict[tf], tf)
            
            multitimeframe_analysis = self.calculate_multitimeframe_analysis(data_dict)
            
            if symbol not in self.active_trades:
                signal = self.generate_signal(symbol, data_dict, multitimeframe_analysis)
                return signal
            else:
                logger.debug(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω {symbol} - —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
            return None
            
    def backtest_strategy(self, symbol, days=30):
        """–ü—Ä–æ—Å—Ç–æ–π –±—ç–∫—Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º 100"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            ohlcv = self.fetch_ohlcv_with_cache(symbol, '1h', limit=days*24)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            df = self.calculate_advanced_indicators(df, '1h')
            
            if df is None or len(df) < 50:
                return None
                
            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            signals = []
            position = None
            balance = 100  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 100
            trades = []
            
            for i in range(50, len(df)):
                current_data = df.iloc[:i+1]
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ data_dict –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
                temp_data_dict = {'1h': current_data}
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é)
                signal = self.generate_backtest_signal(symbol, temp_data_dict)
                
                if signal and position is None:
                    # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                    position = {
                        'type': signal['signal_type'],
                        'entry_price': signal['entry_price'],
                        'sl': signal['sl'],
                        'tp1': signal['tp1'],
                        'tp2': signal['tp2'],
                        'tp3': signal['tp3'],
                        'balance_at_entry': balance
                    }
                    signals.append({
                        'timestamp': df.index[i],
                        'action': 'OPEN',
                        'signal': signal
                    })
                    
                elif position is not None:
                    current_price = float(df['close'].iloc[i])
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                    exit_reason = None
                    exit_price = None
                    
                    if position['type'] == 'LONG':
                        if current_price <= position['sl']:
                            exit_reason = 'SL'
                            exit_price = position['sl']
                        elif current_price >= position['tp3']:
                            exit_reason = 'TP3'
                            exit_price = position['tp3']
                    else:  # SHORT
                        if current_price >= position['sl']:
                            exit_reason = 'SL'
                            exit_price = position['sl']
                        elif current_price <= position['tp3']:
                            exit_reason = 'TP3'
                            exit_price = position['tp3']
                    
                    if exit_reason:
                        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                        if position['type'] == 'LONG':
                            pnl_percent = (exit_price - position['entry_price']) / position['entry_price'] * 100
                        else:  # SHORT
                            pnl_percent = (position['entry_price'] - exit_price) / position['entry_price'] * 100
                        
                        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–¥–µ–ª–∫—É)
                        position_size = position['balance_at_entry'] * 0.01  # 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                        pnl_dollars = position_size * (pnl_percent / 100)
                        
                        balance += pnl_dollars
                        
                        trades.append({
                            'entry_price': position['entry_price'],
                            'exit_price': exit_price,
                            'pnl_percent': round(pnl_percent, 2),
                            'pnl_dollars': round(pnl_dollars, 2),
                            'balance_after_trade': round(balance, 2),
                            'reason': exit_reason
                        })
                        
                        signals.append({
                            'timestamp': df.index[i],
                            'action': 'CLOSE',
                            'reason': exit_reason,
                            'pnl_percent': round(pnl_percent, 2),
                            'pnl_dollars': round(pnl_dollars, 2)
                        })
                        
                        position = None
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if trades:
                total_trades = len(trades)
                winning_trades = len([t for t in trades if t['pnl_percent'] > 0])
                win_rate = winning_trades / total_trades if total_trades > 0 else 0
                avg_pnl = sum([t['pnl_percent'] for t in trades]) / total_trades if total_trades > 0 else 0
                total_pnl = sum([t['pnl_dollars'] for t in trades])
                final_balance = trades[-1]['balance_after_trade'] if trades else 100
                total_return = ((final_balance - 100) / 100) * 100  # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –¥–æ—Ö–æ–¥
                
                return {
                    'initial_balance': 100,
                    'final_balance': round(final_balance, 2),
                    'total_return_percent': round(total_return, 2),
                    'total_trades': total_trades,
                    'win_rate': round(win_rate * 100, 2),
                    'avg_pnl_percent': round(avg_pnl, 2),
                    'total_pnl_dollars': round(total_pnl, 2),
                    'trades': trades,
                    'signals': signals
                }
            else:
                return {
                    'initial_balance': 100,
                    'final_balance': 100,
                    'total_return_percent': 0,
                    'total_trades': 0,
                    'win_rate': 0,
                    'avg_pnl_percent': 0,
                    'total_pnl_dollars': 0,
                    'trades': [],
                    'signals': []
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è {symbol}: {e}")
            return None

    def generate_backtest_signal(self, symbol, data_dict):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É, –Ω–æ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        multitimeframe_analysis = self.calculate_multitimeframe_analysis(data_dict)
        return self.generate_signal(symbol, data_dict, multitimeframe_analysis)
        
    def run_analysis_cycle(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        cycle_start_time = datetime.now()
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ {len(self.symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä...")
        
        signals = []
        processed_count = 0
        
        for symbol in self.symbols:
            try:
                signal = self.process_symbol(symbol)
                if signal:
                    signals.append(signal)
                    self.send_signal(signal)
                processed_count += 1
                self.analysis_stats['total_analyzed'] += 1
                
                if processed_count % 5 == 0:
                    time.sleep(1)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol}: {e}")
        
        self.check_active_trades()
        self.save_signals_log()
        
        cycle_duration = datetime.now() - cycle_start_time
        logger.info(f"‚úÖ –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration.total_seconds():.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–∞—Ä. –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤.")
        
        self.save_state()
        
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç–∞...")
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(self.symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä –Ω–∞ {len(self.timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö")
        logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: {self.state_file}")
        logger.info(f"üìà SHORT —Å–∏–≥–Ω–∞–ª—ã: {'–í–ö–õ–Æ–ß–ï–ù–´' if self.risk_params['use_short_signals'] else '–í–´–ö–õ–Æ–ß–ï–ù–´'}")
        logger.info(f"üéØ TP/SL —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Ä–æ—Å—Ç–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        logger.info(f"üïí –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É")
        
        if self.active_trades:
            logger.info(f"üì• –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(self.active_trades)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
            for symbol, trade in self.active_trades.items():
                logger.info(f"   üìå {symbol} | {trade['signal_type']} | –í—Ö–æ–¥: {trade['entry_price']}")
        
        cycle_count = 0
        while True:
            try:
                cycle_count += 1
                logger.info(f"üîÑ –¶–∏–∫–ª #{cycle_count}")
                
                self.run_analysis_cycle()
                
                logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ (1 –º–∏–Ω—É—Ç–∞)...")
                time.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞
                
            except KeyboardInterrupt:
                logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                self.save_state()
                self.save_signals_log()
                logger.info("üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                self.save_state()
                time.sleep(60)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
if __name__ == "__main__":
    bot = FuturesCryptoTradingBot()
    bot.run()